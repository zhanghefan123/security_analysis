// Code generated by MockGen. DO NOT EDIT.
// Source: ../pb-go/archivecenter/archivecenter.pb.go

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"

	archivecenter "zhanghefan123/security/protobuf/pb-go/archivecenter"
	common "zhanghefan123/security/protobuf/pb-go/common"
	gomock "github.com/golang/mock/gomock"
	grpc "google.golang.org/grpc"
	metadata "google.golang.org/grpc/metadata"
)

// MockArchiveCenterServerClient is a mock of ArchiveCenterServerClient interface.
type MockArchiveCenterServerClient struct {
	ctrl     *gomock.Controller
	recorder *MockArchiveCenterServerClientMockRecorder
}

// MockArchiveCenterServerClientMockRecorder is the mock recorder for MockArchiveCenterServerClient.
type MockArchiveCenterServerClientMockRecorder struct {
	mock *MockArchiveCenterServerClient
}

// NewMockArchiveCenterServerClient creates a new mock instance.
func NewMockArchiveCenterServerClient(ctrl *gomock.Controller) *MockArchiveCenterServerClient {
	mock := &MockArchiveCenterServerClient{ctrl: ctrl}
	mock.recorder = &MockArchiveCenterServerClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockArchiveCenterServerClient) EXPECT() *MockArchiveCenterServerClientMockRecorder {
	return m.recorder
}

// ArchiveBlocks mocks base method.
func (m *MockArchiveCenterServerClient) ArchiveBlocks(ctx context.Context, opts ...grpc.CallOption) (archivecenter.ArchiveCenterServer_ArchiveBlocksClient, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ArchiveBlocks", varargs...)
	ret0, _ := ret[0].(archivecenter.ArchiveCenterServer_ArchiveBlocksClient)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ArchiveBlocks indicates an expected call of ArchiveBlocks.
func (mr *MockArchiveCenterServerClientMockRecorder) ArchiveBlocks(ctx interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ArchiveBlocks", reflect.TypeOf((*MockArchiveCenterServerClient)(nil).ArchiveBlocks), varargs...)
}

// GetArchivedStatus mocks base method.
func (m *MockArchiveCenterServerClient) GetArchivedStatus(ctx context.Context, in *archivecenter.ArchiveStatusRequest, opts ...grpc.CallOption) (*archivecenter.ArchiveStatusResp, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetArchivedStatus", varargs...)
	ret0, _ := ret[0].(*archivecenter.ArchiveStatusResp)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetArchivedStatus indicates an expected call of GetArchivedStatus.
func (mr *MockArchiveCenterServerClientMockRecorder) GetArchivedStatus(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetArchivedStatus", reflect.TypeOf((*MockArchiveCenterServerClient)(nil).GetArchivedStatus), varargs...)
}

// GetBlockByHash mocks base method.
func (m *MockArchiveCenterServerClient) GetBlockByHash(ctx context.Context, in *archivecenter.BlockByHashRequest, opts ...grpc.CallOption) (*archivecenter.BlockWithRWSetResp, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetBlockByHash", varargs...)
	ret0, _ := ret[0].(*archivecenter.BlockWithRWSetResp)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBlockByHash indicates an expected call of GetBlockByHash.
func (mr *MockArchiveCenterServerClientMockRecorder) GetBlockByHash(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBlockByHash", reflect.TypeOf((*MockArchiveCenterServerClient)(nil).GetBlockByHash), varargs...)
}

// GetBlockByHeight mocks base method.
func (m *MockArchiveCenterServerClient) GetBlockByHeight(ctx context.Context, in *archivecenter.BlockByHeightRequest, opts ...grpc.CallOption) (*archivecenter.BlockWithRWSetResp, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetBlockByHeight", varargs...)
	ret0, _ := ret[0].(*archivecenter.BlockWithRWSetResp)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBlockByHeight indicates an expected call of GetBlockByHeight.
func (mr *MockArchiveCenterServerClientMockRecorder) GetBlockByHeight(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBlockByHeight", reflect.TypeOf((*MockArchiveCenterServerClient)(nil).GetBlockByHeight), varargs...)
}

// GetBlockByTxId mocks base method.
func (m *MockArchiveCenterServerClient) GetBlockByTxId(ctx context.Context, in *archivecenter.BlockByTxIdRequest, opts ...grpc.CallOption) (*archivecenter.BlockWithRWSetResp, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetBlockByTxId", varargs...)
	ret0, _ := ret[0].(*archivecenter.BlockWithRWSetResp)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBlockByTxId indicates an expected call of GetBlockByTxId.
func (mr *MockArchiveCenterServerClientMockRecorder) GetBlockByTxId(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBlockByTxId", reflect.TypeOf((*MockArchiveCenterServerClient)(nil).GetBlockByTxId), varargs...)
}

// GetLastConfigBlock mocks base method.
func (m *MockArchiveCenterServerClient) GetLastConfigBlock(ctx context.Context, in *archivecenter.ArchiveStatusRequest, opts ...grpc.CallOption) (*archivecenter.BlockWithRWSetResp, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetLastConfigBlock", varargs...)
	ret0, _ := ret[0].(*archivecenter.BlockWithRWSetResp)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetLastConfigBlock indicates an expected call of GetLastConfigBlock.
func (mr *MockArchiveCenterServerClientMockRecorder) GetLastConfigBlock(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLastConfigBlock", reflect.TypeOf((*MockArchiveCenterServerClient)(nil).GetLastConfigBlock), varargs...)
}

// GetRangeBlocks mocks base method.
func (m *MockArchiveCenterServerClient) GetRangeBlocks(ctx context.Context, in *archivecenter.RangeBlocksRequest, opts ...grpc.CallOption) (archivecenter.ArchiveCenterServer_GetRangeBlocksClient, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetRangeBlocks", varargs...)
	ret0, _ := ret[0].(archivecenter.ArchiveCenterServer_GetRangeBlocksClient)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRangeBlocks indicates an expected call of GetRangeBlocks.
func (mr *MockArchiveCenterServerClientMockRecorder) GetRangeBlocks(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRangeBlocks", reflect.TypeOf((*MockArchiveCenterServerClient)(nil).GetRangeBlocks), varargs...)
}

// GetStoreStatus mocks base method.
func (m *MockArchiveCenterServerClient) GetStoreStatus(ctx context.Context, in *archivecenter.ArchiveStatusRequest, opts ...grpc.CallOption) (*archivecenter.StoreStatusResp, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetStoreStatus", varargs...)
	ret0, _ := ret[0].(*archivecenter.StoreStatusResp)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetStoreStatus indicates an expected call of GetStoreStatus.
func (mr *MockArchiveCenterServerClientMockRecorder) GetStoreStatus(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetStoreStatus", reflect.TypeOf((*MockArchiveCenterServerClient)(nil).GetStoreStatus), varargs...)
}

// GetTxByTxId mocks base method.
func (m *MockArchiveCenterServerClient) GetTxByTxId(ctx context.Context, in *archivecenter.BlockByTxIdRequest, opts ...grpc.CallOption) (*archivecenter.TransactionResp, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetTxByTxId", varargs...)
	ret0, _ := ret[0].(*archivecenter.TransactionResp)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTxByTxId indicates an expected call of GetTxByTxId.
func (mr *MockArchiveCenterServerClientMockRecorder) GetTxByTxId(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTxByTxId", reflect.TypeOf((*MockArchiveCenterServerClient)(nil).GetTxByTxId), varargs...)
}

// GetTxDetailByTxId mocks base method.
func (m *MockArchiveCenterServerClient) GetTxDetailByTxId(ctx context.Context, in *archivecenter.TxDetailByIdRequest, opts ...grpc.CallOption) (*archivecenter.TxDetailByIdResp, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetTxDetailByTxId", varargs...)
	ret0, _ := ret[0].(*archivecenter.TxDetailByIdResp)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTxDetailByTxId indicates an expected call of GetTxDetailByTxId.
func (mr *MockArchiveCenterServerClientMockRecorder) GetTxDetailByTxId(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTxDetailByTxId", reflect.TypeOf((*MockArchiveCenterServerClient)(nil).GetTxDetailByTxId), varargs...)
}

// GetTxRWSetByTxId mocks base method.
func (m *MockArchiveCenterServerClient) GetTxRWSetByTxId(ctx context.Context, in *archivecenter.BlockByTxIdRequest, opts ...grpc.CallOption) (*archivecenter.TxRWSetResp, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetTxRWSetByTxId", varargs...)
	ret0, _ := ret[0].(*archivecenter.TxRWSetResp)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTxRWSetByTxId indicates an expected call of GetTxRWSetByTxId.
func (mr *MockArchiveCenterServerClientMockRecorder) GetTxRWSetByTxId(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTxRWSetByTxId", reflect.TypeOf((*MockArchiveCenterServerClient)(nil).GetTxRWSetByTxId), varargs...)
}

// Register mocks base method.
func (m *MockArchiveCenterServerClient) Register(ctx context.Context, in *archivecenter.ArchiveBlockRequest, opts ...grpc.CallOption) (*archivecenter.RegisterResp, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Register", varargs...)
	ret0, _ := ret[0].(*archivecenter.RegisterResp)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Register indicates an expected call of Register.
func (mr *MockArchiveCenterServerClientMockRecorder) Register(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Register", reflect.TypeOf((*MockArchiveCenterServerClient)(nil).Register), varargs...)
}

// SingleArchiveBlocks mocks base method.
func (m *MockArchiveCenterServerClient) SingleArchiveBlocks(ctx context.Context, opts ...grpc.CallOption) (archivecenter.ArchiveCenterServer_SingleArchiveBlocksClient, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "SingleArchiveBlocks", varargs...)
	ret0, _ := ret[0].(archivecenter.ArchiveCenterServer_SingleArchiveBlocksClient)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SingleArchiveBlocks indicates an expected call of SingleArchiveBlocks.
func (mr *MockArchiveCenterServerClientMockRecorder) SingleArchiveBlocks(ctx interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SingleArchiveBlocks", reflect.TypeOf((*MockArchiveCenterServerClient)(nil).SingleArchiveBlocks), varargs...)
}

// MockArchiveCenterServer_ArchiveBlocksClient is a mock of ArchiveCenterServer_ArchiveBlocksClient interface.
type MockArchiveCenterServer_ArchiveBlocksClient struct {
	ctrl     *gomock.Controller
	recorder *MockArchiveCenterServer_ArchiveBlocksClientMockRecorder
}

// MockArchiveCenterServer_ArchiveBlocksClientMockRecorder is the mock recorder for MockArchiveCenterServer_ArchiveBlocksClient.
type MockArchiveCenterServer_ArchiveBlocksClientMockRecorder struct {
	mock *MockArchiveCenterServer_ArchiveBlocksClient
}

// NewMockArchiveCenterServer_ArchiveBlocksClient creates a new mock instance.
func NewMockArchiveCenterServer_ArchiveBlocksClient(ctrl *gomock.Controller) *MockArchiveCenterServer_ArchiveBlocksClient {
	mock := &MockArchiveCenterServer_ArchiveBlocksClient{ctrl: ctrl}
	mock.recorder = &MockArchiveCenterServer_ArchiveBlocksClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockArchiveCenterServer_ArchiveBlocksClient) EXPECT() *MockArchiveCenterServer_ArchiveBlocksClientMockRecorder {
	return m.recorder
}

// CloseSend mocks base method.
func (m *MockArchiveCenterServer_ArchiveBlocksClient) CloseSend() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CloseSend")
	ret0, _ := ret[0].(error)
	return ret0
}

// CloseSend indicates an expected call of CloseSend.
func (mr *MockArchiveCenterServer_ArchiveBlocksClientMockRecorder) CloseSend() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CloseSend", reflect.TypeOf((*MockArchiveCenterServer_ArchiveBlocksClient)(nil).CloseSend))
}

// Context mocks base method.
func (m *MockArchiveCenterServer_ArchiveBlocksClient) Context() context.Context {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Context")
	ret0, _ := ret[0].(context.Context)
	return ret0
}

// Context indicates an expected call of Context.
func (mr *MockArchiveCenterServer_ArchiveBlocksClientMockRecorder) Context() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Context", reflect.TypeOf((*MockArchiveCenterServer_ArchiveBlocksClient)(nil).Context))
}

// Header mocks base method.
func (m *MockArchiveCenterServer_ArchiveBlocksClient) Header() (metadata.MD, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Header")
	ret0, _ := ret[0].(metadata.MD)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Header indicates an expected call of Header.
func (mr *MockArchiveCenterServer_ArchiveBlocksClientMockRecorder) Header() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Header", reflect.TypeOf((*MockArchiveCenterServer_ArchiveBlocksClient)(nil).Header))
}

// Recv mocks base method.
func (m *MockArchiveCenterServer_ArchiveBlocksClient) Recv() (*archivecenter.ArchiveBlockResp, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Recv")
	ret0, _ := ret[0].(*archivecenter.ArchiveBlockResp)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Recv indicates an expected call of Recv.
func (mr *MockArchiveCenterServer_ArchiveBlocksClientMockRecorder) Recv() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Recv", reflect.TypeOf((*MockArchiveCenterServer_ArchiveBlocksClient)(nil).Recv))
}

// RecvMsg mocks base method.
func (m_2 *MockArchiveCenterServer_ArchiveBlocksClient) RecvMsg(m interface{}) error {
	m_2.ctrl.T.Helper()
	ret := m_2.ctrl.Call(m_2, "RecvMsg", m)
	ret0, _ := ret[0].(error)
	return ret0
}

// RecvMsg indicates an expected call of RecvMsg.
func (mr *MockArchiveCenterServer_ArchiveBlocksClientMockRecorder) RecvMsg(m interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RecvMsg", reflect.TypeOf((*MockArchiveCenterServer_ArchiveBlocksClient)(nil).RecvMsg), m)
}

// Send mocks base method.
func (m *MockArchiveCenterServer_ArchiveBlocksClient) Send(arg0 *archivecenter.ArchiveBlockRequest) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Send", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Send indicates an expected call of Send.
func (mr *MockArchiveCenterServer_ArchiveBlocksClientMockRecorder) Send(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Send", reflect.TypeOf((*MockArchiveCenterServer_ArchiveBlocksClient)(nil).Send), arg0)
}

// SendMsg mocks base method.
func (m_2 *MockArchiveCenterServer_ArchiveBlocksClient) SendMsg(m interface{}) error {
	m_2.ctrl.T.Helper()
	ret := m_2.ctrl.Call(m_2, "SendMsg", m)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendMsg indicates an expected call of SendMsg.
func (mr *MockArchiveCenterServer_ArchiveBlocksClientMockRecorder) SendMsg(m interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendMsg", reflect.TypeOf((*MockArchiveCenterServer_ArchiveBlocksClient)(nil).SendMsg), m)
}

// Trailer mocks base method.
func (m *MockArchiveCenterServer_ArchiveBlocksClient) Trailer() metadata.MD {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Trailer")
	ret0, _ := ret[0].(metadata.MD)
	return ret0
}

// Trailer indicates an expected call of Trailer.
func (mr *MockArchiveCenterServer_ArchiveBlocksClientMockRecorder) Trailer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Trailer", reflect.TypeOf((*MockArchiveCenterServer_ArchiveBlocksClient)(nil).Trailer))
}

// MockArchiveCenterServer_SingleArchiveBlocksClient is a mock of ArchiveCenterServer_SingleArchiveBlocksClient interface.
type MockArchiveCenterServer_SingleArchiveBlocksClient struct {
	ctrl     *gomock.Controller
	recorder *MockArchiveCenterServer_SingleArchiveBlocksClientMockRecorder
}

// MockArchiveCenterServer_SingleArchiveBlocksClientMockRecorder is the mock recorder for MockArchiveCenterServer_SingleArchiveBlocksClient.
type MockArchiveCenterServer_SingleArchiveBlocksClientMockRecorder struct {
	mock *MockArchiveCenterServer_SingleArchiveBlocksClient
}

// NewMockArchiveCenterServer_SingleArchiveBlocksClient creates a new mock instance.
func NewMockArchiveCenterServer_SingleArchiveBlocksClient(ctrl *gomock.Controller) *MockArchiveCenterServer_SingleArchiveBlocksClient {
	mock := &MockArchiveCenterServer_SingleArchiveBlocksClient{ctrl: ctrl}
	mock.recorder = &MockArchiveCenterServer_SingleArchiveBlocksClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockArchiveCenterServer_SingleArchiveBlocksClient) EXPECT() *MockArchiveCenterServer_SingleArchiveBlocksClientMockRecorder {
	return m.recorder
}

// CloseAndRecv mocks base method.
func (m *MockArchiveCenterServer_SingleArchiveBlocksClient) CloseAndRecv() (*archivecenter.SingleArchiveBlockResp, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CloseAndRecv")
	ret0, _ := ret[0].(*archivecenter.SingleArchiveBlockResp)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CloseAndRecv indicates an expected call of CloseAndRecv.
func (mr *MockArchiveCenterServer_SingleArchiveBlocksClientMockRecorder) CloseAndRecv() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CloseAndRecv", reflect.TypeOf((*MockArchiveCenterServer_SingleArchiveBlocksClient)(nil).CloseAndRecv))
}

// CloseSend mocks base method.
func (m *MockArchiveCenterServer_SingleArchiveBlocksClient) CloseSend() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CloseSend")
	ret0, _ := ret[0].(error)
	return ret0
}

// CloseSend indicates an expected call of CloseSend.
func (mr *MockArchiveCenterServer_SingleArchiveBlocksClientMockRecorder) CloseSend() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CloseSend", reflect.TypeOf((*MockArchiveCenterServer_SingleArchiveBlocksClient)(nil).CloseSend))
}

// Context mocks base method.
func (m *MockArchiveCenterServer_SingleArchiveBlocksClient) Context() context.Context {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Context")
	ret0, _ := ret[0].(context.Context)
	return ret0
}

// Context indicates an expected call of Context.
func (mr *MockArchiveCenterServer_SingleArchiveBlocksClientMockRecorder) Context() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Context", reflect.TypeOf((*MockArchiveCenterServer_SingleArchiveBlocksClient)(nil).Context))
}

// Header mocks base method.
func (m *MockArchiveCenterServer_SingleArchiveBlocksClient) Header() (metadata.MD, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Header")
	ret0, _ := ret[0].(metadata.MD)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Header indicates an expected call of Header.
func (mr *MockArchiveCenterServer_SingleArchiveBlocksClientMockRecorder) Header() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Header", reflect.TypeOf((*MockArchiveCenterServer_SingleArchiveBlocksClient)(nil).Header))
}

// RecvMsg mocks base method.
func (m_2 *MockArchiveCenterServer_SingleArchiveBlocksClient) RecvMsg(m interface{}) error {
	m_2.ctrl.T.Helper()
	ret := m_2.ctrl.Call(m_2, "RecvMsg", m)
	ret0, _ := ret[0].(error)
	return ret0
}

// RecvMsg indicates an expected call of RecvMsg.
func (mr *MockArchiveCenterServer_SingleArchiveBlocksClientMockRecorder) RecvMsg(m interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RecvMsg", reflect.TypeOf((*MockArchiveCenterServer_SingleArchiveBlocksClient)(nil).RecvMsg), m)
}

// Send mocks base method.
func (m *MockArchiveCenterServer_SingleArchiveBlocksClient) Send(arg0 *archivecenter.ArchiveBlockRequest) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Send", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Send indicates an expected call of Send.
func (mr *MockArchiveCenterServer_SingleArchiveBlocksClientMockRecorder) Send(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Send", reflect.TypeOf((*MockArchiveCenterServer_SingleArchiveBlocksClient)(nil).Send), arg0)
}

// SendMsg mocks base method.
func (m_2 *MockArchiveCenterServer_SingleArchiveBlocksClient) SendMsg(m interface{}) error {
	m_2.ctrl.T.Helper()
	ret := m_2.ctrl.Call(m_2, "SendMsg", m)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendMsg indicates an expected call of SendMsg.
func (mr *MockArchiveCenterServer_SingleArchiveBlocksClientMockRecorder) SendMsg(m interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendMsg", reflect.TypeOf((*MockArchiveCenterServer_SingleArchiveBlocksClient)(nil).SendMsg), m)
}

// Trailer mocks base method.
func (m *MockArchiveCenterServer_SingleArchiveBlocksClient) Trailer() metadata.MD {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Trailer")
	ret0, _ := ret[0].(metadata.MD)
	return ret0
}

// Trailer indicates an expected call of Trailer.
func (mr *MockArchiveCenterServer_SingleArchiveBlocksClientMockRecorder) Trailer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Trailer", reflect.TypeOf((*MockArchiveCenterServer_SingleArchiveBlocksClient)(nil).Trailer))
}

// MockArchiveCenterServer_GetRangeBlocksClient is a mock of ArchiveCenterServer_GetRangeBlocksClient interface.
type MockArchiveCenterServer_GetRangeBlocksClient struct {
	ctrl     *gomock.Controller
	recorder *MockArchiveCenterServer_GetRangeBlocksClientMockRecorder
}

// MockArchiveCenterServer_GetRangeBlocksClientMockRecorder is the mock recorder for MockArchiveCenterServer_GetRangeBlocksClient.
type MockArchiveCenterServer_GetRangeBlocksClientMockRecorder struct {
	mock *MockArchiveCenterServer_GetRangeBlocksClient
}

// NewMockArchiveCenterServer_GetRangeBlocksClient creates a new mock instance.
func NewMockArchiveCenterServer_GetRangeBlocksClient(ctrl *gomock.Controller) *MockArchiveCenterServer_GetRangeBlocksClient {
	mock := &MockArchiveCenterServer_GetRangeBlocksClient{ctrl: ctrl}
	mock.recorder = &MockArchiveCenterServer_GetRangeBlocksClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockArchiveCenterServer_GetRangeBlocksClient) EXPECT() *MockArchiveCenterServer_GetRangeBlocksClientMockRecorder {
	return m.recorder
}

// CloseSend mocks base method.
func (m *MockArchiveCenterServer_GetRangeBlocksClient) CloseSend() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CloseSend")
	ret0, _ := ret[0].(error)
	return ret0
}

// CloseSend indicates an expected call of CloseSend.
func (mr *MockArchiveCenterServer_GetRangeBlocksClientMockRecorder) CloseSend() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CloseSend", reflect.TypeOf((*MockArchiveCenterServer_GetRangeBlocksClient)(nil).CloseSend))
}

// Context mocks base method.
func (m *MockArchiveCenterServer_GetRangeBlocksClient) Context() context.Context {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Context")
	ret0, _ := ret[0].(context.Context)
	return ret0
}

// Context indicates an expected call of Context.
func (mr *MockArchiveCenterServer_GetRangeBlocksClientMockRecorder) Context() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Context", reflect.TypeOf((*MockArchiveCenterServer_GetRangeBlocksClient)(nil).Context))
}

// Header mocks base method.
func (m *MockArchiveCenterServer_GetRangeBlocksClient) Header() (metadata.MD, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Header")
	ret0, _ := ret[0].(metadata.MD)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Header indicates an expected call of Header.
func (mr *MockArchiveCenterServer_GetRangeBlocksClientMockRecorder) Header() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Header", reflect.TypeOf((*MockArchiveCenterServer_GetRangeBlocksClient)(nil).Header))
}

// Recv mocks base method.
func (m *MockArchiveCenterServer_GetRangeBlocksClient) Recv() (*common.BlockInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Recv")
	ret0, _ := ret[0].(*common.BlockInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Recv indicates an expected call of Recv.
func (mr *MockArchiveCenterServer_GetRangeBlocksClientMockRecorder) Recv() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Recv", reflect.TypeOf((*MockArchiveCenterServer_GetRangeBlocksClient)(nil).Recv))
}

// RecvMsg mocks base method.
func (m_2 *MockArchiveCenterServer_GetRangeBlocksClient) RecvMsg(m interface{}) error {
	m_2.ctrl.T.Helper()
	ret := m_2.ctrl.Call(m_2, "RecvMsg", m)
	ret0, _ := ret[0].(error)
	return ret0
}

// RecvMsg indicates an expected call of RecvMsg.
func (mr *MockArchiveCenterServer_GetRangeBlocksClientMockRecorder) RecvMsg(m interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RecvMsg", reflect.TypeOf((*MockArchiveCenterServer_GetRangeBlocksClient)(nil).RecvMsg), m)
}

// SendMsg mocks base method.
func (m_2 *MockArchiveCenterServer_GetRangeBlocksClient) SendMsg(m interface{}) error {
	m_2.ctrl.T.Helper()
	ret := m_2.ctrl.Call(m_2, "SendMsg", m)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendMsg indicates an expected call of SendMsg.
func (mr *MockArchiveCenterServer_GetRangeBlocksClientMockRecorder) SendMsg(m interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendMsg", reflect.TypeOf((*MockArchiveCenterServer_GetRangeBlocksClient)(nil).SendMsg), m)
}

// Trailer mocks base method.
func (m *MockArchiveCenterServer_GetRangeBlocksClient) Trailer() metadata.MD {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Trailer")
	ret0, _ := ret[0].(metadata.MD)
	return ret0
}

// Trailer indicates an expected call of Trailer.
func (mr *MockArchiveCenterServer_GetRangeBlocksClientMockRecorder) Trailer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Trailer", reflect.TypeOf((*MockArchiveCenterServer_GetRangeBlocksClient)(nil).Trailer))
}

// MockArchiveCenterServerServer is a mock of ArchiveCenterServerServer interface.
type MockArchiveCenterServerServer struct {
	ctrl     *gomock.Controller
	recorder *MockArchiveCenterServerServerMockRecorder
}

// MockArchiveCenterServerServerMockRecorder is the mock recorder for MockArchiveCenterServerServer.
type MockArchiveCenterServerServerMockRecorder struct {
	mock *MockArchiveCenterServerServer
}

// NewMockArchiveCenterServerServer creates a new mock instance.
func NewMockArchiveCenterServerServer(ctrl *gomock.Controller) *MockArchiveCenterServerServer {
	mock := &MockArchiveCenterServerServer{ctrl: ctrl}
	mock.recorder = &MockArchiveCenterServerServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockArchiveCenterServerServer) EXPECT() *MockArchiveCenterServerServerMockRecorder {
	return m.recorder
}

// ArchiveBlocks mocks base method.
func (m *MockArchiveCenterServerServer) ArchiveBlocks(arg0 archivecenter.ArchiveCenterServer_ArchiveBlocksServer) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ArchiveBlocks", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// ArchiveBlocks indicates an expected call of ArchiveBlocks.
func (mr *MockArchiveCenterServerServerMockRecorder) ArchiveBlocks(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ArchiveBlocks", reflect.TypeOf((*MockArchiveCenterServerServer)(nil).ArchiveBlocks), arg0)
}

// GetArchivedStatus mocks base method.
func (m *MockArchiveCenterServerServer) GetArchivedStatus(arg0 context.Context, arg1 *archivecenter.ArchiveStatusRequest) (*archivecenter.ArchiveStatusResp, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetArchivedStatus", arg0, arg1)
	ret0, _ := ret[0].(*archivecenter.ArchiveStatusResp)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetArchivedStatus indicates an expected call of GetArchivedStatus.
func (mr *MockArchiveCenterServerServerMockRecorder) GetArchivedStatus(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetArchivedStatus", reflect.TypeOf((*MockArchiveCenterServerServer)(nil).GetArchivedStatus), arg0, arg1)
}

// GetBlockByHash mocks base method.
func (m *MockArchiveCenterServerServer) GetBlockByHash(arg0 context.Context, arg1 *archivecenter.BlockByHashRequest) (*archivecenter.BlockWithRWSetResp, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBlockByHash", arg0, arg1)
	ret0, _ := ret[0].(*archivecenter.BlockWithRWSetResp)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBlockByHash indicates an expected call of GetBlockByHash.
func (mr *MockArchiveCenterServerServerMockRecorder) GetBlockByHash(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBlockByHash", reflect.TypeOf((*MockArchiveCenterServerServer)(nil).GetBlockByHash), arg0, arg1)
}

// GetBlockByHeight mocks base method.
func (m *MockArchiveCenterServerServer) GetBlockByHeight(arg0 context.Context, arg1 *archivecenter.BlockByHeightRequest) (*archivecenter.BlockWithRWSetResp, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBlockByHeight", arg0, arg1)
	ret0, _ := ret[0].(*archivecenter.BlockWithRWSetResp)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBlockByHeight indicates an expected call of GetBlockByHeight.
func (mr *MockArchiveCenterServerServerMockRecorder) GetBlockByHeight(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBlockByHeight", reflect.TypeOf((*MockArchiveCenterServerServer)(nil).GetBlockByHeight), arg0, arg1)
}

// GetBlockByTxId mocks base method.
func (m *MockArchiveCenterServerServer) GetBlockByTxId(arg0 context.Context, arg1 *archivecenter.BlockByTxIdRequest) (*archivecenter.BlockWithRWSetResp, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBlockByTxId", arg0, arg1)
	ret0, _ := ret[0].(*archivecenter.BlockWithRWSetResp)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBlockByTxId indicates an expected call of GetBlockByTxId.
func (mr *MockArchiveCenterServerServerMockRecorder) GetBlockByTxId(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBlockByTxId", reflect.TypeOf((*MockArchiveCenterServerServer)(nil).GetBlockByTxId), arg0, arg1)
}

// GetLastConfigBlock mocks base method.
func (m *MockArchiveCenterServerServer) GetLastConfigBlock(arg0 context.Context, arg1 *archivecenter.ArchiveStatusRequest) (*archivecenter.BlockWithRWSetResp, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLastConfigBlock", arg0, arg1)
	ret0, _ := ret[0].(*archivecenter.BlockWithRWSetResp)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetLastConfigBlock indicates an expected call of GetLastConfigBlock.
func (mr *MockArchiveCenterServerServerMockRecorder) GetLastConfigBlock(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLastConfigBlock", reflect.TypeOf((*MockArchiveCenterServerServer)(nil).GetLastConfigBlock), arg0, arg1)
}

// GetRangeBlocks mocks base method.
func (m *MockArchiveCenterServerServer) GetRangeBlocks(arg0 *archivecenter.RangeBlocksRequest, arg1 archivecenter.ArchiveCenterServer_GetRangeBlocksServer) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRangeBlocks", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// GetRangeBlocks indicates an expected call of GetRangeBlocks.
func (mr *MockArchiveCenterServerServerMockRecorder) GetRangeBlocks(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRangeBlocks", reflect.TypeOf((*MockArchiveCenterServerServer)(nil).GetRangeBlocks), arg0, arg1)
}

// GetStoreStatus mocks base method.
func (m *MockArchiveCenterServerServer) GetStoreStatus(arg0 context.Context, arg1 *archivecenter.ArchiveStatusRequest) (*archivecenter.StoreStatusResp, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetStoreStatus", arg0, arg1)
	ret0, _ := ret[0].(*archivecenter.StoreStatusResp)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetStoreStatus indicates an expected call of GetStoreStatus.
func (mr *MockArchiveCenterServerServerMockRecorder) GetStoreStatus(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetStoreStatus", reflect.TypeOf((*MockArchiveCenterServerServer)(nil).GetStoreStatus), arg0, arg1)
}

// GetTxByTxId mocks base method.
func (m *MockArchiveCenterServerServer) GetTxByTxId(arg0 context.Context, arg1 *archivecenter.BlockByTxIdRequest) (*archivecenter.TransactionResp, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTxByTxId", arg0, arg1)
	ret0, _ := ret[0].(*archivecenter.TransactionResp)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTxByTxId indicates an expected call of GetTxByTxId.
func (mr *MockArchiveCenterServerServerMockRecorder) GetTxByTxId(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTxByTxId", reflect.TypeOf((*MockArchiveCenterServerServer)(nil).GetTxByTxId), arg0, arg1)
}

// GetTxDetailByTxId mocks base method.
func (m *MockArchiveCenterServerServer) GetTxDetailByTxId(arg0 context.Context, arg1 *archivecenter.TxDetailByIdRequest) (*archivecenter.TxDetailByIdResp, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTxDetailByTxId", arg0, arg1)
	ret0, _ := ret[0].(*archivecenter.TxDetailByIdResp)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTxDetailByTxId indicates an expected call of GetTxDetailByTxId.
func (mr *MockArchiveCenterServerServerMockRecorder) GetTxDetailByTxId(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTxDetailByTxId", reflect.TypeOf((*MockArchiveCenterServerServer)(nil).GetTxDetailByTxId), arg0, arg1)
}

// GetTxRWSetByTxId mocks base method.
func (m *MockArchiveCenterServerServer) GetTxRWSetByTxId(arg0 context.Context, arg1 *archivecenter.BlockByTxIdRequest) (*archivecenter.TxRWSetResp, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTxRWSetByTxId", arg0, arg1)
	ret0, _ := ret[0].(*archivecenter.TxRWSetResp)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTxRWSetByTxId indicates an expected call of GetTxRWSetByTxId.
func (mr *MockArchiveCenterServerServerMockRecorder) GetTxRWSetByTxId(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTxRWSetByTxId", reflect.TypeOf((*MockArchiveCenterServerServer)(nil).GetTxRWSetByTxId), arg0, arg1)
}

// Register mocks base method.
func (m *MockArchiveCenterServerServer) Register(arg0 context.Context, arg1 *archivecenter.ArchiveBlockRequest) (*archivecenter.RegisterResp, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Register", arg0, arg1)
	ret0, _ := ret[0].(*archivecenter.RegisterResp)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Register indicates an expected call of Register.
func (mr *MockArchiveCenterServerServerMockRecorder) Register(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Register", reflect.TypeOf((*MockArchiveCenterServerServer)(nil).Register), arg0, arg1)
}

// SingleArchiveBlocks mocks base method.
func (m *MockArchiveCenterServerServer) SingleArchiveBlocks(arg0 archivecenter.ArchiveCenterServer_SingleArchiveBlocksServer) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SingleArchiveBlocks", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SingleArchiveBlocks indicates an expected call of SingleArchiveBlocks.
func (mr *MockArchiveCenterServerServerMockRecorder) SingleArchiveBlocks(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SingleArchiveBlocks", reflect.TypeOf((*MockArchiveCenterServerServer)(nil).SingleArchiveBlocks), arg0)
}

// MockArchiveCenterServer_ArchiveBlocksServer is a mock of ArchiveCenterServer_ArchiveBlocksServer interface.
type MockArchiveCenterServer_ArchiveBlocksServer struct {
	ctrl     *gomock.Controller
	recorder *MockArchiveCenterServer_ArchiveBlocksServerMockRecorder
}

// MockArchiveCenterServer_ArchiveBlocksServerMockRecorder is the mock recorder for MockArchiveCenterServer_ArchiveBlocksServer.
type MockArchiveCenterServer_ArchiveBlocksServerMockRecorder struct {
	mock *MockArchiveCenterServer_ArchiveBlocksServer
}

// NewMockArchiveCenterServer_ArchiveBlocksServer creates a new mock instance.
func NewMockArchiveCenterServer_ArchiveBlocksServer(ctrl *gomock.Controller) *MockArchiveCenterServer_ArchiveBlocksServer {
	mock := &MockArchiveCenterServer_ArchiveBlocksServer{ctrl: ctrl}
	mock.recorder = &MockArchiveCenterServer_ArchiveBlocksServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockArchiveCenterServer_ArchiveBlocksServer) EXPECT() *MockArchiveCenterServer_ArchiveBlocksServerMockRecorder {
	return m.recorder
}

// Context mocks base method.
func (m *MockArchiveCenterServer_ArchiveBlocksServer) Context() context.Context {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Context")
	ret0, _ := ret[0].(context.Context)
	return ret0
}

// Context indicates an expected call of Context.
func (mr *MockArchiveCenterServer_ArchiveBlocksServerMockRecorder) Context() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Context", reflect.TypeOf((*MockArchiveCenterServer_ArchiveBlocksServer)(nil).Context))
}

// Recv mocks base method.
func (m *MockArchiveCenterServer_ArchiveBlocksServer) Recv() (*archivecenter.ArchiveBlockRequest, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Recv")
	ret0, _ := ret[0].(*archivecenter.ArchiveBlockRequest)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Recv indicates an expected call of Recv.
func (mr *MockArchiveCenterServer_ArchiveBlocksServerMockRecorder) Recv() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Recv", reflect.TypeOf((*MockArchiveCenterServer_ArchiveBlocksServer)(nil).Recv))
}

// RecvMsg mocks base method.
func (m_2 *MockArchiveCenterServer_ArchiveBlocksServer) RecvMsg(m interface{}) error {
	m_2.ctrl.T.Helper()
	ret := m_2.ctrl.Call(m_2, "RecvMsg", m)
	ret0, _ := ret[0].(error)
	return ret0
}

// RecvMsg indicates an expected call of RecvMsg.
func (mr *MockArchiveCenterServer_ArchiveBlocksServerMockRecorder) RecvMsg(m interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RecvMsg", reflect.TypeOf((*MockArchiveCenterServer_ArchiveBlocksServer)(nil).RecvMsg), m)
}

// Send mocks base method.
func (m *MockArchiveCenterServer_ArchiveBlocksServer) Send(arg0 *archivecenter.ArchiveBlockResp) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Send", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Send indicates an expected call of Send.
func (mr *MockArchiveCenterServer_ArchiveBlocksServerMockRecorder) Send(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Send", reflect.TypeOf((*MockArchiveCenterServer_ArchiveBlocksServer)(nil).Send), arg0)
}

// SendHeader mocks base method.
func (m *MockArchiveCenterServer_ArchiveBlocksServer) SendHeader(arg0 metadata.MD) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendHeader", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendHeader indicates an expected call of SendHeader.
func (mr *MockArchiveCenterServer_ArchiveBlocksServerMockRecorder) SendHeader(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendHeader", reflect.TypeOf((*MockArchiveCenterServer_ArchiveBlocksServer)(nil).SendHeader), arg0)
}

// SendMsg mocks base method.
func (m_2 *MockArchiveCenterServer_ArchiveBlocksServer) SendMsg(m interface{}) error {
	m_2.ctrl.T.Helper()
	ret := m_2.ctrl.Call(m_2, "SendMsg", m)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendMsg indicates an expected call of SendMsg.
func (mr *MockArchiveCenterServer_ArchiveBlocksServerMockRecorder) SendMsg(m interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendMsg", reflect.TypeOf((*MockArchiveCenterServer_ArchiveBlocksServer)(nil).SendMsg), m)
}

// SetHeader mocks base method.
func (m *MockArchiveCenterServer_ArchiveBlocksServer) SetHeader(arg0 metadata.MD) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetHeader", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetHeader indicates an expected call of SetHeader.
func (mr *MockArchiveCenterServer_ArchiveBlocksServerMockRecorder) SetHeader(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetHeader", reflect.TypeOf((*MockArchiveCenterServer_ArchiveBlocksServer)(nil).SetHeader), arg0)
}

// SetTrailer mocks base method.
func (m *MockArchiveCenterServer_ArchiveBlocksServer) SetTrailer(arg0 metadata.MD) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetTrailer", arg0)
}

// SetTrailer indicates an expected call of SetTrailer.
func (mr *MockArchiveCenterServer_ArchiveBlocksServerMockRecorder) SetTrailer(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetTrailer", reflect.TypeOf((*MockArchiveCenterServer_ArchiveBlocksServer)(nil).SetTrailer), arg0)
}

// MockArchiveCenterServer_SingleArchiveBlocksServer is a mock of ArchiveCenterServer_SingleArchiveBlocksServer interface.
type MockArchiveCenterServer_SingleArchiveBlocksServer struct {
	ctrl     *gomock.Controller
	recorder *MockArchiveCenterServer_SingleArchiveBlocksServerMockRecorder
}

// MockArchiveCenterServer_SingleArchiveBlocksServerMockRecorder is the mock recorder for MockArchiveCenterServer_SingleArchiveBlocksServer.
type MockArchiveCenterServer_SingleArchiveBlocksServerMockRecorder struct {
	mock *MockArchiveCenterServer_SingleArchiveBlocksServer
}

// NewMockArchiveCenterServer_SingleArchiveBlocksServer creates a new mock instance.
func NewMockArchiveCenterServer_SingleArchiveBlocksServer(ctrl *gomock.Controller) *MockArchiveCenterServer_SingleArchiveBlocksServer {
	mock := &MockArchiveCenterServer_SingleArchiveBlocksServer{ctrl: ctrl}
	mock.recorder = &MockArchiveCenterServer_SingleArchiveBlocksServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockArchiveCenterServer_SingleArchiveBlocksServer) EXPECT() *MockArchiveCenterServer_SingleArchiveBlocksServerMockRecorder {
	return m.recorder
}

// Context mocks base method.
func (m *MockArchiveCenterServer_SingleArchiveBlocksServer) Context() context.Context {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Context")
	ret0, _ := ret[0].(context.Context)
	return ret0
}

// Context indicates an expected call of Context.
func (mr *MockArchiveCenterServer_SingleArchiveBlocksServerMockRecorder) Context() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Context", reflect.TypeOf((*MockArchiveCenterServer_SingleArchiveBlocksServer)(nil).Context))
}

// Recv mocks base method.
func (m *MockArchiveCenterServer_SingleArchiveBlocksServer) Recv() (*archivecenter.ArchiveBlockRequest, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Recv")
	ret0, _ := ret[0].(*archivecenter.ArchiveBlockRequest)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Recv indicates an expected call of Recv.
func (mr *MockArchiveCenterServer_SingleArchiveBlocksServerMockRecorder) Recv() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Recv", reflect.TypeOf((*MockArchiveCenterServer_SingleArchiveBlocksServer)(nil).Recv))
}

// RecvMsg mocks base method.
func (m_2 *MockArchiveCenterServer_SingleArchiveBlocksServer) RecvMsg(m interface{}) error {
	m_2.ctrl.T.Helper()
	ret := m_2.ctrl.Call(m_2, "RecvMsg", m)
	ret0, _ := ret[0].(error)
	return ret0
}

// RecvMsg indicates an expected call of RecvMsg.
func (mr *MockArchiveCenterServer_SingleArchiveBlocksServerMockRecorder) RecvMsg(m interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RecvMsg", reflect.TypeOf((*MockArchiveCenterServer_SingleArchiveBlocksServer)(nil).RecvMsg), m)
}

// SendAndClose mocks base method.
func (m *MockArchiveCenterServer_SingleArchiveBlocksServer) SendAndClose(arg0 *archivecenter.SingleArchiveBlockResp) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendAndClose", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendAndClose indicates an expected call of SendAndClose.
func (mr *MockArchiveCenterServer_SingleArchiveBlocksServerMockRecorder) SendAndClose(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendAndClose", reflect.TypeOf((*MockArchiveCenterServer_SingleArchiveBlocksServer)(nil).SendAndClose), arg0)
}

// SendHeader mocks base method.
func (m *MockArchiveCenterServer_SingleArchiveBlocksServer) SendHeader(arg0 metadata.MD) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendHeader", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendHeader indicates an expected call of SendHeader.
func (mr *MockArchiveCenterServer_SingleArchiveBlocksServerMockRecorder) SendHeader(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendHeader", reflect.TypeOf((*MockArchiveCenterServer_SingleArchiveBlocksServer)(nil).SendHeader), arg0)
}

// SendMsg mocks base method.
func (m_2 *MockArchiveCenterServer_SingleArchiveBlocksServer) SendMsg(m interface{}) error {
	m_2.ctrl.T.Helper()
	ret := m_2.ctrl.Call(m_2, "SendMsg", m)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendMsg indicates an expected call of SendMsg.
func (mr *MockArchiveCenterServer_SingleArchiveBlocksServerMockRecorder) SendMsg(m interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendMsg", reflect.TypeOf((*MockArchiveCenterServer_SingleArchiveBlocksServer)(nil).SendMsg), m)
}

// SetHeader mocks base method.
func (m *MockArchiveCenterServer_SingleArchiveBlocksServer) SetHeader(arg0 metadata.MD) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetHeader", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetHeader indicates an expected call of SetHeader.
func (mr *MockArchiveCenterServer_SingleArchiveBlocksServerMockRecorder) SetHeader(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetHeader", reflect.TypeOf((*MockArchiveCenterServer_SingleArchiveBlocksServer)(nil).SetHeader), arg0)
}

// SetTrailer mocks base method.
func (m *MockArchiveCenterServer_SingleArchiveBlocksServer) SetTrailer(arg0 metadata.MD) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetTrailer", arg0)
}

// SetTrailer indicates an expected call of SetTrailer.
func (mr *MockArchiveCenterServer_SingleArchiveBlocksServerMockRecorder) SetTrailer(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetTrailer", reflect.TypeOf((*MockArchiveCenterServer_SingleArchiveBlocksServer)(nil).SetTrailer), arg0)
}

// MockArchiveCenterServer_GetRangeBlocksServer is a mock of ArchiveCenterServer_GetRangeBlocksServer interface.
type MockArchiveCenterServer_GetRangeBlocksServer struct {
	ctrl     *gomock.Controller
	recorder *MockArchiveCenterServer_GetRangeBlocksServerMockRecorder
}

// MockArchiveCenterServer_GetRangeBlocksServerMockRecorder is the mock recorder for MockArchiveCenterServer_GetRangeBlocksServer.
type MockArchiveCenterServer_GetRangeBlocksServerMockRecorder struct {
	mock *MockArchiveCenterServer_GetRangeBlocksServer
}

// NewMockArchiveCenterServer_GetRangeBlocksServer creates a new mock instance.
func NewMockArchiveCenterServer_GetRangeBlocksServer(ctrl *gomock.Controller) *MockArchiveCenterServer_GetRangeBlocksServer {
	mock := &MockArchiveCenterServer_GetRangeBlocksServer{ctrl: ctrl}
	mock.recorder = &MockArchiveCenterServer_GetRangeBlocksServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockArchiveCenterServer_GetRangeBlocksServer) EXPECT() *MockArchiveCenterServer_GetRangeBlocksServerMockRecorder {
	return m.recorder
}

// Context mocks base method.
func (m *MockArchiveCenterServer_GetRangeBlocksServer) Context() context.Context {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Context")
	ret0, _ := ret[0].(context.Context)
	return ret0
}

// Context indicates an expected call of Context.
func (mr *MockArchiveCenterServer_GetRangeBlocksServerMockRecorder) Context() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Context", reflect.TypeOf((*MockArchiveCenterServer_GetRangeBlocksServer)(nil).Context))
}

// RecvMsg mocks base method.
func (m_2 *MockArchiveCenterServer_GetRangeBlocksServer) RecvMsg(m interface{}) error {
	m_2.ctrl.T.Helper()
	ret := m_2.ctrl.Call(m_2, "RecvMsg", m)
	ret0, _ := ret[0].(error)
	return ret0
}

// RecvMsg indicates an expected call of RecvMsg.
func (mr *MockArchiveCenterServer_GetRangeBlocksServerMockRecorder) RecvMsg(m interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RecvMsg", reflect.TypeOf((*MockArchiveCenterServer_GetRangeBlocksServer)(nil).RecvMsg), m)
}

// Send mocks base method.
func (m *MockArchiveCenterServer_GetRangeBlocksServer) Send(arg0 *common.BlockInfo) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Send", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Send indicates an expected call of Send.
func (mr *MockArchiveCenterServer_GetRangeBlocksServerMockRecorder) Send(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Send", reflect.TypeOf((*MockArchiveCenterServer_GetRangeBlocksServer)(nil).Send), arg0)
}

// SendHeader mocks base method.
func (m *MockArchiveCenterServer_GetRangeBlocksServer) SendHeader(arg0 metadata.MD) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendHeader", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendHeader indicates an expected call of SendHeader.
func (mr *MockArchiveCenterServer_GetRangeBlocksServerMockRecorder) SendHeader(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendHeader", reflect.TypeOf((*MockArchiveCenterServer_GetRangeBlocksServer)(nil).SendHeader), arg0)
}

// SendMsg mocks base method.
func (m_2 *MockArchiveCenterServer_GetRangeBlocksServer) SendMsg(m interface{}) error {
	m_2.ctrl.T.Helper()
	ret := m_2.ctrl.Call(m_2, "SendMsg", m)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendMsg indicates an expected call of SendMsg.
func (mr *MockArchiveCenterServer_GetRangeBlocksServerMockRecorder) SendMsg(m interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendMsg", reflect.TypeOf((*MockArchiveCenterServer_GetRangeBlocksServer)(nil).SendMsg), m)
}

// SetHeader mocks base method.
func (m *MockArchiveCenterServer_GetRangeBlocksServer) SetHeader(arg0 metadata.MD) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetHeader", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetHeader indicates an expected call of SetHeader.
func (mr *MockArchiveCenterServer_GetRangeBlocksServerMockRecorder) SetHeader(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetHeader", reflect.TypeOf((*MockArchiveCenterServer_GetRangeBlocksServer)(nil).SetHeader), arg0)
}

// SetTrailer mocks base method.
func (m *MockArchiveCenterServer_GetRangeBlocksServer) SetTrailer(arg0 metadata.MD) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetTrailer", arg0)
}

// SetTrailer indicates an expected call of SetTrailer.
func (mr *MockArchiveCenterServer_GetRangeBlocksServerMockRecorder) SetTrailer(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetTrailer", reflect.TypeOf((*MockArchiveCenterServer_GetRangeBlocksServer)(nil).SetTrailer), arg0)
}
