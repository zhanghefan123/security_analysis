// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: consensus/maxbft/maxbft.proto

package maxbft

import (
	common "zhanghefan123/security/protobuf/pb-go/common"
	config "zhanghefan123/security/protobuf/pb-go/config"
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type MessageType int32

const (
	MessageType_PROPOSAL_MESSAGE       MessageType = 0
	MessageType_VOTE_MESSAGE           MessageType = 1
	MessageType_PROPOSAL_FETCH_MESSAGE MessageType = 2
	MessageType_PROPOSAL_RESP_MESSAGE  MessageType = 3
	MessageType_NEW_VIEW_MESSAGE       MessageType = 4
)

var MessageType_name = map[int32]string{
	0: "PROPOSAL_MESSAGE",
	1: "VOTE_MESSAGE",
	2: "PROPOSAL_FETCH_MESSAGE",
	3: "PROPOSAL_RESP_MESSAGE",
	4: "NEW_VIEW_MESSAGE",
}

var MessageType_value = map[string]int32{
	"PROPOSAL_MESSAGE":       0,
	"VOTE_MESSAGE":           1,
	"PROPOSAL_FETCH_MESSAGE": 2,
	"PROPOSAL_RESP_MESSAGE":  3,
	"NEW_VIEW_MESSAGE":       4,
}

func (x MessageType) String() string {
	return proto.EnumName(MessageType_name, int32(x))
}

func (MessageType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_a50258efc9e4164a, []int{0}
}

type ConsStateType int32

const (
	// The collection phase of the votes
	ConsStateType_VOTE_COLLECT ConsStateType = 0
	// pacemaker of the consensus
	ConsStateType_PACEMAKER ConsStateType = 1
)

var ConsStateType_name = map[int32]string{
	0: "VOTE_COLLECT",
	1: "PACEMAKER",
}

var ConsStateType_value = map[string]int32{
	"VOTE_COLLECT": 0,
	"PACEMAKER":    1,
}

func (x ConsStateType) String() string {
	return proto.EnumName(ConsStateType_name, int32(x))
}

func (ConsStateType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_a50258efc9e4164a, []int{1}
}

type ConsensusMsg struct {
	Type    MessageType `protobuf:"varint,1,opt,name=type,proto3,enum=maxbft.MessageType" json:"type,omitempty"`
	Payload []byte      `protobuf:"bytes,2,opt,name=payload,proto3" json:"payload,omitempty"`
}

func (m *ConsensusMsg) Reset()         { *m = ConsensusMsg{} }
func (m *ConsensusMsg) String() string { return proto.CompactTextString(m) }
func (*ConsensusMsg) ProtoMessage()    {}
func (*ConsensusMsg) Descriptor() ([]byte, []int) {
	return fileDescriptor_a50258efc9e4164a, []int{0}
}
func (m *ConsensusMsg) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ConsensusMsg) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ConsensusMsg.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ConsensusMsg) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ConsensusMsg.Merge(m, src)
}
func (m *ConsensusMsg) XXX_Size() int {
	return m.Size()
}
func (m *ConsensusMsg) XXX_DiscardUnknown() {
	xxx_messageInfo_ConsensusMsg.DiscardUnknown(m)
}

var xxx_messageInfo_ConsensusMsg proto.InternalMessageInfo

func (m *ConsensusMsg) GetType() MessageType {
	if m != nil {
		return m.Type
	}
	return MessageType_PROPOSAL_MESSAGE
}

func (m *ConsensusMsg) GetPayload() []byte {
	if m != nil {
		return m.Payload
	}
	return nil
}

type ProposalData struct {
	// block info of the proposal
	Block *common.Block `protobuf:"bytes,1,opt,name=block,proto3" json:"block,omitempty"`
	// consensus view of the proposal
	View     uint64 `protobuf:"varint,2,opt,name=view,proto3" json:"view,omitempty"`
	Proposer string `protobuf:"bytes,3,opt,name=proposer,proto3" json:"proposer,omitempty"`
	// the qc info of the parent's block in the proposal
	JustifyQc *QuorumCert       `protobuf:"bytes,4,opt,name=justify_qc,json=justifyQc,proto3" json:"justify_qc,omitempty"`
	EpochId   uint64            `protobuf:"varint,5,opt,name=epoch_id,json=epochId,proto3" json:"epoch_id,omitempty"`
	TxRwSet   []*common.TxRWSet `protobuf:"bytes,6,rep,name=tx_rw_set,json=txRwSet,proto3" json:"tx_rw_set,omitempty"`
}

func (m *ProposalData) Reset()         { *m = ProposalData{} }
func (m *ProposalData) String() string { return proto.CompactTextString(m) }
func (*ProposalData) ProtoMessage()    {}
func (*ProposalData) Descriptor() ([]byte, []int) {
	return fileDescriptor_a50258efc9e4164a, []int{1}
}
func (m *ProposalData) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ProposalData) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ProposalData.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ProposalData) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ProposalData.Merge(m, src)
}
func (m *ProposalData) XXX_Size() int {
	return m.Size()
}
func (m *ProposalData) XXX_DiscardUnknown() {
	xxx_messageInfo_ProposalData.DiscardUnknown(m)
}

var xxx_messageInfo_ProposalData proto.InternalMessageInfo

func (m *ProposalData) GetBlock() *common.Block {
	if m != nil {
		return m.Block
	}
	return nil
}

func (m *ProposalData) GetView() uint64 {
	if m != nil {
		return m.View
	}
	return 0
}

func (m *ProposalData) GetProposer() string {
	if m != nil {
		return m.Proposer
	}
	return ""
}

func (m *ProposalData) GetJustifyQc() *QuorumCert {
	if m != nil {
		return m.JustifyQc
	}
	return nil
}

func (m *ProposalData) GetEpochId() uint64 {
	if m != nil {
		return m.EpochId
	}
	return 0
}

func (m *ProposalData) GetTxRwSet() []*common.TxRWSet {
	if m != nil {
		return m.TxRwSet
	}
	return nil
}

type QuorumCert struct {
	// votes in qc
	Votes []*VoteData `protobuf:"bytes,1,rep,name=votes,proto3" json:"votes,omitempty"`
}

func (m *QuorumCert) Reset()         { *m = QuorumCert{} }
func (m *QuorumCert) String() string { return proto.CompactTextString(m) }
func (*QuorumCert) ProtoMessage()    {}
func (*QuorumCert) Descriptor() ([]byte, []int) {
	return fileDescriptor_a50258efc9e4164a, []int{2}
}
func (m *QuorumCert) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QuorumCert) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QuorumCert.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QuorumCert) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QuorumCert.Merge(m, src)
}
func (m *QuorumCert) XXX_Size() int {
	return m.Size()
}
func (m *QuorumCert) XXX_DiscardUnknown() {
	xxx_messageInfo_QuorumCert.DiscardUnknown(m)
}

var xxx_messageInfo_QuorumCert proto.InternalMessageInfo

func (m *QuorumCert) GetVotes() []*VoteData {
	if m != nil {
		return m.Votes
	}
	return nil
}

type VoteData struct {
	// block id of the vote block
	BlockId []byte `protobuf:"bytes,1,opt,name=block_id,json=blockId,proto3" json:"block_id,omitempty"`
	// block height of the vote block
	Height uint64 `protobuf:"varint,2,opt,name=height,proto3" json:"height,omitempty"`
	// consensus view of the vote block
	View uint64 `protobuf:"varint,3,opt,name=view,proto3" json:"view,omitempty"`
	// voter of the voteInfo
	Author []byte `protobuf:"bytes,4,opt,name=author,proto3" json:"author,omitempty"`
	// the id of the epoch
	EpochId uint64 `protobuf:"varint,5,opt,name=epoch_id,json=epochId,proto3" json:"epoch_id,omitempty"`
	// signature of the vote
	Signature *common.EndorsementEntry `protobuf:"bytes,6,opt,name=signature,proto3" json:"signature,omitempty"`
}

func (m *VoteData) Reset()         { *m = VoteData{} }
func (m *VoteData) String() string { return proto.CompactTextString(m) }
func (*VoteData) ProtoMessage()    {}
func (*VoteData) Descriptor() ([]byte, []int) {
	return fileDescriptor_a50258efc9e4164a, []int{3}
}
func (m *VoteData) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *VoteData) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_VoteData.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *VoteData) XXX_Merge(src proto.Message) {
	xxx_messageInfo_VoteData.Merge(m, src)
}
func (m *VoteData) XXX_Size() int {
	return m.Size()
}
func (m *VoteData) XXX_DiscardUnknown() {
	xxx_messageInfo_VoteData.DiscardUnknown(m)
}

var xxx_messageInfo_VoteData proto.InternalMessageInfo

func (m *VoteData) GetBlockId() []byte {
	if m != nil {
		return m.BlockId
	}
	return nil
}

func (m *VoteData) GetHeight() uint64 {
	if m != nil {
		return m.Height
	}
	return 0
}

func (m *VoteData) GetView() uint64 {
	if m != nil {
		return m.View
	}
	return 0
}

func (m *VoteData) GetAuthor() []byte {
	if m != nil {
		return m.Author
	}
	return nil
}

func (m *VoteData) GetEpochId() uint64 {
	if m != nil {
		return m.EpochId
	}
	return 0
}

func (m *VoteData) GetSignature() *common.EndorsementEntry {
	if m != nil {
		return m.Signature
	}
	return nil
}

type ViewData struct {
	View    uint64 `protobuf:"varint,1,opt,name=view,proto3" json:"view,omitempty"`
	EpochId uint64 `protobuf:"varint,2,opt,name=epoch_id,json=epochId,proto3" json:"epoch_id,omitempty"`
}

func (m *ViewData) Reset()         { *m = ViewData{} }
func (m *ViewData) String() string { return proto.CompactTextString(m) }
func (*ViewData) ProtoMessage()    {}
func (*ViewData) Descriptor() ([]byte, []int) {
	return fileDescriptor_a50258efc9e4164a, []int{4}
}
func (m *ViewData) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ViewData) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ViewData.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ViewData) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ViewData.Merge(m, src)
}
func (m *ViewData) XXX_Size() int {
	return m.Size()
}
func (m *ViewData) XXX_DiscardUnknown() {
	xxx_messageInfo_ViewData.DiscardUnknown(m)
}

var xxx_messageInfo_ViewData proto.InternalMessageInfo

func (m *ViewData) GetView() uint64 {
	if m != nil {
		return m.View
	}
	return 0
}

func (m *ViewData) GetEpochId() uint64 {
	if m != nil {
		return m.EpochId
	}
	return 0
}

type ProposalFetchMsg struct {
	// block id of the request proposal
	BlockId []byte `protobuf:"bytes,1,opt,name=block_id,json=blockId,proto3" json:"block_id,omitempty"`
	// block height of the request block
	Height uint64 `protobuf:"varint,2,opt,name=height,proto3" json:"height,omitempty"`
	// consensus view of the request block
	View uint64 `protobuf:"varint,3,opt,name=view,proto3" json:"view,omitempty"`
	// identify of the requester
	Requester []byte `protobuf:"bytes,4,opt,name=requester,proto3" json:"requester,omitempty"`
}

func (m *ProposalFetchMsg) Reset()         { *m = ProposalFetchMsg{} }
func (m *ProposalFetchMsg) String() string { return proto.CompactTextString(m) }
func (*ProposalFetchMsg) ProtoMessage()    {}
func (*ProposalFetchMsg) Descriptor() ([]byte, []int) {
	return fileDescriptor_a50258efc9e4164a, []int{5}
}
func (m *ProposalFetchMsg) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ProposalFetchMsg) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ProposalFetchMsg.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ProposalFetchMsg) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ProposalFetchMsg.Merge(m, src)
}
func (m *ProposalFetchMsg) XXX_Size() int {
	return m.Size()
}
func (m *ProposalFetchMsg) XXX_DiscardUnknown() {
	xxx_messageInfo_ProposalFetchMsg.DiscardUnknown(m)
}

var xxx_messageInfo_ProposalFetchMsg proto.InternalMessageInfo

func (m *ProposalFetchMsg) GetBlockId() []byte {
	if m != nil {
		return m.BlockId
	}
	return nil
}

func (m *ProposalFetchMsg) GetHeight() uint64 {
	if m != nil {
		return m.Height
	}
	return 0
}

func (m *ProposalFetchMsg) GetView() uint64 {
	if m != nil {
		return m.View
	}
	return 0
}

func (m *ProposalFetchMsg) GetRequester() []byte {
	if m != nil {
		return m.Requester
	}
	return nil
}

type ProposalRespMsg struct {
	// proposal in response
	Proposal *ProposalData `protobuf:"bytes,1,opt,name=proposal,proto3" json:"proposal,omitempty"`
	// identify of the responser
	Responser []byte `protobuf:"bytes,2,opt,name=responser,proto3" json:"responser,omitempty"`
	// qc of the proposal
	Qc *QuorumCert `protobuf:"bytes,3,opt,name=qc,proto3" json:"qc,omitempty"`
}

func (m *ProposalRespMsg) Reset()         { *m = ProposalRespMsg{} }
func (m *ProposalRespMsg) String() string { return proto.CompactTextString(m) }
func (*ProposalRespMsg) ProtoMessage()    {}
func (*ProposalRespMsg) Descriptor() ([]byte, []int) {
	return fileDescriptor_a50258efc9e4164a, []int{6}
}
func (m *ProposalRespMsg) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ProposalRespMsg) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ProposalRespMsg.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ProposalRespMsg) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ProposalRespMsg.Merge(m, src)
}
func (m *ProposalRespMsg) XXX_Size() int {
	return m.Size()
}
func (m *ProposalRespMsg) XXX_DiscardUnknown() {
	xxx_messageInfo_ProposalRespMsg.DiscardUnknown(m)
}

var xxx_messageInfo_ProposalRespMsg proto.InternalMessageInfo

func (m *ProposalRespMsg) GetProposal() *ProposalData {
	if m != nil {
		return m.Proposal
	}
	return nil
}

func (m *ProposalRespMsg) GetResponser() []byte {
	if m != nil {
		return m.Responser
	}
	return nil
}

func (m *ProposalRespMsg) GetQc() *QuorumCert {
	if m != nil {
		return m.Qc
	}
	return nil
}

type BuildProposal struct {
	Height  uint64 `protobuf:"varint,1,opt,name=height,proto3" json:"height,omitempty"`
	View    uint64 `protobuf:"varint,2,opt,name=view,proto3" json:"view,omitempty"`
	PreHash []byte `protobuf:"bytes,3,opt,name=pre_hash,json=preHash,proto3" json:"pre_hash,omitempty"`
}

func (m *BuildProposal) Reset()         { *m = BuildProposal{} }
func (m *BuildProposal) String() string { return proto.CompactTextString(m) }
func (*BuildProposal) ProtoMessage()    {}
func (*BuildProposal) Descriptor() ([]byte, []int) {
	return fileDescriptor_a50258efc9e4164a, []int{7}
}
func (m *BuildProposal) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *BuildProposal) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_BuildProposal.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *BuildProposal) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BuildProposal.Merge(m, src)
}
func (m *BuildProposal) XXX_Size() int {
	return m.Size()
}
func (m *BuildProposal) XXX_DiscardUnknown() {
	xxx_messageInfo_BuildProposal.DiscardUnknown(m)
}

var xxx_messageInfo_BuildProposal proto.InternalMessageInfo

func (m *BuildProposal) GetHeight() uint64 {
	if m != nil {
		return m.Height
	}
	return 0
}

func (m *BuildProposal) GetView() uint64 {
	if m != nil {
		return m.View
	}
	return 0
}

func (m *BuildProposal) GetPreHash() []byte {
	if m != nil {
		return m.PreHash
	}
	return nil
}

type WalEntry struct {
	Msg               []byte      `protobuf:"bytes,1,opt,name=msg,proto3" json:"msg,omitempty"`
	MsgType           MessageType `protobuf:"varint,2,opt,name=msg_type,json=msgType,proto3,enum=maxbft.MessageType" json:"msg_type,omitempty"`
	LastSnapshotIndex uint64      `protobuf:"varint,3,opt,name=last_snapshot_index,json=lastSnapshotIndex,proto3" json:"last_snapshot_index,omitempty"`
}

func (m *WalEntry) Reset()         { *m = WalEntry{} }
func (m *WalEntry) String() string { return proto.CompactTextString(m) }
func (*WalEntry) ProtoMessage()    {}
func (*WalEntry) Descriptor() ([]byte, []int) {
	return fileDescriptor_a50258efc9e4164a, []int{8}
}
func (m *WalEntry) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *WalEntry) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_WalEntry.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *WalEntry) XXX_Merge(src proto.Message) {
	xxx_messageInfo_WalEntry.Merge(m, src)
}
func (m *WalEntry) XXX_Size() int {
	return m.Size()
}
func (m *WalEntry) XXX_DiscardUnknown() {
	xxx_messageInfo_WalEntry.DiscardUnknown(m)
}

var xxx_messageInfo_WalEntry proto.InternalMessageInfo

func (m *WalEntry) GetMsg() []byte {
	if m != nil {
		return m.Msg
	}
	return nil
}

func (m *WalEntry) GetMsgType() MessageType {
	if m != nil {
		return m.MsgType
	}
	return MessageType_PROPOSAL_MESSAGE
}

func (m *WalEntry) GetLastSnapshotIndex() uint64 {
	if m != nil {
		return m.LastSnapshotIndex
	}
	return 0
}

type GovernanceContract struct {
	// current epoch id
	EpochId uint64 `protobuf:"varint,1,opt,name=epoch_id,json=epochId,proto3" json:"epoch_id,omitempty"`
	// the last view or block height in the epoch
	EndView uint64 `protobuf:"varint,2,opt,name=end_view,json=endView,proto3" json:"end_view,omitempty"`
	// list of consensus nodeIds
	Validators []string `protobuf:"bytes,3,rep,name=validators,proto3" json:"validators,omitempty"`
	// chain config version witch the epoch was based on
	ConfigSequence uint64 `protobuf:"varint,4,opt,name=config_sequence,json=configSequence,proto3" json:"config_sequence,omitempty"`
	// chain config
	ChainConfig *config.ChainConfig `protobuf:"bytes,5,opt,name=chain_config,json=chainConfig,proto3" json:"chain_config,omitempty"`
	// cert frozen list
	CertFrozenList []byte `protobuf:"bytes,6,opt,name=cert_frozen_list,json=certFrozenList,proto3" json:"cert_frozen_list,omitempty"`
	// CRL
	CRL []byte `protobuf:"bytes,7,opt,name=CRL,proto3" json:"CRL,omitempty"`
}

func (m *GovernanceContract) Reset()         { *m = GovernanceContract{} }
func (m *GovernanceContract) String() string { return proto.CompactTextString(m) }
func (*GovernanceContract) ProtoMessage()    {}
func (*GovernanceContract) Descriptor() ([]byte, []int) {
	return fileDescriptor_a50258efc9e4164a, []int{9}
}
func (m *GovernanceContract) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GovernanceContract) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GovernanceContract.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GovernanceContract) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GovernanceContract.Merge(m, src)
}
func (m *GovernanceContract) XXX_Size() int {
	return m.Size()
}
func (m *GovernanceContract) XXX_DiscardUnknown() {
	xxx_messageInfo_GovernanceContract.DiscardUnknown(m)
}

var xxx_messageInfo_GovernanceContract proto.InternalMessageInfo

func (m *GovernanceContract) GetEpochId() uint64 {
	if m != nil {
		return m.EpochId
	}
	return 0
}

func (m *GovernanceContract) GetEndView() uint64 {
	if m != nil {
		return m.EndView
	}
	return 0
}

func (m *GovernanceContract) GetValidators() []string {
	if m != nil {
		return m.Validators
	}
	return nil
}

func (m *GovernanceContract) GetConfigSequence() uint64 {
	if m != nil {
		return m.ConfigSequence
	}
	return 0
}

func (m *GovernanceContract) GetChainConfig() *config.ChainConfig {
	if m != nil {
		return m.ChainConfig
	}
	return nil
}

func (m *GovernanceContract) GetCertFrozenList() []byte {
	if m != nil {
		return m.CertFrozenList
	}
	return nil
}

func (m *GovernanceContract) GetCRL() []byte {
	if m != nil {
		return m.CRL
	}
	return nil
}

type NodeStatus struct {
	Height uint64 `protobuf:"varint,1,opt,name=height,proto3" json:"height,omitempty"`
	View   uint64 `protobuf:"varint,2,opt,name=view,proto3" json:"view,omitempty"`
	Epoch  uint64 `protobuf:"varint,3,opt,name=epoch,proto3" json:"epoch,omitempty"`
	NodeId string `protobuf:"bytes,4,opt,name=node_id,json=nodeId,proto3" json:"node_id,omitempty"`
}

func (m *NodeStatus) Reset()         { *m = NodeStatus{} }
func (m *NodeStatus) String() string { return proto.CompactTextString(m) }
func (*NodeStatus) ProtoMessage()    {}
func (*NodeStatus) Descriptor() ([]byte, []int) {
	return fileDescriptor_a50258efc9e4164a, []int{10}
}
func (m *NodeStatus) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *NodeStatus) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_NodeStatus.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *NodeStatus) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NodeStatus.Merge(m, src)
}
func (m *NodeStatus) XXX_Size() int {
	return m.Size()
}
func (m *NodeStatus) XXX_DiscardUnknown() {
	xxx_messageInfo_NodeStatus.DiscardUnknown(m)
}

var xxx_messageInfo_NodeStatus proto.InternalMessageInfo

func (m *NodeStatus) GetHeight() uint64 {
	if m != nil {
		return m.Height
	}
	return 0
}

func (m *NodeStatus) GetView() uint64 {
	if m != nil {
		return m.View
	}
	return 0
}

func (m *NodeStatus) GetEpoch() uint64 {
	if m != nil {
		return m.Epoch
	}
	return 0
}

func (m *NodeStatus) GetNodeId() string {
	if m != nil {
		return m.NodeId
	}
	return ""
}

type ProposeBlock struct {
	IsPropose bool `protobuf:"varint,1,opt,name=is_propose,json=isPropose,proto3" json:"is_propose,omitempty"`
}

func (m *ProposeBlock) Reset()         { *m = ProposeBlock{} }
func (m *ProposeBlock) String() string { return proto.CompactTextString(m) }
func (*ProposeBlock) ProtoMessage()    {}
func (*ProposeBlock) Descriptor() ([]byte, []int) {
	return fileDescriptor_a50258efc9e4164a, []int{11}
}
func (m *ProposeBlock) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ProposeBlock) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ProposeBlock.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ProposeBlock) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ProposeBlock.Merge(m, src)
}
func (m *ProposeBlock) XXX_Size() int {
	return m.Size()
}
func (m *ProposeBlock) XXX_DiscardUnknown() {
	xxx_messageInfo_ProposeBlock.DiscardUnknown(m)
}

var xxx_messageInfo_ProposeBlock proto.InternalMessageInfo

func (m *ProposeBlock) GetIsPropose() bool {
	if m != nil {
		return m.IsPropose
	}
	return false
}

func init() {
	proto.RegisterEnum("maxbft.MessageType", MessageType_name, MessageType_value)
	proto.RegisterEnum("maxbft.ConsStateType", ConsStateType_name, ConsStateType_value)
	proto.RegisterType((*ConsensusMsg)(nil), "maxbft.ConsensusMsg")
	proto.RegisterType((*ProposalData)(nil), "maxbft.ProposalData")
	proto.RegisterType((*QuorumCert)(nil), "maxbft.QuorumCert")
	proto.RegisterType((*VoteData)(nil), "maxbft.VoteData")
	proto.RegisterType((*ViewData)(nil), "maxbft.ViewData")
	proto.RegisterType((*ProposalFetchMsg)(nil), "maxbft.ProposalFetchMsg")
	proto.RegisterType((*ProposalRespMsg)(nil), "maxbft.ProposalRespMsg")
	proto.RegisterType((*BuildProposal)(nil), "maxbft.BuildProposal")
	proto.RegisterType((*WalEntry)(nil), "maxbft.WalEntry")
	proto.RegisterType((*GovernanceContract)(nil), "maxbft.GovernanceContract")
	proto.RegisterType((*NodeStatus)(nil), "maxbft.NodeStatus")
	proto.RegisterType((*ProposeBlock)(nil), "maxbft.ProposeBlock")
}

func init() { proto.RegisterFile("consensus/maxbft/maxbft.proto", fileDescriptor_a50258efc9e4164a) }

var fileDescriptor_a50258efc9e4164a = []byte{
	// 1000 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0x55, 0x5d, 0x4f, 0xe3, 0x46,
	0x17, 0xc6, 0x49, 0xc8, 0xc7, 0x21, 0x40, 0xde, 0x81, 0x97, 0x1a, 0xd4, 0x8d, 0x90, 0x2b, 0x75,
	0xa3, 0xad, 0x36, 0xd9, 0xb2, 0xd5, 0x4a, 0xbd, 0x04, 0xd7, 0xec, 0xa2, 0x86, 0x05, 0x26, 0x08,
	0xa4, 0xde, 0x58, 0x83, 0x3d, 0x38, 0xee, 0x26, 0x1e, 0x33, 0x33, 0x21, 0x50, 0xf5, 0xaa, 0x52,
	0xd5, 0xdb, 0xfe, 0xa0, 0xfe, 0x80, 0x5e, 0xee, 0x65, 0xaf, 0xaa, 0x0a, 0xfe, 0x48, 0x35, 0xe3,
	0xb1, 0x31, 0xd5, 0xb6, 0x52, 0xa5, 0x5e, 0xc5, 0xe7, 0x23, 0x73, 0x9e, 0xf3, 0x9c, 0x67, 0xce,
	0xc0, 0x93, 0x80, 0x25, 0x82, 0x26, 0x62, 0x26, 0x06, 0x53, 0x72, 0x73, 0x71, 0x29, 0xcd, 0x4f,
	0x3f, 0xe5, 0x4c, 0x32, 0x54, 0xcf, 0xac, 0x2d, 0x14, 0xb0, 0xe9, 0x94, 0x25, 0x83, 0x8b, 0x09,
	0x0b, 0xde, 0x65, 0xb1, 0xad, 0x75, 0xe3, 0xe3, 0xf4, 0x6a, 0x46, 0x85, 0xf9, 0x47, 0x91, 0xc9,
	0xe7, 0x82, 0xe6, 0xbe, 0xcd, 0x80, 0x25, 0x97, 0x71, 0x34, 0x08, 0xc6, 0x24, 0x4e, 0xfc, 0xcc,
	0xc8, 0x42, 0xce, 0x09, 0xb4, 0xdd, 0x1c, 0xc1, 0xa1, 0x88, 0xd0, 0x53, 0xa8, 0xc9, 0xdb, 0x94,
	0xda, 0xd6, 0xb6, 0xd5, 0x5b, 0xd9, 0x59, 0xeb, 0x1b, 0x34, 0x87, 0x54, 0x08, 0x12, 0xd1, 0xd3,
	0xdb, 0x94, 0x62, 0x9d, 0x80, 0x6c, 0x68, 0xa4, 0xe4, 0x76, 0xc2, 0x48, 0x68, 0x57, 0xb6, 0xad,
	0x5e, 0x1b, 0xe7, 0xa6, 0xf3, 0xbb, 0x05, 0xed, 0x63, 0xce, 0x52, 0x26, 0xc8, 0xe4, 0x2b, 0x22,
	0x09, 0xfa, 0x04, 0x16, 0x35, 0x6e, 0x7d, 0xe8, 0xd2, 0xce, 0x72, 0x3f, 0x83, 0xd8, 0xdf, 0x53,
	0x4e, 0x9c, 0xc5, 0x10, 0x82, 0xda, 0x75, 0x4c, 0xe7, 0xfa, 0xb0, 0x1a, 0xd6, 0xdf, 0x68, 0x0b,
	0x9a, 0xa9, 0x3e, 0x88, 0x72, 0xbb, 0xba, 0x6d, 0xf5, 0x5a, 0xb8, 0xb0, 0xd1, 0xe7, 0x00, 0xdf,
	0xce, 0x84, 0x8c, 0x2f, 0x6f, 0xfd, 0xab, 0xc0, 0xae, 0xe9, 0x93, 0x51, 0x0e, 0xf7, 0x64, 0xc6,
	0xf8, 0x6c, 0xea, 0x52, 0x2e, 0x71, 0xcb, 0x64, 0x9d, 0x04, 0x68, 0x13, 0x9a, 0x34, 0x65, 0xc1,
	0xd8, 0x8f, 0x43, 0x7b, 0x51, 0x97, 0x69, 0x68, 0xfb, 0x20, 0x44, 0x9f, 0x41, 0x4b, 0xde, 0xf8,
	0x7c, 0xee, 0x0b, 0x2a, 0xed, 0xfa, 0x76, 0xb5, 0xb7, 0xb4, 0xb3, 0x9a, 0xc3, 0x3c, 0xbd, 0xc1,
	0xe7, 0x23, 0x2a, 0x71, 0x43, 0xde, 0xe0, 0xf9, 0x88, 0x4a, 0xe7, 0x0b, 0x80, 0x87, 0x02, 0xe8,
	0x53, 0x58, 0xbc, 0x66, 0x92, 0x0a, 0xdb, 0xd2, 0x7f, 0xeb, 0xe4, 0x18, 0xce, 0x98, 0xa4, 0xaa,
	0x7d, 0x9c, 0x85, 0x9d, 0x5f, 0x2c, 0x68, 0xe6, 0x3e, 0x05, 0x45, 0xb7, 0xad, 0xa0, 0x58, 0x19,
	0x7d, 0xda, 0x3e, 0x08, 0xd1, 0x06, 0xd4, 0xc7, 0x34, 0x8e, 0xc6, 0xd2, 0x50, 0x61, 0xac, 0x82,
	0xa0, 0x6a, 0x89, 0xa0, 0x0d, 0xa8, 0x93, 0x99, 0x1c, 0x33, 0xae, 0x09, 0x68, 0x63, 0x63, 0xfd,
	0x53, 0xa7, 0xaf, 0xa0, 0x25, 0xe2, 0x28, 0x21, 0x72, 0xc6, 0xa9, 0x5d, 0xd7, 0xb4, 0xd9, 0x79,
	0xa7, 0x5e, 0x12, 0x32, 0x2e, 0xe8, 0x94, 0x26, 0xd2, 0x4b, 0x24, 0xbf, 0xc5, 0x0f, 0xa9, 0xce,
	0x97, 0xd0, 0x3c, 0x8b, 0xe9, 0x5c, 0xa3, 0xcf, 0xa1, 0x58, 0x25, 0x28, 0xe5, 0x92, 0x95, 0x47,
	0x25, 0x9d, 0x39, 0x74, 0x72, 0x3d, 0xec, 0x53, 0x19, 0x8c, 0x95, 0xce, 0xfe, 0x23, 0x02, 0x3e,
	0x86, 0x96, 0x91, 0x3f, 0xcd, 0x39, 0x78, 0x70, 0x38, 0x3f, 0x5a, 0xb0, 0x9a, 0x57, 0xc6, 0x54,
	0xa4, 0xaa, 0xf0, 0x8b, 0x5c, 0x53, 0x64, 0x62, 0xf4, 0xb8, 0x9e, 0x4f, 0xac, 0x2c, 0x5a, 0x5c,
	0x64, 0x65, 0x35, 0x44, 0xaa, 0x6e, 0x09, 0x37, 0x5a, 0x7f, 0x70, 0x20, 0x07, 0x2a, 0x57, 0x81,
	0xc6, 0xf4, 0x61, 0xfd, 0x55, 0xae, 0x02, 0xe7, 0x0c, 0x96, 0xf7, 0x66, 0xf1, 0x24, 0xcc, 0x0b,
	0x94, 0x5a, 0xb4, 0x3e, 0xd8, 0x62, 0xe5, 0x31, 0xb1, 0x29, 0xa7, 0xfe, 0x98, 0x88, 0xb1, 0x2e,
	0xa3, 0x6e, 0x1a, 0xa7, 0x6f, 0x88, 0x18, 0x3b, 0xdf, 0x43, 0xf3, 0x9c, 0x4c, 0xf4, 0xa8, 0x50,
	0x07, 0xaa, 0x53, 0x11, 0x19, 0x2e, 0xd5, 0x27, 0xea, 0x43, 0x73, 0x2a, 0x22, 0x5f, 0x5f, 0xe7,
	0xca, 0xdf, 0x5f, 0xe7, 0xc6, 0x54, 0x44, 0xea, 0x03, 0xf5, 0x61, 0x6d, 0x42, 0x84, 0xf4, 0x45,
	0x42, 0x52, 0x31, 0x66, 0xd2, 0x8f, 0x93, 0x90, 0xde, 0x18, 0xba, 0xff, 0xa7, 0x42, 0x23, 0x13,
	0x39, 0x50, 0x01, 0xe7, 0xa7, 0x0a, 0xa0, 0xd7, 0xec, 0x9a, 0xf2, 0x84, 0x24, 0x01, 0x75, 0x59,
	0x22, 0x39, 0x09, 0xe4, 0x23, 0x21, 0x58, 0x8f, 0xb5, 0xa7, 0x42, 0x49, 0xe8, 0x97, 0x5a, 0x6c,
	0xd0, 0x24, 0x54, 0xb2, 0x42, 0x5d, 0x80, 0x6b, 0x32, 0x89, 0x43, 0x22, 0x19, 0x17, 0x76, 0x75,
	0xbb, 0xda, 0x6b, 0xe1, 0x92, 0x07, 0x3d, 0x85, 0xd5, 0x6c, 0x6f, 0xf9, 0x42, 0x8d, 0x37, 0x09,
	0xa8, 0x1e, 0x77, 0x0d, 0xaf, 0x64, 0xee, 0x91, 0xf1, 0xa2, 0x57, 0xd0, 0x2e, 0xaf, 0x39, 0x2d,
	0xff, 0xa5, 0x9d, 0xb5, 0xbe, 0xd9, 0x7a, 0xae, 0x8a, 0xb9, 0xfa, 0x1b, 0x2f, 0x05, 0x0f, 0x06,
	0xea, 0x41, 0x27, 0xa0, 0x5c, 0xfa, 0x97, 0x9c, 0x7d, 0x47, 0x13, 0x7f, 0x12, 0x0b, 0xa9, 0xaf,
	0x47, 0x1b, 0xaf, 0x28, 0xff, 0xbe, 0x76, 0x0f, 0x63, 0x21, 0x15, 0xd3, 0x2e, 0x1e, 0xda, 0x8d,
	0x8c, 0x69, 0x17, 0x0f, 0x9d, 0x08, 0xe0, 0x2d, 0x0b, 0xe9, 0x48, 0x12, 0x39, 0x13, 0xff, 0x6a,
	0xb8, 0xeb, 0xb0, 0xa8, 0xc9, 0x31, 0x2c, 0x67, 0x06, 0xfa, 0x08, 0x1a, 0x09, 0x0b, 0xa9, 0x62,
	0xb0, 0xa6, 0xd7, 0x5e, 0x5d, 0x99, 0x07, 0xa1, 0xf3, 0x3c, 0xdf, 0xac, 0x54, 0xef, 0x4e, 0xf4,
	0x04, 0x20, 0x16, 0xbe, 0xd9, 0x89, 0xba, 0x5c, 0x13, 0xb7, 0x62, 0x61, 0x72, 0x9e, 0xfd, 0x60,
	0xc1, 0x52, 0x69, 0xd4, 0x68, 0x1d, 0x3a, 0xc7, 0xf8, 0xe8, 0xf8, 0x68, 0xb4, 0x3b, 0xf4, 0x0f,
	0xbd, 0xd1, 0x68, 0xf7, 0xb5, 0xd7, 0x59, 0x40, 0x1d, 0x68, 0x9f, 0x1d, 0x9d, 0x7a, 0x85, 0xc7,
	0x42, 0x5b, 0xb0, 0x51, 0xe4, 0xed, 0x7b, 0xa7, 0xee, 0x9b, 0x22, 0x56, 0x41, 0x9b, 0xf0, 0xff,
	0x22, 0x86, 0xbd, 0xd1, 0x71, 0x11, 0xaa, 0xaa, 0xe3, 0xdf, 0x7a, 0xe7, 0xfe, 0xd9, 0x81, 0x77,
	0x5e, 0x78, 0x6b, 0xcf, 0x5e, 0xc0, 0xb2, 0x7a, 0x61, 0x14, 0x39, 0x19, 0x8a, 0xbc, 0x9e, 0x7b,
	0x34, 0x1c, 0x7a, 0xee, 0x69, 0x67, 0x01, 0x2d, 0x43, 0xeb, 0x78, 0xd7, 0xf5, 0x0e, 0x77, 0xbf,
	0xf6, 0x70, 0xc7, 0xda, 0xbb, 0xfa, 0xf5, 0xae, 0x6b, 0xbd, 0xbf, 0xeb, 0x5a, 0x7f, 0xdc, 0x75,
	0xad, 0x9f, 0xef, 0xbb, 0x0b, 0xef, 0xef, 0xbb, 0x0b, 0xbf, 0xdd, 0x77, 0x17, 0xc0, 0x61, 0x3c,
	0xea, 0xeb, 0xa9, 0x4d, 0xc9, 0x3b, 0xca, 0xfb, 0xe9, 0x45, 0xbf, 0x78, 0x3f, 0x8d, 0xb6, 0xbf,
	0x79, 0x59, 0x8a, 0x33, 0x6e, 0x1e, 0x3d, 0x6d, 0x0e, 0xd2, 0x8b, 0xe7, 0x11, 0x1b, 0x5c, 0xef,
	0x0c, 0xfe, 0xfa, 0xe8, 0x5e, 0xd4, 0xf5, 0x6b, 0xf8, 0xf2, 0xcf, 0x00, 0x00, 0x00, 0xff, 0xff,
	0xfb, 0x95, 0x31, 0x03, 0x8f, 0x07, 0x00, 0x00,
}

func (m *ConsensusMsg) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ConsensusMsg) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ConsensusMsg) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Payload) > 0 {
		i -= len(m.Payload)
		copy(dAtA[i:], m.Payload)
		i = encodeVarintMaxbft(dAtA, i, uint64(len(m.Payload)))
		i--
		dAtA[i] = 0x12
	}
	if m.Type != 0 {
		i = encodeVarintMaxbft(dAtA, i, uint64(m.Type))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *ProposalData) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ProposalData) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ProposalData) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.TxRwSet) > 0 {
		for iNdEx := len(m.TxRwSet) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.TxRwSet[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintMaxbft(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x32
		}
	}
	if m.EpochId != 0 {
		i = encodeVarintMaxbft(dAtA, i, uint64(m.EpochId))
		i--
		dAtA[i] = 0x28
	}
	if m.JustifyQc != nil {
		{
			size, err := m.JustifyQc.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMaxbft(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	if len(m.Proposer) > 0 {
		i -= len(m.Proposer)
		copy(dAtA[i:], m.Proposer)
		i = encodeVarintMaxbft(dAtA, i, uint64(len(m.Proposer)))
		i--
		dAtA[i] = 0x1a
	}
	if m.View != 0 {
		i = encodeVarintMaxbft(dAtA, i, uint64(m.View))
		i--
		dAtA[i] = 0x10
	}
	if m.Block != nil {
		{
			size, err := m.Block.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMaxbft(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QuorumCert) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QuorumCert) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QuorumCert) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Votes) > 0 {
		for iNdEx := len(m.Votes) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Votes[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintMaxbft(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *VoteData) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *VoteData) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *VoteData) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Signature != nil {
		{
			size, err := m.Signature.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMaxbft(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x32
	}
	if m.EpochId != 0 {
		i = encodeVarintMaxbft(dAtA, i, uint64(m.EpochId))
		i--
		dAtA[i] = 0x28
	}
	if len(m.Author) > 0 {
		i -= len(m.Author)
		copy(dAtA[i:], m.Author)
		i = encodeVarintMaxbft(dAtA, i, uint64(len(m.Author)))
		i--
		dAtA[i] = 0x22
	}
	if m.View != 0 {
		i = encodeVarintMaxbft(dAtA, i, uint64(m.View))
		i--
		dAtA[i] = 0x18
	}
	if m.Height != 0 {
		i = encodeVarintMaxbft(dAtA, i, uint64(m.Height))
		i--
		dAtA[i] = 0x10
	}
	if len(m.BlockId) > 0 {
		i -= len(m.BlockId)
		copy(dAtA[i:], m.BlockId)
		i = encodeVarintMaxbft(dAtA, i, uint64(len(m.BlockId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ViewData) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ViewData) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ViewData) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.EpochId != 0 {
		i = encodeVarintMaxbft(dAtA, i, uint64(m.EpochId))
		i--
		dAtA[i] = 0x10
	}
	if m.View != 0 {
		i = encodeVarintMaxbft(dAtA, i, uint64(m.View))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *ProposalFetchMsg) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ProposalFetchMsg) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ProposalFetchMsg) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Requester) > 0 {
		i -= len(m.Requester)
		copy(dAtA[i:], m.Requester)
		i = encodeVarintMaxbft(dAtA, i, uint64(len(m.Requester)))
		i--
		dAtA[i] = 0x22
	}
	if m.View != 0 {
		i = encodeVarintMaxbft(dAtA, i, uint64(m.View))
		i--
		dAtA[i] = 0x18
	}
	if m.Height != 0 {
		i = encodeVarintMaxbft(dAtA, i, uint64(m.Height))
		i--
		dAtA[i] = 0x10
	}
	if len(m.BlockId) > 0 {
		i -= len(m.BlockId)
		copy(dAtA[i:], m.BlockId)
		i = encodeVarintMaxbft(dAtA, i, uint64(len(m.BlockId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ProposalRespMsg) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ProposalRespMsg) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ProposalRespMsg) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Qc != nil {
		{
			size, err := m.Qc.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMaxbft(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Responser) > 0 {
		i -= len(m.Responser)
		copy(dAtA[i:], m.Responser)
		i = encodeVarintMaxbft(dAtA, i, uint64(len(m.Responser)))
		i--
		dAtA[i] = 0x12
	}
	if m.Proposal != nil {
		{
			size, err := m.Proposal.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMaxbft(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *BuildProposal) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BuildProposal) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *BuildProposal) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.PreHash) > 0 {
		i -= len(m.PreHash)
		copy(dAtA[i:], m.PreHash)
		i = encodeVarintMaxbft(dAtA, i, uint64(len(m.PreHash)))
		i--
		dAtA[i] = 0x1a
	}
	if m.View != 0 {
		i = encodeVarintMaxbft(dAtA, i, uint64(m.View))
		i--
		dAtA[i] = 0x10
	}
	if m.Height != 0 {
		i = encodeVarintMaxbft(dAtA, i, uint64(m.Height))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *WalEntry) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *WalEntry) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *WalEntry) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.LastSnapshotIndex != 0 {
		i = encodeVarintMaxbft(dAtA, i, uint64(m.LastSnapshotIndex))
		i--
		dAtA[i] = 0x18
	}
	if m.MsgType != 0 {
		i = encodeVarintMaxbft(dAtA, i, uint64(m.MsgType))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Msg) > 0 {
		i -= len(m.Msg)
		copy(dAtA[i:], m.Msg)
		i = encodeVarintMaxbft(dAtA, i, uint64(len(m.Msg)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *GovernanceContract) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GovernanceContract) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GovernanceContract) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.CRL) > 0 {
		i -= len(m.CRL)
		copy(dAtA[i:], m.CRL)
		i = encodeVarintMaxbft(dAtA, i, uint64(len(m.CRL)))
		i--
		dAtA[i] = 0x3a
	}
	if len(m.CertFrozenList) > 0 {
		i -= len(m.CertFrozenList)
		copy(dAtA[i:], m.CertFrozenList)
		i = encodeVarintMaxbft(dAtA, i, uint64(len(m.CertFrozenList)))
		i--
		dAtA[i] = 0x32
	}
	if m.ChainConfig != nil {
		{
			size, err := m.ChainConfig.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMaxbft(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2a
	}
	if m.ConfigSequence != 0 {
		i = encodeVarintMaxbft(dAtA, i, uint64(m.ConfigSequence))
		i--
		dAtA[i] = 0x20
	}
	if len(m.Validators) > 0 {
		for iNdEx := len(m.Validators) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Validators[iNdEx])
			copy(dAtA[i:], m.Validators[iNdEx])
			i = encodeVarintMaxbft(dAtA, i, uint64(len(m.Validators[iNdEx])))
			i--
			dAtA[i] = 0x1a
		}
	}
	if m.EndView != 0 {
		i = encodeVarintMaxbft(dAtA, i, uint64(m.EndView))
		i--
		dAtA[i] = 0x10
	}
	if m.EpochId != 0 {
		i = encodeVarintMaxbft(dAtA, i, uint64(m.EpochId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *NodeStatus) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NodeStatus) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *NodeStatus) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.NodeId) > 0 {
		i -= len(m.NodeId)
		copy(dAtA[i:], m.NodeId)
		i = encodeVarintMaxbft(dAtA, i, uint64(len(m.NodeId)))
		i--
		dAtA[i] = 0x22
	}
	if m.Epoch != 0 {
		i = encodeVarintMaxbft(dAtA, i, uint64(m.Epoch))
		i--
		dAtA[i] = 0x18
	}
	if m.View != 0 {
		i = encodeVarintMaxbft(dAtA, i, uint64(m.View))
		i--
		dAtA[i] = 0x10
	}
	if m.Height != 0 {
		i = encodeVarintMaxbft(dAtA, i, uint64(m.Height))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *ProposeBlock) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ProposeBlock) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ProposeBlock) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.IsPropose {
		i--
		if m.IsPropose {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintMaxbft(dAtA []byte, offset int, v uint64) int {
	offset -= sovMaxbft(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *ConsensusMsg) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Type != 0 {
		n += 1 + sovMaxbft(uint64(m.Type))
	}
	l = len(m.Payload)
	if l > 0 {
		n += 1 + l + sovMaxbft(uint64(l))
	}
	return n
}

func (m *ProposalData) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Block != nil {
		l = m.Block.Size()
		n += 1 + l + sovMaxbft(uint64(l))
	}
	if m.View != 0 {
		n += 1 + sovMaxbft(uint64(m.View))
	}
	l = len(m.Proposer)
	if l > 0 {
		n += 1 + l + sovMaxbft(uint64(l))
	}
	if m.JustifyQc != nil {
		l = m.JustifyQc.Size()
		n += 1 + l + sovMaxbft(uint64(l))
	}
	if m.EpochId != 0 {
		n += 1 + sovMaxbft(uint64(m.EpochId))
	}
	if len(m.TxRwSet) > 0 {
		for _, e := range m.TxRwSet {
			l = e.Size()
			n += 1 + l + sovMaxbft(uint64(l))
		}
	}
	return n
}

func (m *QuorumCert) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Votes) > 0 {
		for _, e := range m.Votes {
			l = e.Size()
			n += 1 + l + sovMaxbft(uint64(l))
		}
	}
	return n
}

func (m *VoteData) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.BlockId)
	if l > 0 {
		n += 1 + l + sovMaxbft(uint64(l))
	}
	if m.Height != 0 {
		n += 1 + sovMaxbft(uint64(m.Height))
	}
	if m.View != 0 {
		n += 1 + sovMaxbft(uint64(m.View))
	}
	l = len(m.Author)
	if l > 0 {
		n += 1 + l + sovMaxbft(uint64(l))
	}
	if m.EpochId != 0 {
		n += 1 + sovMaxbft(uint64(m.EpochId))
	}
	if m.Signature != nil {
		l = m.Signature.Size()
		n += 1 + l + sovMaxbft(uint64(l))
	}
	return n
}

func (m *ViewData) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.View != 0 {
		n += 1 + sovMaxbft(uint64(m.View))
	}
	if m.EpochId != 0 {
		n += 1 + sovMaxbft(uint64(m.EpochId))
	}
	return n
}

func (m *ProposalFetchMsg) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.BlockId)
	if l > 0 {
		n += 1 + l + sovMaxbft(uint64(l))
	}
	if m.Height != 0 {
		n += 1 + sovMaxbft(uint64(m.Height))
	}
	if m.View != 0 {
		n += 1 + sovMaxbft(uint64(m.View))
	}
	l = len(m.Requester)
	if l > 0 {
		n += 1 + l + sovMaxbft(uint64(l))
	}
	return n
}

func (m *ProposalRespMsg) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Proposal != nil {
		l = m.Proposal.Size()
		n += 1 + l + sovMaxbft(uint64(l))
	}
	l = len(m.Responser)
	if l > 0 {
		n += 1 + l + sovMaxbft(uint64(l))
	}
	if m.Qc != nil {
		l = m.Qc.Size()
		n += 1 + l + sovMaxbft(uint64(l))
	}
	return n
}

func (m *BuildProposal) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Height != 0 {
		n += 1 + sovMaxbft(uint64(m.Height))
	}
	if m.View != 0 {
		n += 1 + sovMaxbft(uint64(m.View))
	}
	l = len(m.PreHash)
	if l > 0 {
		n += 1 + l + sovMaxbft(uint64(l))
	}
	return n
}

func (m *WalEntry) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Msg)
	if l > 0 {
		n += 1 + l + sovMaxbft(uint64(l))
	}
	if m.MsgType != 0 {
		n += 1 + sovMaxbft(uint64(m.MsgType))
	}
	if m.LastSnapshotIndex != 0 {
		n += 1 + sovMaxbft(uint64(m.LastSnapshotIndex))
	}
	return n
}

func (m *GovernanceContract) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.EpochId != 0 {
		n += 1 + sovMaxbft(uint64(m.EpochId))
	}
	if m.EndView != 0 {
		n += 1 + sovMaxbft(uint64(m.EndView))
	}
	if len(m.Validators) > 0 {
		for _, s := range m.Validators {
			l = len(s)
			n += 1 + l + sovMaxbft(uint64(l))
		}
	}
	if m.ConfigSequence != 0 {
		n += 1 + sovMaxbft(uint64(m.ConfigSequence))
	}
	if m.ChainConfig != nil {
		l = m.ChainConfig.Size()
		n += 1 + l + sovMaxbft(uint64(l))
	}
	l = len(m.CertFrozenList)
	if l > 0 {
		n += 1 + l + sovMaxbft(uint64(l))
	}
	l = len(m.CRL)
	if l > 0 {
		n += 1 + l + sovMaxbft(uint64(l))
	}
	return n
}

func (m *NodeStatus) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Height != 0 {
		n += 1 + sovMaxbft(uint64(m.Height))
	}
	if m.View != 0 {
		n += 1 + sovMaxbft(uint64(m.View))
	}
	if m.Epoch != 0 {
		n += 1 + sovMaxbft(uint64(m.Epoch))
	}
	l = len(m.NodeId)
	if l > 0 {
		n += 1 + l + sovMaxbft(uint64(l))
	}
	return n
}

func (m *ProposeBlock) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.IsPropose {
		n += 2
	}
	return n
}

func sovMaxbft(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozMaxbft(x uint64) (n int) {
	return sovMaxbft(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *ConsensusMsg) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMaxbft
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ConsensusMsg: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ConsensusMsg: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			m.Type = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMaxbft
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Type |= MessageType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Payload", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMaxbft
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthMaxbft
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthMaxbft
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Payload = append(m.Payload[:0], dAtA[iNdEx:postIndex]...)
			if m.Payload == nil {
				m.Payload = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMaxbft(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMaxbft
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ProposalData) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMaxbft
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ProposalData: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ProposalData: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Block", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMaxbft
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMaxbft
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMaxbft
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Block == nil {
				m.Block = &common.Block{}
			}
			if err := m.Block.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field View", wireType)
			}
			m.View = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMaxbft
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.View |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Proposer", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMaxbft
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMaxbft
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMaxbft
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Proposer = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field JustifyQc", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMaxbft
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMaxbft
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMaxbft
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.JustifyQc == nil {
				m.JustifyQc = &QuorumCert{}
			}
			if err := m.JustifyQc.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EpochId", wireType)
			}
			m.EpochId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMaxbft
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.EpochId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TxRwSet", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMaxbft
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMaxbft
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMaxbft
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TxRwSet = append(m.TxRwSet, &common.TxRWSet{})
			if err := m.TxRwSet[len(m.TxRwSet)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMaxbft(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMaxbft
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QuorumCert) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMaxbft
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QuorumCert: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QuorumCert: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Votes", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMaxbft
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMaxbft
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMaxbft
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Votes = append(m.Votes, &VoteData{})
			if err := m.Votes[len(m.Votes)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMaxbft(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMaxbft
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *VoteData) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMaxbft
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: VoteData: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: VoteData: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BlockId", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMaxbft
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthMaxbft
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthMaxbft
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BlockId = append(m.BlockId[:0], dAtA[iNdEx:postIndex]...)
			if m.BlockId == nil {
				m.BlockId = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Height", wireType)
			}
			m.Height = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMaxbft
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Height |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field View", wireType)
			}
			m.View = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMaxbft
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.View |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Author", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMaxbft
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthMaxbft
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthMaxbft
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Author = append(m.Author[:0], dAtA[iNdEx:postIndex]...)
			if m.Author == nil {
				m.Author = []byte{}
			}
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EpochId", wireType)
			}
			m.EpochId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMaxbft
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.EpochId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Signature", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMaxbft
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMaxbft
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMaxbft
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Signature == nil {
				m.Signature = &common.EndorsementEntry{}
			}
			if err := m.Signature.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMaxbft(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMaxbft
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ViewData) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMaxbft
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ViewData: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ViewData: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field View", wireType)
			}
			m.View = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMaxbft
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.View |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EpochId", wireType)
			}
			m.EpochId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMaxbft
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.EpochId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipMaxbft(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMaxbft
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ProposalFetchMsg) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMaxbft
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ProposalFetchMsg: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ProposalFetchMsg: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BlockId", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMaxbft
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthMaxbft
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthMaxbft
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BlockId = append(m.BlockId[:0], dAtA[iNdEx:postIndex]...)
			if m.BlockId == nil {
				m.BlockId = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Height", wireType)
			}
			m.Height = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMaxbft
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Height |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field View", wireType)
			}
			m.View = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMaxbft
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.View |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Requester", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMaxbft
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthMaxbft
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthMaxbft
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Requester = append(m.Requester[:0], dAtA[iNdEx:postIndex]...)
			if m.Requester == nil {
				m.Requester = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMaxbft(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMaxbft
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ProposalRespMsg) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMaxbft
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ProposalRespMsg: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ProposalRespMsg: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Proposal", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMaxbft
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMaxbft
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMaxbft
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Proposal == nil {
				m.Proposal = &ProposalData{}
			}
			if err := m.Proposal.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Responser", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMaxbft
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthMaxbft
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthMaxbft
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Responser = append(m.Responser[:0], dAtA[iNdEx:postIndex]...)
			if m.Responser == nil {
				m.Responser = []byte{}
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Qc", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMaxbft
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMaxbft
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMaxbft
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Qc == nil {
				m.Qc = &QuorumCert{}
			}
			if err := m.Qc.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMaxbft(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMaxbft
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BuildProposal) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMaxbft
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BuildProposal: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BuildProposal: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Height", wireType)
			}
			m.Height = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMaxbft
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Height |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field View", wireType)
			}
			m.View = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMaxbft
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.View |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PreHash", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMaxbft
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthMaxbft
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthMaxbft
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PreHash = append(m.PreHash[:0], dAtA[iNdEx:postIndex]...)
			if m.PreHash == nil {
				m.PreHash = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMaxbft(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMaxbft
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *WalEntry) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMaxbft
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: WalEntry: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: WalEntry: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Msg", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMaxbft
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthMaxbft
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthMaxbft
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Msg = append(m.Msg[:0], dAtA[iNdEx:postIndex]...)
			if m.Msg == nil {
				m.Msg = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MsgType", wireType)
			}
			m.MsgType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMaxbft
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MsgType |= MessageType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LastSnapshotIndex", wireType)
			}
			m.LastSnapshotIndex = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMaxbft
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LastSnapshotIndex |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipMaxbft(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMaxbft
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GovernanceContract) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMaxbft
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GovernanceContract: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GovernanceContract: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EpochId", wireType)
			}
			m.EpochId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMaxbft
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.EpochId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EndView", wireType)
			}
			m.EndView = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMaxbft
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.EndView |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Validators", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMaxbft
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMaxbft
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMaxbft
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Validators = append(m.Validators, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ConfigSequence", wireType)
			}
			m.ConfigSequence = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMaxbft
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ConfigSequence |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChainConfig", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMaxbft
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMaxbft
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMaxbft
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ChainConfig == nil {
				m.ChainConfig = &config.ChainConfig{}
			}
			if err := m.ChainConfig.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CertFrozenList", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMaxbft
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthMaxbft
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthMaxbft
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CertFrozenList = append(m.CertFrozenList[:0], dAtA[iNdEx:postIndex]...)
			if m.CertFrozenList == nil {
				m.CertFrozenList = []byte{}
			}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CRL", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMaxbft
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthMaxbft
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthMaxbft
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CRL = append(m.CRL[:0], dAtA[iNdEx:postIndex]...)
			if m.CRL == nil {
				m.CRL = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMaxbft(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMaxbft
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *NodeStatus) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMaxbft
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: NodeStatus: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: NodeStatus: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Height", wireType)
			}
			m.Height = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMaxbft
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Height |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field View", wireType)
			}
			m.View = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMaxbft
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.View |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Epoch", wireType)
			}
			m.Epoch = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMaxbft
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Epoch |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NodeId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMaxbft
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMaxbft
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMaxbft
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NodeId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMaxbft(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMaxbft
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ProposeBlock) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMaxbft
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ProposeBlock: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ProposeBlock: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsPropose", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMaxbft
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsPropose = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipMaxbft(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMaxbft
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipMaxbft(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowMaxbft
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowMaxbft
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowMaxbft
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthMaxbft
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupMaxbft
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthMaxbft
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthMaxbft        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowMaxbft          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupMaxbft = fmt.Errorf("proto: unexpected end of group")
)
