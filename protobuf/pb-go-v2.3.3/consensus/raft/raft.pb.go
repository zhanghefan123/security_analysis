// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: consensus/raft/raft.proto

package raft

import (
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type RAFRMsgType int32

const (
	RAFRMsgType_MSG_HEARTBEAT RAFRMsgType = 0
	RAFRMsgType_MSG_NODELINK  RAFRMsgType = 1
)

var RAFRMsgType_name = map[int32]string{
	0: "MSG_HEARTBEAT",
	1: "MSG_NODELINK",
}

var RAFRMsgType_value = map[string]int32{
	"MSG_HEARTBEAT": 0,
	"MSG_NODELINK":  1,
}

func (x RAFRMsgType) String() string {
	return proto.EnumName(RAFRMsgType_name, int32(x))
}

func (RAFRMsgType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_4f73c691904d2b70, []int{0}
}

type LinkNode_NodeState int32

const (
	LinkNode_UNKNOWN  LinkNode_NodeState = 0
	LinkNode_ACTIVE   LinkNode_NodeState = 1
	LinkNode_INACTIVE LinkNode_NodeState = 2
)

var LinkNode_NodeState_name = map[int32]string{
	0: "UNKNOWN",
	1: "ACTIVE",
	2: "INACTIVE",
}

var LinkNode_NodeState_value = map[string]int32{
	"UNKNOWN":  0,
	"ACTIVE":   1,
	"INACTIVE": 2,
}

func (x LinkNode_NodeState) String() string {
	return proto.EnumName(LinkNode_NodeState_name, int32(x))
}

func (LinkNode_NodeState) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_4f73c691904d2b70, []int{2, 0}
}

type RAFTMsg struct {
	Type RAFRMsgType `protobuf:"varint,1,opt,name=type,proto3,enum=raft.RAFRMsgType" json:"type,omitempty"`
	Msg  []byte      `protobuf:"bytes,2,opt,name=msg,proto3" json:"msg,omitempty"`
}

func (m *RAFTMsg) Reset()         { *m = RAFTMsg{} }
func (m *RAFTMsg) String() string { return proto.CompactTextString(m) }
func (*RAFTMsg) ProtoMessage()    {}
func (*RAFTMsg) Descriptor() ([]byte, []int) {
	return fileDescriptor_4f73c691904d2b70, []int{0}
}
func (m *RAFTMsg) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RAFTMsg) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RAFTMsg.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RAFTMsg) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RAFTMsg.Merge(m, src)
}
func (m *RAFTMsg) XXX_Size() int {
	return m.Size()
}
func (m *RAFTMsg) XXX_DiscardUnknown() {
	xxx_messageInfo_RAFTMsg.DiscardUnknown(m)
}

var xxx_messageInfo_RAFTMsg proto.InternalMessageInfo

func (m *RAFTMsg) GetType() RAFRMsgType {
	if m != nil {
		return m.Type
	}
	return RAFRMsgType_MSG_HEARTBEAT
}

func (m *RAFTMsg) GetMsg() []byte {
	if m != nil {
		return m.Msg
	}
	return nil
}

type HeartBeat struct {
	ID        string `protobuf:"bytes,1,opt,name=ID,proto3" json:"ID,omitempty"`
	Timestamp int64  `protobuf:"varint,2,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
}

func (m *HeartBeat) Reset()         { *m = HeartBeat{} }
func (m *HeartBeat) String() string { return proto.CompactTextString(m) }
func (*HeartBeat) ProtoMessage()    {}
func (*HeartBeat) Descriptor() ([]byte, []int) {
	return fileDescriptor_4f73c691904d2b70, []int{1}
}
func (m *HeartBeat) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *HeartBeat) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_HeartBeat.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *HeartBeat) XXX_Merge(src proto.Message) {
	xxx_messageInfo_HeartBeat.Merge(m, src)
}
func (m *HeartBeat) XXX_Size() int {
	return m.Size()
}
func (m *HeartBeat) XXX_DiscardUnknown() {
	xxx_messageInfo_HeartBeat.DiscardUnknown(m)
}

var xxx_messageInfo_HeartBeat proto.InternalMessageInfo

func (m *HeartBeat) GetID() string {
	if m != nil {
		return m.ID
	}
	return ""
}

func (m *HeartBeat) GetTimestamp() int64 {
	if m != nil {
		return m.Timestamp
	}
	return 0
}

type LinkNode struct {
	ID    string             `protobuf:"bytes,1,opt,name=ID,proto3" json:"ID,omitempty"`
	State LinkNode_NodeState `protobuf:"varint,2,opt,name=State,proto3,enum=raft.LinkNode_NodeState" json:"State,omitempty"`
}

func (m *LinkNode) Reset()         { *m = LinkNode{} }
func (m *LinkNode) String() string { return proto.CompactTextString(m) }
func (*LinkNode) ProtoMessage()    {}
func (*LinkNode) Descriptor() ([]byte, []int) {
	return fileDescriptor_4f73c691904d2b70, []int{2}
}
func (m *LinkNode) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *LinkNode) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_LinkNode.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *LinkNode) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LinkNode.Merge(m, src)
}
func (m *LinkNode) XXX_Size() int {
	return m.Size()
}
func (m *LinkNode) XXX_DiscardUnknown() {
	xxx_messageInfo_LinkNode.DiscardUnknown(m)
}

var xxx_messageInfo_LinkNode proto.InternalMessageInfo

func (m *LinkNode) GetID() string {
	if m != nil {
		return m.ID
	}
	return ""
}

func (m *LinkNode) GetState() LinkNode_NodeState {
	if m != nil {
		return m.State
	}
	return LinkNode_UNKNOWN
}

type LinkNodes struct {
	ID    string      `protobuf:"bytes,1,opt,name=ID,proto3" json:"ID,omitempty"`
	Nodes []*LinkNode `protobuf:"bytes,2,rep,name=nodes,proto3" json:"nodes,omitempty"`
}

func (m *LinkNodes) Reset()         { *m = LinkNodes{} }
func (m *LinkNodes) String() string { return proto.CompactTextString(m) }
func (*LinkNodes) ProtoMessage()    {}
func (*LinkNodes) Descriptor() ([]byte, []int) {
	return fileDescriptor_4f73c691904d2b70, []int{3}
}
func (m *LinkNodes) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *LinkNodes) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_LinkNodes.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *LinkNodes) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LinkNodes.Merge(m, src)
}
func (m *LinkNodes) XXX_Size() int {
	return m.Size()
}
func (m *LinkNodes) XXX_DiscardUnknown() {
	xxx_messageInfo_LinkNodes.DiscardUnknown(m)
}

var xxx_messageInfo_LinkNodes proto.InternalMessageInfo

func (m *LinkNodes) GetID() string {
	if m != nil {
		return m.ID
	}
	return ""
}

func (m *LinkNodes) GetNodes() []*LinkNode {
	if m != nil {
		return m.Nodes
	}
	return nil
}

func init() {
	proto.RegisterEnum("raft.RAFRMsgType", RAFRMsgType_name, RAFRMsgType_value)
	proto.RegisterEnum("raft.LinkNode_NodeState", LinkNode_NodeState_name, LinkNode_NodeState_value)
	proto.RegisterType((*RAFTMsg)(nil), "raft.RAFTMsg")
	proto.RegisterType((*HeartBeat)(nil), "raft.HeartBeat")
	proto.RegisterType((*LinkNode)(nil), "raft.LinkNode")
	proto.RegisterType((*LinkNodes)(nil), "raft.LinkNodes")
}

func init() { proto.RegisterFile("consensus/raft/raft.proto", fileDescriptor_4f73c691904d2b70) }

var fileDescriptor_4f73c691904d2b70 = []byte{
	// 374 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x64, 0x51, 0xcd, 0xca, 0xd3, 0x40,
	0x14, 0xcd, 0xa4, 0x5f, 0x7f, 0x72, 0x5b, 0x43, 0x3a, 0xab, 0x08, 0x12, 0x42, 0x50, 0x28, 0x82,
	0x09, 0xc6, 0x95, 0xcb, 0xc4, 0xa6, 0x36, 0xb4, 0x4d, 0x61, 0x1a, 0x15, 0xdc, 0x48, 0x5a, 0xc7,
	0x58, 0x4a, 0x7e, 0xc8, 0x8c, 0x42, 0x37, 0x3e, 0x83, 0x8f, 0xe5, 0xb2, 0x4b, 0x97, 0xd2, 0xbe,
	0x88, 0x64, 0xfa, 0xf5, 0x8f, 0x6e, 0x2e, 0xf7, 0xde, 0x73, 0xce, 0x9d, 0xc3, 0x1c, 0x78, 0xba,
	0x2a, 0x72, 0x46, 0x73, 0xf6, 0x83, 0x39, 0x55, 0xf2, 0x8d, 0x8b, 0x62, 0x97, 0x55, 0xc1, 0x0b,
	0xfc, 0x50, 0xf7, 0x96, 0x0f, 0x6d, 0xe2, 0x8d, 0xe2, 0x19, 0x4b, 0xf1, 0x0b, 0x78, 0xe0, 0xdb,
	0x92, 0xea, 0xc8, 0x44, 0x03, 0xd5, 0xed, 0xdb, 0x82, 0x4b, 0xbc, 0x11, 0x99, 0xb1, 0x34, 0xde,
	0x96, 0x94, 0x08, 0x18, 0x6b, 0xd0, 0xc8, 0x58, 0xaa, 0xcb, 0x26, 0x1a, 0xf4, 0x48, 0xdd, 0x5a,
	0x6f, 0x41, 0x19, 0xd3, 0xa4, 0xe2, 0x3e, 0x4d, 0x38, 0x56, 0x41, 0x0e, 0x87, 0xe2, 0x86, 0x42,
	0xe4, 0x70, 0x88, 0x9f, 0x81, 0xc2, 0xd7, 0x19, 0x65, 0x3c, 0xc9, 0x4a, 0x21, 0x6a, 0x90, 0xcb,
	0xc2, 0xfa, 0x05, 0x9d, 0xe9, 0x3a, 0xdf, 0x44, 0xc5, 0x57, 0x7a, 0xa7, 0xb4, 0xa1, 0xb9, 0xe0,
	0x09, 0xa7, 0x42, 0xa5, 0xba, 0xfa, 0xd1, 0xd0, 0x89, 0x6e, 0xd7, 0x45, 0xe0, 0xe4, 0x48, 0xb3,
	0x5c, 0x50, 0xce, 0x3b, 0xdc, 0x85, 0xf6, 0x87, 0x68, 0x12, 0xcd, 0x3f, 0x45, 0x9a, 0x84, 0x01,
	0x5a, 0xde, 0xbb, 0x38, 0xfc, 0x18, 0x68, 0x08, 0xf7, 0xa0, 0x13, 0x46, 0x8f, 0x93, 0x6c, 0x79,
	0xa0, 0x9c, 0x0e, 0xb2, 0x3b, 0x03, 0xcf, 0xa1, 0x99, 0xd7, 0x80, 0x2e, 0x9b, 0x8d, 0x41, 0xd7,
	0x55, 0x6f, 0x0d, 0x90, 0x23, 0xf8, 0xd2, 0x85, 0xee, 0xd5, 0x27, 0xe1, 0x3e, 0x3c, 0x99, 0x2d,
	0xde, 0x7f, 0x19, 0x07, 0x1e, 0x89, 0xfd, 0xc0, 0x8b, 0x35, 0x09, 0x6b, 0xd0, 0xab, 0x57, 0xd1,
	0x7c, 0x18, 0x4c, 0xc3, 0x68, 0xa2, 0x21, 0x3f, 0xfb, 0xb3, 0x37, 0xd0, 0x6e, 0x6f, 0xa0, 0x7f,
	0x7b, 0x03, 0xfd, 0x3e, 0x18, 0xd2, 0xee, 0x60, 0x48, 0x7f, 0x0f, 0x86, 0x04, 0x66, 0x51, 0xa5,
	0xf6, 0xea, 0x7b, 0xb2, 0xce, 0xb3, 0x64, 0x43, 0x2b, 0xbb, 0x5c, 0xda, 0xe7, 0x08, 0xc5, 0xfb,
	0x9f, 0x5f, 0x5f, 0xa1, 0x45, 0x95, 0x3a, 0x97, 0xd1, 0x29, 0x97, 0xaf, 0xd2, 0xc2, 0xf9, 0xe9,
	0x3a, 0xb7, 0xa9, 0x2f, 0x5b, 0x22, 0xf1, 0x37, 0xff, 0x03, 0x00, 0x00, 0xff, 0xff, 0xfd, 0x4b,
	0x56, 0x3f, 0x0e, 0x02, 0x00, 0x00,
}

func (m *RAFTMsg) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RAFTMsg) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RAFTMsg) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Msg) > 0 {
		i -= len(m.Msg)
		copy(dAtA[i:], m.Msg)
		i = encodeVarintRaft(dAtA, i, uint64(len(m.Msg)))
		i--
		dAtA[i] = 0x12
	}
	if m.Type != 0 {
		i = encodeVarintRaft(dAtA, i, uint64(m.Type))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *HeartBeat) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *HeartBeat) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *HeartBeat) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Timestamp != 0 {
		i = encodeVarintRaft(dAtA, i, uint64(m.Timestamp))
		i--
		dAtA[i] = 0x10
	}
	if len(m.ID) > 0 {
		i -= len(m.ID)
		copy(dAtA[i:], m.ID)
		i = encodeVarintRaft(dAtA, i, uint64(len(m.ID)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *LinkNode) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *LinkNode) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *LinkNode) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.State != 0 {
		i = encodeVarintRaft(dAtA, i, uint64(m.State))
		i--
		dAtA[i] = 0x10
	}
	if len(m.ID) > 0 {
		i -= len(m.ID)
		copy(dAtA[i:], m.ID)
		i = encodeVarintRaft(dAtA, i, uint64(len(m.ID)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *LinkNodes) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *LinkNodes) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *LinkNodes) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Nodes) > 0 {
		for iNdEx := len(m.Nodes) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Nodes[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintRaft(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.ID) > 0 {
		i -= len(m.ID)
		copy(dAtA[i:], m.ID)
		i = encodeVarintRaft(dAtA, i, uint64(len(m.ID)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintRaft(dAtA []byte, offset int, v uint64) int {
	offset -= sovRaft(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *RAFTMsg) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Type != 0 {
		n += 1 + sovRaft(uint64(m.Type))
	}
	l = len(m.Msg)
	if l > 0 {
		n += 1 + l + sovRaft(uint64(l))
	}
	return n
}

func (m *HeartBeat) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ID)
	if l > 0 {
		n += 1 + l + sovRaft(uint64(l))
	}
	if m.Timestamp != 0 {
		n += 1 + sovRaft(uint64(m.Timestamp))
	}
	return n
}

func (m *LinkNode) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ID)
	if l > 0 {
		n += 1 + l + sovRaft(uint64(l))
	}
	if m.State != 0 {
		n += 1 + sovRaft(uint64(m.State))
	}
	return n
}

func (m *LinkNodes) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ID)
	if l > 0 {
		n += 1 + l + sovRaft(uint64(l))
	}
	if len(m.Nodes) > 0 {
		for _, e := range m.Nodes {
			l = e.Size()
			n += 1 + l + sovRaft(uint64(l))
		}
	}
	return n
}

func sovRaft(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozRaft(x uint64) (n int) {
	return sovRaft(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *RAFTMsg) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRaft
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RAFTMsg: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RAFTMsg: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			m.Type = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRaft
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Type |= RAFRMsgType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Msg", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRaft
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthRaft
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthRaft
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Msg = append(m.Msg[:0], dAtA[iNdEx:postIndex]...)
			if m.Msg == nil {
				m.Msg = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRaft(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthRaft
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *HeartBeat) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRaft
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: HeartBeat: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: HeartBeat: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRaft
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRaft
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRaft
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Timestamp", wireType)
			}
			m.Timestamp = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRaft
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Timestamp |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipRaft(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthRaft
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *LinkNode) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRaft
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: LinkNode: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: LinkNode: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRaft
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRaft
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRaft
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field State", wireType)
			}
			m.State = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRaft
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.State |= LinkNode_NodeState(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipRaft(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthRaft
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *LinkNodes) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRaft
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: LinkNodes: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: LinkNodes: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRaft
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRaft
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRaft
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Nodes", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRaft
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRaft
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRaft
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Nodes = append(m.Nodes, &LinkNode{})
			if err := m.Nodes[len(m.Nodes)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRaft(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthRaft
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipRaft(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowRaft
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowRaft
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowRaft
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthRaft
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupRaft
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthRaft
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthRaft        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowRaft          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupRaft = fmt.Errorf("proto: unexpected end of group")
)
