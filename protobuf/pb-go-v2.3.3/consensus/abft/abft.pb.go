// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: consensus/abft/abft.proto

package abft

import (
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type ErrorCode int32

const (
	ErrorCode_Success              ErrorCode = 0
	ErrorCode_FailOfOutdatedHeight ErrorCode = 1
	ErrorCode_FailOfUnkown         ErrorCode = 2
)

var ErrorCode_name = map[int32]string{
	0: "Success",
	1: "FailOfOutdatedHeight",
	2: "FailOfUnkown",
}

var ErrorCode_value = map[string]int32{
	"Success":              0,
	"FailOfOutdatedHeight": 1,
	"FailOfUnkown":         2,
}

func (x ErrorCode) String() string {
	return proto.EnumName(ErrorCode_name, int32(x))
}

func (ErrorCode) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_793b6c4434949f22, []int{0}
}

type PackagedSignal struct {
	BlockHeight uint64 `protobuf:"varint,1,opt,name=block_height,json=blockHeight,proto3" json:"block_height,omitempty"`
}

func (m *PackagedSignal) Reset()         { *m = PackagedSignal{} }
func (m *PackagedSignal) String() string { return proto.CompactTextString(m) }
func (*PackagedSignal) ProtoMessage()    {}
func (*PackagedSignal) Descriptor() ([]byte, []int) {
	return fileDescriptor_793b6c4434949f22, []int{0}
}
func (m *PackagedSignal) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PackagedSignal) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PackagedSignal.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PackagedSignal) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PackagedSignal.Merge(m, src)
}
func (m *PackagedSignal) XXX_Size() int {
	return m.Size()
}
func (m *PackagedSignal) XXX_DiscardUnknown() {
	xxx_messageInfo_PackagedSignal.DiscardUnknown(m)
}

var xxx_messageInfo_PackagedSignal proto.InternalMessageInfo

func (m *PackagedSignal) GetBlockHeight() uint64 {
	if m != nil {
		return m.BlockHeight
	}
	return 0
}

type TxBatchAfterABA struct {
	BlockHeight uint64   `protobuf:"varint,1,opt,name=block_height,json=blockHeight,proto3" json:"block_height,omitempty"`
	TxBatchHash [][]byte `protobuf:"bytes,2,rep,name=tx_batch_hash,json=txBatchHash,proto3" json:"tx_batch_hash,omitempty"`
}

func (m *TxBatchAfterABA) Reset()         { *m = TxBatchAfterABA{} }
func (m *TxBatchAfterABA) String() string { return proto.CompactTextString(m) }
func (*TxBatchAfterABA) ProtoMessage()    {}
func (*TxBatchAfterABA) Descriptor() ([]byte, []int) {
	return fileDescriptor_793b6c4434949f22, []int{1}
}
func (m *TxBatchAfterABA) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TxBatchAfterABA) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TxBatchAfterABA.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TxBatchAfterABA) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TxBatchAfterABA.Merge(m, src)
}
func (m *TxBatchAfterABA) XXX_Size() int {
	return m.Size()
}
func (m *TxBatchAfterABA) XXX_DiscardUnknown() {
	xxx_messageInfo_TxBatchAfterABA.DiscardUnknown(m)
}

var xxx_messageInfo_TxBatchAfterABA proto.InternalMessageInfo

func (m *TxBatchAfterABA) GetBlockHeight() uint64 {
	if m != nil {
		return m.BlockHeight
	}
	return 0
}

func (m *TxBatchAfterABA) GetTxBatchHash() [][]byte {
	if m != nil {
		return m.TxBatchHash
	}
	return nil
}

type ABFTMessage struct {
	// Types that are valid to be assigned to Message:
	//	*ABFTMessage_Req
	//	*ABFTMessage_Rsp
	Message isABFTMessage_Message `protobuf_oneof:"message"`
}

func (m *ABFTMessage) Reset()         { *m = ABFTMessage{} }
func (m *ABFTMessage) String() string { return proto.CompactTextString(m) }
func (*ABFTMessage) ProtoMessage()    {}
func (*ABFTMessage) Descriptor() ([]byte, []int) {
	return fileDescriptor_793b6c4434949f22, []int{2}
}
func (m *ABFTMessage) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ABFTMessage) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ABFTMessage.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ABFTMessage) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ABFTMessage.Merge(m, src)
}
func (m *ABFTMessage) XXX_Size() int {
	return m.Size()
}
func (m *ABFTMessage) XXX_DiscardUnknown() {
	xxx_messageInfo_ABFTMessage.DiscardUnknown(m)
}

var xxx_messageInfo_ABFTMessage proto.InternalMessageInfo

type isABFTMessage_Message interface {
	isABFTMessage_Message()
	MarshalTo([]byte) (int, error)
	Size() int
}

type ABFTMessage_Req struct {
	Req *ABFTMessageReq `protobuf:"bytes,1,opt,name=req,proto3,oneof" json:"req,omitempty"`
}
type ABFTMessage_Rsp struct {
	Rsp *ABFTMessageRsp `protobuf:"bytes,2,opt,name=rsp,proto3,oneof" json:"rsp,omitempty"`
}

func (*ABFTMessage_Req) isABFTMessage_Message() {}
func (*ABFTMessage_Rsp) isABFTMessage_Message() {}

func (m *ABFTMessage) GetMessage() isABFTMessage_Message {
	if m != nil {
		return m.Message
	}
	return nil
}

func (m *ABFTMessage) GetReq() *ABFTMessageReq {
	if x, ok := m.GetMessage().(*ABFTMessage_Req); ok {
		return x.Req
	}
	return nil
}

func (m *ABFTMessage) GetRsp() *ABFTMessageRsp {
	if x, ok := m.GetMessage().(*ABFTMessage_Rsp); ok {
		return x.Rsp
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*ABFTMessage) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*ABFTMessage_Req)(nil),
		(*ABFTMessage_Rsp)(nil),
	}
}

type ABFTMessageReq struct {
	Seq    uint64      `protobuf:"varint,1,opt,name=seq,proto3" json:"seq,omitempty"`
	Height uint64      `protobuf:"varint,2,opt,name=height,proto3" json:"height,omitempty"`
	From   string      `protobuf:"bytes,3,opt,name=from,proto3" json:"from,omitempty"`
	To     string      `protobuf:"bytes,4,opt,name=to,proto3" json:"to,omitempty"`
	Id     string      `protobuf:"bytes,5,opt,name=id,proto3" json:"id,omitempty"`
	Acs    *ACSMessage `protobuf:"bytes,6,opt,name=acs,proto3" json:"acs,omitempty"`
}

func (m *ABFTMessageReq) Reset()         { *m = ABFTMessageReq{} }
func (m *ABFTMessageReq) String() string { return proto.CompactTextString(m) }
func (*ABFTMessageReq) ProtoMessage()    {}
func (*ABFTMessageReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_793b6c4434949f22, []int{3}
}
func (m *ABFTMessageReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ABFTMessageReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ABFTMessageReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ABFTMessageReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ABFTMessageReq.Merge(m, src)
}
func (m *ABFTMessageReq) XXX_Size() int {
	return m.Size()
}
func (m *ABFTMessageReq) XXX_DiscardUnknown() {
	xxx_messageInfo_ABFTMessageReq.DiscardUnknown(m)
}

var xxx_messageInfo_ABFTMessageReq proto.InternalMessageInfo

func (m *ABFTMessageReq) GetSeq() uint64 {
	if m != nil {
		return m.Seq
	}
	return 0
}

func (m *ABFTMessageReq) GetHeight() uint64 {
	if m != nil {
		return m.Height
	}
	return 0
}

func (m *ABFTMessageReq) GetFrom() string {
	if m != nil {
		return m.From
	}
	return ""
}

func (m *ABFTMessageReq) GetTo() string {
	if m != nil {
		return m.To
	}
	return ""
}

func (m *ABFTMessageReq) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *ABFTMessageReq) GetAcs() *ACSMessage {
	if m != nil {
		return m.Acs
	}
	return nil
}

type ABFTMessageRsp struct {
	Seq    uint64    `protobuf:"varint,1,opt,name=seq,proto3" json:"seq,omitempty"`
	Height uint64    `protobuf:"varint,2,opt,name=height,proto3" json:"height,omitempty"`
	From   string    `protobuf:"bytes,3,opt,name=from,proto3" json:"from,omitempty"`
	To     string    `protobuf:"bytes,4,opt,name=to,proto3" json:"to,omitempty"`
	Id     string    `protobuf:"bytes,5,opt,name=id,proto3" json:"id,omitempty"`
	Code   ErrorCode `protobuf:"varint,6,opt,name=code,proto3,enum=abft.ErrorCode" json:"code,omitempty"`
}

func (m *ABFTMessageRsp) Reset()         { *m = ABFTMessageRsp{} }
func (m *ABFTMessageRsp) String() string { return proto.CompactTextString(m) }
func (*ABFTMessageRsp) ProtoMessage()    {}
func (*ABFTMessageRsp) Descriptor() ([]byte, []int) {
	return fileDescriptor_793b6c4434949f22, []int{4}
}
func (m *ABFTMessageRsp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ABFTMessageRsp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ABFTMessageRsp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ABFTMessageRsp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ABFTMessageRsp.Merge(m, src)
}
func (m *ABFTMessageRsp) XXX_Size() int {
	return m.Size()
}
func (m *ABFTMessageRsp) XXX_DiscardUnknown() {
	xxx_messageInfo_ABFTMessageRsp.DiscardUnknown(m)
}

var xxx_messageInfo_ABFTMessageRsp proto.InternalMessageInfo

func (m *ABFTMessageRsp) GetSeq() uint64 {
	if m != nil {
		return m.Seq
	}
	return 0
}

func (m *ABFTMessageRsp) GetHeight() uint64 {
	if m != nil {
		return m.Height
	}
	return 0
}

func (m *ABFTMessageRsp) GetFrom() string {
	if m != nil {
		return m.From
	}
	return ""
}

func (m *ABFTMessageRsp) GetTo() string {
	if m != nil {
		return m.To
	}
	return ""
}

func (m *ABFTMessageRsp) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *ABFTMessageRsp) GetCode() ErrorCode {
	if m != nil {
		return m.Code
	}
	return ErrorCode_Success
}

type ACSMessage struct {
	// Types that are valid to be assigned to Message:
	//	*ACSMessage_Rbc
	//	*ACSMessage_Bba
	Message isACSMessage_Message `protobuf_oneof:"message"`
}

func (m *ACSMessage) Reset()         { *m = ACSMessage{} }
func (m *ACSMessage) String() string { return proto.CompactTextString(m) }
func (*ACSMessage) ProtoMessage()    {}
func (*ACSMessage) Descriptor() ([]byte, []int) {
	return fileDescriptor_793b6c4434949f22, []int{5}
}
func (m *ACSMessage) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ACSMessage) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ACSMessage.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ACSMessage) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ACSMessage.Merge(m, src)
}
func (m *ACSMessage) XXX_Size() int {
	return m.Size()
}
func (m *ACSMessage) XXX_DiscardUnknown() {
	xxx_messageInfo_ACSMessage.DiscardUnknown(m)
}

var xxx_messageInfo_ACSMessage proto.InternalMessageInfo

type isACSMessage_Message interface {
	isACSMessage_Message()
	MarshalTo([]byte) (int, error)
	Size() int
}

type ACSMessage_Rbc struct {
	Rbc *RBCRequest `protobuf:"bytes,1,opt,name=rbc,proto3,oneof" json:"rbc,omitempty"`
}
type ACSMessage_Bba struct {
	Bba *BBARequest `protobuf:"bytes,2,opt,name=bba,proto3,oneof" json:"bba,omitempty"`
}

func (*ACSMessage_Rbc) isACSMessage_Message() {}
func (*ACSMessage_Bba) isACSMessage_Message() {}

func (m *ACSMessage) GetMessage() isACSMessage_Message {
	if m != nil {
		return m.Message
	}
	return nil
}

func (m *ACSMessage) GetRbc() *RBCRequest {
	if x, ok := m.GetMessage().(*ACSMessage_Rbc); ok {
		return x.Rbc
	}
	return nil
}

func (m *ACSMessage) GetBba() *BBARequest {
	if x, ok := m.GetMessage().(*ACSMessage_Bba); ok {
		return x.Bba
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*ACSMessage) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*ACSMessage_Rbc)(nil),
		(*ACSMessage_Bba)(nil),
	}
}

type RBCRequest struct {
	// Types that are valid to be assigned to Message:
	//	*RBCRequest_ProofRequest
	//	*RBCRequest_EchoRequest
	//	*RBCRequest_ReadyRequest
	Message isRBCRequest_Message `protobuf_oneof:"message"`
}

func (m *RBCRequest) Reset()         { *m = RBCRequest{} }
func (m *RBCRequest) String() string { return proto.CompactTextString(m) }
func (*RBCRequest) ProtoMessage()    {}
func (*RBCRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_793b6c4434949f22, []int{6}
}
func (m *RBCRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RBCRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RBCRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RBCRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RBCRequest.Merge(m, src)
}
func (m *RBCRequest) XXX_Size() int {
	return m.Size()
}
func (m *RBCRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_RBCRequest.DiscardUnknown(m)
}

var xxx_messageInfo_RBCRequest proto.InternalMessageInfo

type isRBCRequest_Message interface {
	isRBCRequest_Message()
	MarshalTo([]byte) (int, error)
	Size() int
}

type RBCRequest_ProofRequest struct {
	ProofRequest *ProofRequest `protobuf:"bytes,1,opt,name=proof_request,json=proofRequest,proto3,oneof" json:"proof_request,omitempty"`
}
type RBCRequest_EchoRequest struct {
	EchoRequest *EchoRequest `protobuf:"bytes,2,opt,name=echo_request,json=echoRequest,proto3,oneof" json:"echo_request,omitempty"`
}
type RBCRequest_ReadyRequest struct {
	ReadyRequest *ReadyRequest `protobuf:"bytes,3,opt,name=ready_request,json=readyRequest,proto3,oneof" json:"ready_request,omitempty"`
}

func (*RBCRequest_ProofRequest) isRBCRequest_Message() {}
func (*RBCRequest_EchoRequest) isRBCRequest_Message()  {}
func (*RBCRequest_ReadyRequest) isRBCRequest_Message() {}

func (m *RBCRequest) GetMessage() isRBCRequest_Message {
	if m != nil {
		return m.Message
	}
	return nil
}

func (m *RBCRequest) GetProofRequest() *ProofRequest {
	if x, ok := m.GetMessage().(*RBCRequest_ProofRequest); ok {
		return x.ProofRequest
	}
	return nil
}

func (m *RBCRequest) GetEchoRequest() *EchoRequest {
	if x, ok := m.GetMessage().(*RBCRequest_EchoRequest); ok {
		return x.EchoRequest
	}
	return nil
}

func (m *RBCRequest) GetReadyRequest() *ReadyRequest {
	if x, ok := m.GetMessage().(*RBCRequest_ReadyRequest); ok {
		return x.ReadyRequest
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*RBCRequest) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*RBCRequest_ProofRequest)(nil),
		(*RBCRequest_EchoRequest)(nil),
		(*RBCRequest_ReadyRequest)(nil),
	}
}

type ProofRequest struct {
	RootHash []byte   `protobuf:"bytes,1,opt,name=root_hash,json=rootHash,proto3" json:"root_hash,omitempty"`
	Proof    [][]byte `protobuf:"bytes,2,rep,name=proof,proto3" json:"proof,omitempty"`
	Index    uint64   `protobuf:"varint,3,opt,name=index,proto3" json:"index,omitempty"`
	Leaves   uint64   `protobuf:"varint,4,opt,name=leaves,proto3" json:"leaves,omitempty"`
	Length   int32    `protobuf:"varint,5,opt,name=length,proto3" json:"length,omitempty"`
}

func (m *ProofRequest) Reset()         { *m = ProofRequest{} }
func (m *ProofRequest) String() string { return proto.CompactTextString(m) }
func (*ProofRequest) ProtoMessage()    {}
func (*ProofRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_793b6c4434949f22, []int{7}
}
func (m *ProofRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ProofRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ProofRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ProofRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ProofRequest.Merge(m, src)
}
func (m *ProofRequest) XXX_Size() int {
	return m.Size()
}
func (m *ProofRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ProofRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ProofRequest proto.InternalMessageInfo

func (m *ProofRequest) GetRootHash() []byte {
	if m != nil {
		return m.RootHash
	}
	return nil
}

func (m *ProofRequest) GetProof() [][]byte {
	if m != nil {
		return m.Proof
	}
	return nil
}

func (m *ProofRequest) GetIndex() uint64 {
	if m != nil {
		return m.Index
	}
	return 0
}

func (m *ProofRequest) GetLeaves() uint64 {
	if m != nil {
		return m.Leaves
	}
	return 0
}

func (m *ProofRequest) GetLength() int32 {
	if m != nil {
		return m.Length
	}
	return 0
}

type EchoRequest struct {
	ProofRequest *ProofRequest `protobuf:"bytes,1,opt,name=proof_request,json=proofRequest,proto3" json:"proof_request,omitempty"`
}

func (m *EchoRequest) Reset()         { *m = EchoRequest{} }
func (m *EchoRequest) String() string { return proto.CompactTextString(m) }
func (*EchoRequest) ProtoMessage()    {}
func (*EchoRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_793b6c4434949f22, []int{8}
}
func (m *EchoRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EchoRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EchoRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EchoRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EchoRequest.Merge(m, src)
}
func (m *EchoRequest) XXX_Size() int {
	return m.Size()
}
func (m *EchoRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_EchoRequest.DiscardUnknown(m)
}

var xxx_messageInfo_EchoRequest proto.InternalMessageInfo

func (m *EchoRequest) GetProofRequest() *ProofRequest {
	if m != nil {
		return m.ProofRequest
	}
	return nil
}

type ReadyRequest struct {
	RootHash []byte `protobuf:"bytes,1,opt,name=root_hash,json=rootHash,proto3" json:"root_hash,omitempty"`
}

func (m *ReadyRequest) Reset()         { *m = ReadyRequest{} }
func (m *ReadyRequest) String() string { return proto.CompactTextString(m) }
func (*ReadyRequest) ProtoMessage()    {}
func (*ReadyRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_793b6c4434949f22, []int{9}
}
func (m *ReadyRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ReadyRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ReadyRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ReadyRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ReadyRequest.Merge(m, src)
}
func (m *ReadyRequest) XXX_Size() int {
	return m.Size()
}
func (m *ReadyRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ReadyRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ReadyRequest proto.InternalMessageInfo

func (m *ReadyRequest) GetRootHash() []byte {
	if m != nil {
		return m.RootHash
	}
	return nil
}

type BBARequest struct {
	// Types that are valid to be assigned to Message:
	//	*BBARequest_Bval
	//	*BBARequest_Aux
	Message isBBARequest_Message `protobuf_oneof:"message"`
}

func (m *BBARequest) Reset()         { *m = BBARequest{} }
func (m *BBARequest) String() string { return proto.CompactTextString(m) }
func (*BBARequest) ProtoMessage()    {}
func (*BBARequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_793b6c4434949f22, []int{10}
}
func (m *BBARequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *BBARequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_BBARequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *BBARequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BBARequest.Merge(m, src)
}
func (m *BBARequest) XXX_Size() int {
	return m.Size()
}
func (m *BBARequest) XXX_DiscardUnknown() {
	xxx_messageInfo_BBARequest.DiscardUnknown(m)
}

var xxx_messageInfo_BBARequest proto.InternalMessageInfo

type isBBARequest_Message interface {
	isBBARequest_Message()
	MarshalTo([]byte) (int, error)
	Size() int
}

type BBARequest_Bval struct {
	Bval *BValRequest `protobuf:"bytes,1,opt,name=bval,proto3,oneof" json:"bval,omitempty"`
}
type BBARequest_Aux struct {
	Aux *AuxRequest `protobuf:"bytes,2,opt,name=aux,proto3,oneof" json:"aux,omitempty"`
}

func (*BBARequest_Bval) isBBARequest_Message() {}
func (*BBARequest_Aux) isBBARequest_Message()  {}

func (m *BBARequest) GetMessage() isBBARequest_Message {
	if m != nil {
		return m.Message
	}
	return nil
}

func (m *BBARequest) GetBval() *BValRequest {
	if x, ok := m.GetMessage().(*BBARequest_Bval); ok {
		return x.Bval
	}
	return nil
}

func (m *BBARequest) GetAux() *AuxRequest {
	if x, ok := m.GetMessage().(*BBARequest_Aux); ok {
		return x.Aux
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*BBARequest) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*BBARequest_Bval)(nil),
		(*BBARequest_Aux)(nil),
	}
}

type BValRequest struct {
	Epoch uint32 `protobuf:"varint,1,opt,name=epoch,proto3" json:"epoch,omitempty"`
	Value bool   `protobuf:"varint,2,opt,name=value,proto3" json:"value,omitempty"`
}

func (m *BValRequest) Reset()         { *m = BValRequest{} }
func (m *BValRequest) String() string { return proto.CompactTextString(m) }
func (*BValRequest) ProtoMessage()    {}
func (*BValRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_793b6c4434949f22, []int{11}
}
func (m *BValRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *BValRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_BValRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *BValRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BValRequest.Merge(m, src)
}
func (m *BValRequest) XXX_Size() int {
	return m.Size()
}
func (m *BValRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_BValRequest.DiscardUnknown(m)
}

var xxx_messageInfo_BValRequest proto.InternalMessageInfo

func (m *BValRequest) GetEpoch() uint32 {
	if m != nil {
		return m.Epoch
	}
	return 0
}

func (m *BValRequest) GetValue() bool {
	if m != nil {
		return m.Value
	}
	return false
}

type AuxRequest struct {
	Epoch uint32 `protobuf:"varint,1,opt,name=epoch,proto3" json:"epoch,omitempty"`
	Value bool   `protobuf:"varint,2,opt,name=value,proto3" json:"value,omitempty"`
}

func (m *AuxRequest) Reset()         { *m = AuxRequest{} }
func (m *AuxRequest) String() string { return proto.CompactTextString(m) }
func (*AuxRequest) ProtoMessage()    {}
func (*AuxRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_793b6c4434949f22, []int{12}
}
func (m *AuxRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AuxRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AuxRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AuxRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AuxRequest.Merge(m, src)
}
func (m *AuxRequest) XXX_Size() int {
	return m.Size()
}
func (m *AuxRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_AuxRequest.DiscardUnknown(m)
}

var xxx_messageInfo_AuxRequest proto.InternalMessageInfo

func (m *AuxRequest) GetEpoch() uint32 {
	if m != nil {
		return m.Epoch
	}
	return 0
}

func (m *AuxRequest) GetValue() bool {
	if m != nil {
		return m.Value
	}
	return false
}

// WalEntry represents the log entry in Wal
type WalEntry struct {
	Height           uint64 `protobuf:"varint,1,opt,name=height,proto3" json:"height,omitempty"`
	HeightFirstIndex uint64 `protobuf:"varint,2,opt,name=heightFirstIndex,proto3" json:"heightFirstIndex,omitempty"`
	Topic            int32  `protobuf:"varint,3,opt,name=topic,proto3" json:"topic,omitempty"`
	Data             []byte `protobuf:"bytes,4,opt,name=data,proto3" json:"data,omitempty"`
}

func (m *WalEntry) Reset()         { *m = WalEntry{} }
func (m *WalEntry) String() string { return proto.CompactTextString(m) }
func (*WalEntry) ProtoMessage()    {}
func (*WalEntry) Descriptor() ([]byte, []int) {
	return fileDescriptor_793b6c4434949f22, []int{13}
}
func (m *WalEntry) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *WalEntry) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_WalEntry.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *WalEntry) XXX_Merge(src proto.Message) {
	xxx_messageInfo_WalEntry.Merge(m, src)
}
func (m *WalEntry) XXX_Size() int {
	return m.Size()
}
func (m *WalEntry) XXX_DiscardUnknown() {
	xxx_messageInfo_WalEntry.DiscardUnknown(m)
}

var xxx_messageInfo_WalEntry proto.InternalMessageInfo

func (m *WalEntry) GetHeight() uint64 {
	if m != nil {
		return m.Height
	}
	return 0
}

func (m *WalEntry) GetHeightFirstIndex() uint64 {
	if m != nil {
		return m.HeightFirstIndex
	}
	return 0
}

func (m *WalEntry) GetTopic() int32 {
	if m != nil {
		return m.Topic
	}
	return 0
}

func (m *WalEntry) GetData() []byte {
	if m != nil {
		return m.Data
	}
	return nil
}

func init() {
	proto.RegisterEnum("abft.ErrorCode", ErrorCode_name, ErrorCode_value)
	proto.RegisterType((*PackagedSignal)(nil), "abft.PackagedSignal")
	proto.RegisterType((*TxBatchAfterABA)(nil), "abft.TxBatchAfterABA")
	proto.RegisterType((*ABFTMessage)(nil), "abft.ABFTMessage")
	proto.RegisterType((*ABFTMessageReq)(nil), "abft.ABFTMessageReq")
	proto.RegisterType((*ABFTMessageRsp)(nil), "abft.ABFTMessageRsp")
	proto.RegisterType((*ACSMessage)(nil), "abft.ACSMessage")
	proto.RegisterType((*RBCRequest)(nil), "abft.RBCRequest")
	proto.RegisterType((*ProofRequest)(nil), "abft.ProofRequest")
	proto.RegisterType((*EchoRequest)(nil), "abft.EchoRequest")
	proto.RegisterType((*ReadyRequest)(nil), "abft.ReadyRequest")
	proto.RegisterType((*BBARequest)(nil), "abft.BBARequest")
	proto.RegisterType((*BValRequest)(nil), "abft.BValRequest")
	proto.RegisterType((*AuxRequest)(nil), "abft.AuxRequest")
	proto.RegisterType((*WalEntry)(nil), "abft.WalEntry")
}

func init() { proto.RegisterFile("consensus/abft/abft.proto", fileDescriptor_793b6c4434949f22) }

var fileDescriptor_793b6c4434949f22 = []byte{
	// 770 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xb4, 0x55, 0x4f, 0x6f, 0xe3, 0x44,
	0x14, 0x8f, 0x13, 0xb7, 0xdb, 0x3e, 0xbb, 0xdd, 0x30, 0xaa, 0x90, 0x11, 0x52, 0x54, 0x0c, 0x12,
	0xd5, 0x22, 0x12, 0xd1, 0x95, 0x80, 0x3d, 0xc6, 0x65, 0xab, 0x72, 0x40, 0xbb, 0x9a, 0x2e, 0x7f,
	0xc4, 0xa5, 0x1a, 0x8f, 0x27, 0xb6, 0x15, 0xc7, 0xe3, 0xce, 0x8c, 0x43, 0xf6, 0x13, 0x70, 0x45,
	0xf0, 0x99, 0x90, 0x38, 0xee, 0x91, 0x23, 0x6a, 0xbf, 0x08, 0x9a, 0x19, 0x13, 0x4f, 0x40, 0xa0,
	0xe5, 0xb0, 0x97, 0x68, 0x7e, 0xef, 0xbd, 0x79, 0xef, 0xf7, 0xde, 0x6f, 0x5e, 0x0c, 0xef, 0x50,
	0x5e, 0x4b, 0x56, 0xcb, 0x56, 0xce, 0x48, 0xba, 0x50, 0xe6, 0x67, 0xda, 0x08, 0xae, 0x38, 0xf2,
	0xf5, 0x39, 0x7e, 0x0c, 0xc7, 0xcf, 0x09, 0x5d, 0x92, 0x9c, 0x65, 0xd7, 0x65, 0x5e, 0x93, 0x0a,
	0xbd, 0x07, 0x61, 0x5a, 0x71, 0xba, 0xbc, 0x29, 0x58, 0x99, 0x17, 0x2a, 0xf2, 0x4e, 0xbd, 0x33,
	0x1f, 0x07, 0xc6, 0x76, 0x65, 0x4c, 0xf1, 0x77, 0xf0, 0xf0, 0xc5, 0x26, 0x21, 0x8a, 0x16, 0xf3,
	0x85, 0x62, 0x62, 0x9e, 0xcc, 0x5f, 0xe3, 0x16, 0x8a, 0xe1, 0x48, 0x6d, 0x6e, 0x52, 0x7d, 0xed,
	0xa6, 0x20, 0xb2, 0x88, 0x86, 0xa7, 0xa3, 0xb3, 0x10, 0x07, 0xca, 0xa6, 0xba, 0x22, 0xb2, 0x88,
	0x2b, 0x08, 0xe6, 0xc9, 0xe5, 0x8b, 0xaf, 0x98, 0x94, 0x24, 0x67, 0xe8, 0x0c, 0x46, 0x82, 0xdd,
	0x9a, 0x64, 0xc1, 0xf9, 0xc9, 0xd4, 0xb0, 0x77, 0xfc, 0x98, 0xdd, 0x5e, 0x0d, 0xb0, 0x0e, 0x31,
	0x91, 0xb2, 0x89, 0x86, 0xff, 0x16, 0x29, 0x1b, 0x13, 0x29, 0x9b, 0xe4, 0x10, 0x1e, 0xac, 0xac,
	0x31, 0xfe, 0xd9, 0x83, 0xe3, 0xdd, 0x74, 0x68, 0x0c, 0x23, 0xd9, 0x55, 0xf4, 0xb1, 0x3e, 0xa2,
	0xb7, 0x61, 0xbf, 0xeb, 0x69, 0x68, 0x8c, 0x1d, 0x42, 0x08, 0xfc, 0x85, 0xe0, 0xab, 0x68, 0x74,
	0xea, 0x9d, 0x1d, 0x62, 0x73, 0x46, 0xc7, 0x30, 0x54, 0x3c, 0xf2, 0x8d, 0x65, 0xa8, 0xb8, 0xc6,
	0x65, 0x16, 0xed, 0x59, 0x5c, 0x66, 0x28, 0x86, 0x11, 0xa1, 0x32, 0xda, 0x37, 0x2c, 0xc7, 0x1d,
	0xcb, 0x8b, 0xeb, 0xbf, 0xea, 0x6b, 0x67, 0xfc, 0xcb, 0xdf, 0x48, 0xc9, 0xe6, 0x0d, 0x93, 0x7a,
	0x1f, 0x7c, 0xca, 0x33, 0x66, 0x58, 0x1d, 0x9f, 0x3f, 0xb4, 0xac, 0x9e, 0x0a, 0xc1, 0xc5, 0x05,
	0xcf, 0x18, 0x36, 0xce, 0x98, 0x02, 0xf4, 0x44, 0xd1, 0x07, 0x30, 0x12, 0x29, 0xed, 0x74, 0xe9,
	0xfa, 0xc0, 0xc9, 0x05, 0x66, 0xb7, 0x2d, 0x93, 0xca, 0x4c, 0x3a, 0xa5, 0x3a, 0x2a, 0x4d, 0x49,
	0xa7, 0x49, 0x17, 0x95, 0x24, 0x73, 0x27, 0x2a, 0x4d, 0x89, 0xab, 0xc7, 0xaf, 0x1e, 0x40, 0x9f,
	0x06, 0x3d, 0x81, 0xa3, 0x46, 0x70, 0xbe, 0xb8, 0x11, 0xd6, 0xd0, 0xd5, 0x43, 0x36, 0xd3, 0x73,
	0xed, 0xea, 0x73, 0x85, 0x8d, 0x83, 0xd1, 0xa7, 0x10, 0x32, 0x5a, 0xf0, 0xed, 0x4d, 0xcb, 0xe1,
	0xad, 0xae, 0x37, 0x5a, 0xf0, 0xfe, 0x62, 0xc0, 0x7a, 0xa8, 0x4b, 0x0a, 0x46, 0xb2, 0x97, 0xdb,
	0x8b, 0x23, 0xb7, 0x24, 0xd6, 0x2e, 0xa7, 0xa4, 0x70, 0xb0, 0xdb, 0xc7, 0x8f, 0x1e, 0x84, 0x2e,
	0x3d, 0xf4, 0x2e, 0x1c, 0x0a, 0xce, 0x95, 0x7d, 0xf6, 0xba, 0x8b, 0x10, 0x1f, 0x68, 0x83, 0x7e,
	0xf3, 0xe8, 0x04, 0xf6, 0x0c, 0xf7, 0x6e, 0x1f, 0x2c, 0xd0, 0xd6, 0xb2, 0xce, 0xd8, 0xc6, 0x30,
	0xf0, 0xb1, 0x05, 0x5a, 0xf7, 0x8a, 0x91, 0x35, 0x93, 0x46, 0x4f, 0x1f, 0x77, 0xc8, 0xda, 0xeb,
	0x5c, 0x15, 0x46, 0xd7, 0x3d, 0xdc, 0xa1, 0xf8, 0x12, 0x02, 0xa7, 0x5b, 0xf4, 0xd9, 0x6b, 0x4f,
	0x74, 0x77, 0x9e, 0xf1, 0x47, 0x10, 0xba, 0xcd, 0xff, 0x67, 0x43, 0xf1, 0x02, 0xa0, 0x97, 0x19,
	0x7d, 0x08, 0x7e, 0xba, 0x26, 0x55, 0x57, 0xaa, 0x93, 0x20, 0xf9, 0x86, 0x54, 0xfd, 0x20, 0x4d,
	0x80, 0x7e, 0x2e, 0xa4, 0xdd, 0xec, 0x3e, 0x97, 0x79, 0xbb, 0x71, 0x9e, 0x0b, 0x69, 0x37, 0xee,
	0x98, 0x9f, 0x40, 0xe0, 0xe4, 0xd1, 0x13, 0x63, 0x0d, 0xa7, 0x96, 0xcf, 0x11, 0xb6, 0x40, 0x5b,
	0xd7, 0xa4, 0x6a, 0x99, 0xc9, 0x7b, 0x80, 0x2d, 0x88, 0x3f, 0x07, 0xe8, 0x53, 0xff, 0xaf, 0x9b,
	0x1b, 0x38, 0xf8, 0x96, 0x54, 0x4f, 0x6b, 0x25, 0x5e, 0x3a, 0x5b, 0xe8, 0xed, 0x6c, 0xe1, 0x23,
	0x18, 0xdb, 0xd3, 0x65, 0x29, 0xa4, 0xfa, 0xd2, 0xc8, 0x68, 0xf7, 0xf4, 0x1f, 0x76, 0x5d, 0x45,
	0xf1, 0xa6, 0xa4, 0x46, 0xe7, 0x3d, 0x6c, 0x81, 0xde, 0xe3, 0x8c, 0x28, 0x62, 0x54, 0x0e, 0xb1,
	0x39, 0x3f, 0xfa, 0x02, 0x0e, 0xb7, 0x5b, 0x89, 0x02, 0x78, 0x70, 0xdd, 0x52, 0xca, 0xa4, 0x1c,
	0x0f, 0x50, 0x04, 0x27, 0x97, 0xa4, 0xac, 0x9e, 0x2d, 0x9e, 0xb5, 0x2a, 0x23, 0x8a, 0x65, 0xf6,
	0x1f, 0x77, 0xec, 0xa1, 0x31, 0x84, 0xd6, 0xf3, 0x75, 0xbd, 0xe4, 0x3f, 0xd4, 0xe3, 0x61, 0xb2,
	0xfa, 0xed, 0x6e, 0xe2, 0xbd, 0xba, 0x9b, 0x78, 0x7f, 0xdc, 0x4d, 0xbc, 0x9f, 0xee, 0x27, 0x83,
	0x57, 0xf7, 0x93, 0xc1, 0xef, 0xf7, 0x93, 0x01, 0x9c, 0x72, 0x91, 0x4f, 0x69, 0x41, 0xca, 0x7a,
	0x45, 0x96, 0x4c, 0x4c, 0x9b, 0x74, 0xba, 0xfd, 0x7a, 0x18, 0x35, 0xbe, 0xff, 0xc4, 0xf1, 0x72,
	0x91, 0xcf, 0x7a, 0x38, 0x6b, 0xd2, 0x8f, 0x73, 0x3e, 0x5b, 0x9f, 0xcf, 0x76, 0x3f, 0x38, 0xe9,
	0xbe, 0xf9, 0xd8, 0x3c, 0xfe, 0x33, 0x00, 0x00, 0xff, 0xff, 0x6d, 0x55, 0x26, 0xcf, 0x89, 0x06,
	0x00, 0x00,
}

func (m *PackagedSignal) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PackagedSignal) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PackagedSignal) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.BlockHeight != 0 {
		i = encodeVarintAbft(dAtA, i, uint64(m.BlockHeight))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *TxBatchAfterABA) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TxBatchAfterABA) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TxBatchAfterABA) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.TxBatchHash) > 0 {
		for iNdEx := len(m.TxBatchHash) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.TxBatchHash[iNdEx])
			copy(dAtA[i:], m.TxBatchHash[iNdEx])
			i = encodeVarintAbft(dAtA, i, uint64(len(m.TxBatchHash[iNdEx])))
			i--
			dAtA[i] = 0x12
		}
	}
	if m.BlockHeight != 0 {
		i = encodeVarintAbft(dAtA, i, uint64(m.BlockHeight))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *ABFTMessage) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ABFTMessage) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ABFTMessage) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Message != nil {
		{
			size := m.Message.Size()
			i -= size
			if _, err := m.Message.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	return len(dAtA) - i, nil
}

func (m *ABFTMessage_Req) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ABFTMessage_Req) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.Req != nil {
		{
			size, err := m.Req.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintAbft(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}
func (m *ABFTMessage_Rsp) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ABFTMessage_Rsp) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.Rsp != nil {
		{
			size, err := m.Rsp.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintAbft(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	return len(dAtA) - i, nil
}
func (m *ABFTMessageReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ABFTMessageReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ABFTMessageReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Acs != nil {
		{
			size, err := m.Acs.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintAbft(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x32
	}
	if len(m.Id) > 0 {
		i -= len(m.Id)
		copy(dAtA[i:], m.Id)
		i = encodeVarintAbft(dAtA, i, uint64(len(m.Id)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.To) > 0 {
		i -= len(m.To)
		copy(dAtA[i:], m.To)
		i = encodeVarintAbft(dAtA, i, uint64(len(m.To)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.From) > 0 {
		i -= len(m.From)
		copy(dAtA[i:], m.From)
		i = encodeVarintAbft(dAtA, i, uint64(len(m.From)))
		i--
		dAtA[i] = 0x1a
	}
	if m.Height != 0 {
		i = encodeVarintAbft(dAtA, i, uint64(m.Height))
		i--
		dAtA[i] = 0x10
	}
	if m.Seq != 0 {
		i = encodeVarintAbft(dAtA, i, uint64(m.Seq))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *ABFTMessageRsp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ABFTMessageRsp) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ABFTMessageRsp) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Code != 0 {
		i = encodeVarintAbft(dAtA, i, uint64(m.Code))
		i--
		dAtA[i] = 0x30
	}
	if len(m.Id) > 0 {
		i -= len(m.Id)
		copy(dAtA[i:], m.Id)
		i = encodeVarintAbft(dAtA, i, uint64(len(m.Id)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.To) > 0 {
		i -= len(m.To)
		copy(dAtA[i:], m.To)
		i = encodeVarintAbft(dAtA, i, uint64(len(m.To)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.From) > 0 {
		i -= len(m.From)
		copy(dAtA[i:], m.From)
		i = encodeVarintAbft(dAtA, i, uint64(len(m.From)))
		i--
		dAtA[i] = 0x1a
	}
	if m.Height != 0 {
		i = encodeVarintAbft(dAtA, i, uint64(m.Height))
		i--
		dAtA[i] = 0x10
	}
	if m.Seq != 0 {
		i = encodeVarintAbft(dAtA, i, uint64(m.Seq))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *ACSMessage) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ACSMessage) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ACSMessage) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Message != nil {
		{
			size := m.Message.Size()
			i -= size
			if _, err := m.Message.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	return len(dAtA) - i, nil
}

func (m *ACSMessage_Rbc) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ACSMessage_Rbc) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.Rbc != nil {
		{
			size, err := m.Rbc.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintAbft(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}
func (m *ACSMessage_Bba) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ACSMessage_Bba) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.Bba != nil {
		{
			size, err := m.Bba.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintAbft(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	return len(dAtA) - i, nil
}
func (m *RBCRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RBCRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RBCRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Message != nil {
		{
			size := m.Message.Size()
			i -= size
			if _, err := m.Message.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	return len(dAtA) - i, nil
}

func (m *RBCRequest_ProofRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RBCRequest_ProofRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.ProofRequest != nil {
		{
			size, err := m.ProofRequest.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintAbft(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}
func (m *RBCRequest_EchoRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RBCRequest_EchoRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.EchoRequest != nil {
		{
			size, err := m.EchoRequest.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintAbft(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	return len(dAtA) - i, nil
}
func (m *RBCRequest_ReadyRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RBCRequest_ReadyRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.ReadyRequest != nil {
		{
			size, err := m.ReadyRequest.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintAbft(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	return len(dAtA) - i, nil
}
func (m *ProofRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ProofRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ProofRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Length != 0 {
		i = encodeVarintAbft(dAtA, i, uint64(m.Length))
		i--
		dAtA[i] = 0x28
	}
	if m.Leaves != 0 {
		i = encodeVarintAbft(dAtA, i, uint64(m.Leaves))
		i--
		dAtA[i] = 0x20
	}
	if m.Index != 0 {
		i = encodeVarintAbft(dAtA, i, uint64(m.Index))
		i--
		dAtA[i] = 0x18
	}
	if len(m.Proof) > 0 {
		for iNdEx := len(m.Proof) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Proof[iNdEx])
			copy(dAtA[i:], m.Proof[iNdEx])
			i = encodeVarintAbft(dAtA, i, uint64(len(m.Proof[iNdEx])))
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.RootHash) > 0 {
		i -= len(m.RootHash)
		copy(dAtA[i:], m.RootHash)
		i = encodeVarintAbft(dAtA, i, uint64(len(m.RootHash)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *EchoRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EchoRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EchoRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.ProofRequest != nil {
		{
			size, err := m.ProofRequest.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintAbft(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ReadyRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReadyRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ReadyRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.RootHash) > 0 {
		i -= len(m.RootHash)
		copy(dAtA[i:], m.RootHash)
		i = encodeVarintAbft(dAtA, i, uint64(len(m.RootHash)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *BBARequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BBARequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *BBARequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Message != nil {
		{
			size := m.Message.Size()
			i -= size
			if _, err := m.Message.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	return len(dAtA) - i, nil
}

func (m *BBARequest_Bval) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *BBARequest_Bval) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.Bval != nil {
		{
			size, err := m.Bval.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintAbft(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}
func (m *BBARequest_Aux) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *BBARequest_Aux) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.Aux != nil {
		{
			size, err := m.Aux.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintAbft(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	return len(dAtA) - i, nil
}
func (m *BValRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BValRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *BValRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Value {
		i--
		if m.Value {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x10
	}
	if m.Epoch != 0 {
		i = encodeVarintAbft(dAtA, i, uint64(m.Epoch))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *AuxRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AuxRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AuxRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Value {
		i--
		if m.Value {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x10
	}
	if m.Epoch != 0 {
		i = encodeVarintAbft(dAtA, i, uint64(m.Epoch))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *WalEntry) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *WalEntry) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *WalEntry) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Data) > 0 {
		i -= len(m.Data)
		copy(dAtA[i:], m.Data)
		i = encodeVarintAbft(dAtA, i, uint64(len(m.Data)))
		i--
		dAtA[i] = 0x22
	}
	if m.Topic != 0 {
		i = encodeVarintAbft(dAtA, i, uint64(m.Topic))
		i--
		dAtA[i] = 0x18
	}
	if m.HeightFirstIndex != 0 {
		i = encodeVarintAbft(dAtA, i, uint64(m.HeightFirstIndex))
		i--
		dAtA[i] = 0x10
	}
	if m.Height != 0 {
		i = encodeVarintAbft(dAtA, i, uint64(m.Height))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintAbft(dAtA []byte, offset int, v uint64) int {
	offset -= sovAbft(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *PackagedSignal) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.BlockHeight != 0 {
		n += 1 + sovAbft(uint64(m.BlockHeight))
	}
	return n
}

func (m *TxBatchAfterABA) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.BlockHeight != 0 {
		n += 1 + sovAbft(uint64(m.BlockHeight))
	}
	if len(m.TxBatchHash) > 0 {
		for _, b := range m.TxBatchHash {
			l = len(b)
			n += 1 + l + sovAbft(uint64(l))
		}
	}
	return n
}

func (m *ABFTMessage) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Message != nil {
		n += m.Message.Size()
	}
	return n
}

func (m *ABFTMessage_Req) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Req != nil {
		l = m.Req.Size()
		n += 1 + l + sovAbft(uint64(l))
	}
	return n
}
func (m *ABFTMessage_Rsp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Rsp != nil {
		l = m.Rsp.Size()
		n += 1 + l + sovAbft(uint64(l))
	}
	return n
}
func (m *ABFTMessageReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Seq != 0 {
		n += 1 + sovAbft(uint64(m.Seq))
	}
	if m.Height != 0 {
		n += 1 + sovAbft(uint64(m.Height))
	}
	l = len(m.From)
	if l > 0 {
		n += 1 + l + sovAbft(uint64(l))
	}
	l = len(m.To)
	if l > 0 {
		n += 1 + l + sovAbft(uint64(l))
	}
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovAbft(uint64(l))
	}
	if m.Acs != nil {
		l = m.Acs.Size()
		n += 1 + l + sovAbft(uint64(l))
	}
	return n
}

func (m *ABFTMessageRsp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Seq != 0 {
		n += 1 + sovAbft(uint64(m.Seq))
	}
	if m.Height != 0 {
		n += 1 + sovAbft(uint64(m.Height))
	}
	l = len(m.From)
	if l > 0 {
		n += 1 + l + sovAbft(uint64(l))
	}
	l = len(m.To)
	if l > 0 {
		n += 1 + l + sovAbft(uint64(l))
	}
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovAbft(uint64(l))
	}
	if m.Code != 0 {
		n += 1 + sovAbft(uint64(m.Code))
	}
	return n
}

func (m *ACSMessage) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Message != nil {
		n += m.Message.Size()
	}
	return n
}

func (m *ACSMessage_Rbc) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Rbc != nil {
		l = m.Rbc.Size()
		n += 1 + l + sovAbft(uint64(l))
	}
	return n
}
func (m *ACSMessage_Bba) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Bba != nil {
		l = m.Bba.Size()
		n += 1 + l + sovAbft(uint64(l))
	}
	return n
}
func (m *RBCRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Message != nil {
		n += m.Message.Size()
	}
	return n
}

func (m *RBCRequest_ProofRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ProofRequest != nil {
		l = m.ProofRequest.Size()
		n += 1 + l + sovAbft(uint64(l))
	}
	return n
}
func (m *RBCRequest_EchoRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.EchoRequest != nil {
		l = m.EchoRequest.Size()
		n += 1 + l + sovAbft(uint64(l))
	}
	return n
}
func (m *RBCRequest_ReadyRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ReadyRequest != nil {
		l = m.ReadyRequest.Size()
		n += 1 + l + sovAbft(uint64(l))
	}
	return n
}
func (m *ProofRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.RootHash)
	if l > 0 {
		n += 1 + l + sovAbft(uint64(l))
	}
	if len(m.Proof) > 0 {
		for _, b := range m.Proof {
			l = len(b)
			n += 1 + l + sovAbft(uint64(l))
		}
	}
	if m.Index != 0 {
		n += 1 + sovAbft(uint64(m.Index))
	}
	if m.Leaves != 0 {
		n += 1 + sovAbft(uint64(m.Leaves))
	}
	if m.Length != 0 {
		n += 1 + sovAbft(uint64(m.Length))
	}
	return n
}

func (m *EchoRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ProofRequest != nil {
		l = m.ProofRequest.Size()
		n += 1 + l + sovAbft(uint64(l))
	}
	return n
}

func (m *ReadyRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.RootHash)
	if l > 0 {
		n += 1 + l + sovAbft(uint64(l))
	}
	return n
}

func (m *BBARequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Message != nil {
		n += m.Message.Size()
	}
	return n
}

func (m *BBARequest_Bval) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Bval != nil {
		l = m.Bval.Size()
		n += 1 + l + sovAbft(uint64(l))
	}
	return n
}
func (m *BBARequest_Aux) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Aux != nil {
		l = m.Aux.Size()
		n += 1 + l + sovAbft(uint64(l))
	}
	return n
}
func (m *BValRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Epoch != 0 {
		n += 1 + sovAbft(uint64(m.Epoch))
	}
	if m.Value {
		n += 2
	}
	return n
}

func (m *AuxRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Epoch != 0 {
		n += 1 + sovAbft(uint64(m.Epoch))
	}
	if m.Value {
		n += 2
	}
	return n
}

func (m *WalEntry) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Height != 0 {
		n += 1 + sovAbft(uint64(m.Height))
	}
	if m.HeightFirstIndex != 0 {
		n += 1 + sovAbft(uint64(m.HeightFirstIndex))
	}
	if m.Topic != 0 {
		n += 1 + sovAbft(uint64(m.Topic))
	}
	l = len(m.Data)
	if l > 0 {
		n += 1 + l + sovAbft(uint64(l))
	}
	return n
}

func sovAbft(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozAbft(x uint64) (n int) {
	return sovAbft(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *PackagedSignal) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAbft
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PackagedSignal: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PackagedSignal: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BlockHeight", wireType)
			}
			m.BlockHeight = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAbft
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BlockHeight |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipAbft(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthAbft
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TxBatchAfterABA) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAbft
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TxBatchAfterABA: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TxBatchAfterABA: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BlockHeight", wireType)
			}
			m.BlockHeight = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAbft
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BlockHeight |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TxBatchHash", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAbft
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthAbft
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthAbft
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TxBatchHash = append(m.TxBatchHash, make([]byte, postIndex-iNdEx))
			copy(m.TxBatchHash[len(m.TxBatchHash)-1], dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAbft(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthAbft
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ABFTMessage) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAbft
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ABFTMessage: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ABFTMessage: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Req", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAbft
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAbft
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthAbft
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ABFTMessageReq{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Message = &ABFTMessage_Req{v}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Rsp", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAbft
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAbft
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthAbft
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ABFTMessageRsp{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Message = &ABFTMessage_Rsp{v}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAbft(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthAbft
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ABFTMessageReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAbft
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ABFTMessageReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ABFTMessageReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Seq", wireType)
			}
			m.Seq = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAbft
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Seq |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Height", wireType)
			}
			m.Height = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAbft
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Height |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field From", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAbft
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAbft
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAbft
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.From = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field To", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAbft
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAbft
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAbft
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.To = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAbft
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAbft
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAbft
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Acs", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAbft
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAbft
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthAbft
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Acs == nil {
				m.Acs = &ACSMessage{}
			}
			if err := m.Acs.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAbft(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthAbft
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ABFTMessageRsp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAbft
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ABFTMessageRsp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ABFTMessageRsp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Seq", wireType)
			}
			m.Seq = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAbft
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Seq |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Height", wireType)
			}
			m.Height = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAbft
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Height |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field From", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAbft
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAbft
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAbft
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.From = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field To", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAbft
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAbft
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAbft
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.To = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAbft
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAbft
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAbft
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Code", wireType)
			}
			m.Code = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAbft
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Code |= ErrorCode(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipAbft(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthAbft
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ACSMessage) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAbft
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ACSMessage: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ACSMessage: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Rbc", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAbft
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAbft
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthAbft
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &RBCRequest{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Message = &ACSMessage_Rbc{v}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Bba", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAbft
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAbft
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthAbft
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &BBARequest{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Message = &ACSMessage_Bba{v}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAbft(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthAbft
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RBCRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAbft
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RBCRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RBCRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProofRequest", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAbft
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAbft
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthAbft
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ProofRequest{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Message = &RBCRequest_ProofRequest{v}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EchoRequest", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAbft
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAbft
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthAbft
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &EchoRequest{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Message = &RBCRequest_EchoRequest{v}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReadyRequest", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAbft
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAbft
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthAbft
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ReadyRequest{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Message = &RBCRequest_ReadyRequest{v}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAbft(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthAbft
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ProofRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAbft
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ProofRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ProofRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RootHash", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAbft
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthAbft
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthAbft
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RootHash = append(m.RootHash[:0], dAtA[iNdEx:postIndex]...)
			if m.RootHash == nil {
				m.RootHash = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Proof", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAbft
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthAbft
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthAbft
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Proof = append(m.Proof, make([]byte, postIndex-iNdEx))
			copy(m.Proof[len(m.Proof)-1], dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Index", wireType)
			}
			m.Index = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAbft
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Index |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Leaves", wireType)
			}
			m.Leaves = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAbft
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Leaves |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Length", wireType)
			}
			m.Length = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAbft
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Length |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipAbft(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthAbft
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EchoRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAbft
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EchoRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EchoRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProofRequest", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAbft
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAbft
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthAbft
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ProofRequest == nil {
				m.ProofRequest = &ProofRequest{}
			}
			if err := m.ProofRequest.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAbft(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthAbft
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReadyRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAbft
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReadyRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReadyRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RootHash", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAbft
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthAbft
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthAbft
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RootHash = append(m.RootHash[:0], dAtA[iNdEx:postIndex]...)
			if m.RootHash == nil {
				m.RootHash = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAbft(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthAbft
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BBARequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAbft
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BBARequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BBARequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Bval", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAbft
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAbft
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthAbft
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &BValRequest{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Message = &BBARequest_Bval{v}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Aux", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAbft
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAbft
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthAbft
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &AuxRequest{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Message = &BBARequest_Aux{v}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAbft(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthAbft
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BValRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAbft
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BValRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BValRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Epoch", wireType)
			}
			m.Epoch = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAbft
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Epoch |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Value", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAbft
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Value = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipAbft(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthAbft
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AuxRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAbft
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AuxRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AuxRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Epoch", wireType)
			}
			m.Epoch = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAbft
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Epoch |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Value", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAbft
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Value = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipAbft(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthAbft
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *WalEntry) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAbft
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: WalEntry: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: WalEntry: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Height", wireType)
			}
			m.Height = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAbft
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Height |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field HeightFirstIndex", wireType)
			}
			m.HeightFirstIndex = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAbft
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.HeightFirstIndex |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Topic", wireType)
			}
			m.Topic = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAbft
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Topic |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Data", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAbft
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthAbft
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthAbft
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Data = append(m.Data[:0], dAtA[iNdEx:postIndex]...)
			if m.Data == nil {
				m.Data = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAbft(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthAbft
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipAbft(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowAbft
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowAbft
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowAbft
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthAbft
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupAbft
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthAbft
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthAbft        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowAbft          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupAbft = fmt.Errorf("proto: unexpected end of group")
)
