// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: txpool/transaction_pool.proto

package txpool

import (
	common "zhanghefan123/security/protobuf/pb-go/common"
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// SignalType is a transaction event type
type SignalType int32

const (
	// no transaction
	SignalType_NO_EVENT SignalType = 0
	// new transaction
	SignalType_TRANSACTION_INCOME SignalType = 1
	// packing block
	SignalType_BLOCK_PROPOSE SignalType = 2
)

var SignalType_name = map[int32]string{
	0: "NO_EVENT",
	1: "TRANSACTION_INCOME",
	2: "BLOCK_PROPOSE",
}

var SignalType_value = map[string]int32{
	"NO_EVENT":           0,
	"TRANSACTION_INCOME": 1,
	"BLOCK_PROPOSE":      2,
}

func (x SignalType) String() string {
	return proto.EnumName(SignalType_name, int32(x))
}

func (SignalType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_0bc7127f197678cd, []int{0}
}

// TxType is the transaction type
type TxType int32

const (
	// unknown
	TxType_UNKNOWN_TYPE TxType = 0
	// config transaction
	TxType_CONFIG_TX TxType = 1
	// common transaction
	TxType_COMMON_TX TxType = 2
	// config and common transaction
	TxType_ALL_TYPE TxType = 3
)

var TxType_name = map[int32]string{
	0: "UNKNOWN_TYPE",
	1: "CONFIG_TX",
	2: "COMMON_TX",
	3: "ALL_TYPE",
}

var TxType_value = map[string]int32{
	"UNKNOWN_TYPE": 0,
	"CONFIG_TX":    1,
	"COMMON_TX":    2,
	"ALL_TYPE":     3,
}

func (x TxType) String() string {
	return proto.EnumName(TxType_name, int32(x))
}

func (TxType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_0bc7127f197678cd, []int{1}
}

// TxStage is the current transaction stage
type TxStage int32

const (
	// unknown
	TxStage_UNKNOWN_STAGE TxStage = 0
	//  in queue
	TxStage_IN_QUEUE TxStage = 1
	// in pending
	TxStage_IN_PENDING TxStage = 2
	// in queue and in pending
	TxStage_ALL_STAGE TxStage = 3
)

var TxStage_name = map[int32]string{
	0: "UNKNOWN_STAGE",
	1: "IN_QUEUE",
	2: "IN_PENDING",
	3: "ALL_STAGE",
}

var TxStage_value = map[string]int32{
	"UNKNOWN_STAGE": 0,
	"IN_QUEUE":      1,
	"IN_PENDING":    2,
	"ALL_STAGE":     3,
}

func (x TxStage) String() string {
	return proto.EnumName(TxStage_name, int32(x))
}

func (TxStage) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_0bc7127f197678cd, []int{2}
}

// TxPoolMsgType defines different type message in txPool
type TxPoolMsgType int32

const (
	// single transaction type
	TxPoolMsgType_SINGLE_TX TxPoolMsgType = 0
	// batch transaction type
	TxPoolMsgType_BATCH_TX TxPoolMsgType = 1
	// transaction recover request type
	TxPoolMsgType_RECOVER_REQ TxPoolMsgType = 2
	// transaction recover response type
	TxPoolMsgType_RECOVER_RESP TxPoolMsgType = 3
)

var TxPoolMsgType_name = map[int32]string{
	0: "SINGLE_TX",
	1: "BATCH_TX",
	2: "RECOVER_REQ",
	3: "RECOVER_RESP",
}

var TxPoolMsgType_value = map[string]int32{
	"SINGLE_TX":    0,
	"BATCH_TX":     1,
	"RECOVER_REQ":  2,
	"RECOVER_RESP": 3,
}

func (x TxPoolMsgType) String() string {
	return proto.EnumName(TxPoolMsgType_name, int32(x))
}

func (TxPoolMsgType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_0bc7127f197678cd, []int{3}
}

// TxPoolSignal is used by tx pool to send signal to block proposer
type TxPoolSignal struct {
	// transaction event type
	SignalType SignalType `protobuf:"varint,1,opt,name=signal_type,json=signalType,proto3,enum=txpool.SignalType" json:"signal_type,omitempty"`
	// chainId
	ChainId string `protobuf:"bytes,2,opt,name=chain_id,json=chainId,proto3" json:"chain_id,omitempty"`
}

func (m *TxPoolSignal) Reset()         { *m = TxPoolSignal{} }
func (m *TxPoolSignal) String() string { return proto.CompactTextString(m) }
func (*TxPoolSignal) ProtoMessage()    {}
func (*TxPoolSignal) Descriptor() ([]byte, []int) {
	return fileDescriptor_0bc7127f197678cd, []int{0}
}
func (m *TxPoolSignal) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TxPoolSignal) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TxPoolSignal.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TxPoolSignal) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TxPoolSignal.Merge(m, src)
}
func (m *TxPoolSignal) XXX_Size() int {
	return m.Size()
}
func (m *TxPoolSignal) XXX_DiscardUnknown() {
	xxx_messageInfo_TxPoolSignal.DiscardUnknown(m)
}

var xxx_messageInfo_TxPoolSignal proto.InternalMessageInfo

func (m *TxPoolSignal) GetSignalType() SignalType {
	if m != nil {
		return m.SignalType
	}
	return SignalType_NO_EVENT
}

func (m *TxPoolSignal) GetChainId() string {
	if m != nil {
		return m.ChainId
	}
	return ""
}

// TxPoolStatus defines txPool status
type TxPoolStatus struct {
	// the max size of config tx pool
	ConfigTxPoolSize int32 `protobuf:"varint,1,opt,name=config_tx_pool_size,json=configTxPoolSize,proto3" json:"config_tx_pool_size,omitempty"`
	// the max size of common tx pool
	CommonTxPoolSize int32 `protobuf:"varint,2,opt,name=common_tx_pool_size,json=commonTxPoolSize,proto3" json:"common_tx_pool_size,omitempty"`
	// the num of config tx in queue cache
	ConfigTxNumInQueue int32 `protobuf:"varint,3,opt,name=config_tx_num_in_queue,json=configTxNumInQueue,proto3" json:"config_tx_num_in_queue,omitempty"`
	// the num of config tx in pending cache
	ConfigTxNumInPending int32 `protobuf:"varint,4,opt,name=config_tx_num_in_pending,json=configTxNumInPending,proto3" json:"config_tx_num_in_pending,omitempty"`
	// the num of common tx in queue cache
	CommonTxNumInQueue int32 `protobuf:"varint,5,opt,name=common_tx_num_in_queue,json=commonTxNumInQueue,proto3" json:"common_tx_num_in_queue,omitempty"`
	// the num of common tx in pending cache
	CommonTxNumInPending int32 `protobuf:"varint,6,opt,name=common_tx_num_in_pending,json=commonTxNumInPending,proto3" json:"common_tx_num_in_pending,omitempty"`
}

func (m *TxPoolStatus) Reset()         { *m = TxPoolStatus{} }
func (m *TxPoolStatus) String() string { return proto.CompactTextString(m) }
func (*TxPoolStatus) ProtoMessage()    {}
func (*TxPoolStatus) Descriptor() ([]byte, []int) {
	return fileDescriptor_0bc7127f197678cd, []int{1}
}
func (m *TxPoolStatus) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TxPoolStatus) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TxPoolStatus.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TxPoolStatus) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TxPoolStatus.Merge(m, src)
}
func (m *TxPoolStatus) XXX_Size() int {
	return m.Size()
}
func (m *TxPoolStatus) XXX_DiscardUnknown() {
	xxx_messageInfo_TxPoolStatus.DiscardUnknown(m)
}

var xxx_messageInfo_TxPoolStatus proto.InternalMessageInfo

func (m *TxPoolStatus) GetConfigTxPoolSize() int32 {
	if m != nil {
		return m.ConfigTxPoolSize
	}
	return 0
}

func (m *TxPoolStatus) GetCommonTxPoolSize() int32 {
	if m != nil {
		return m.CommonTxPoolSize
	}
	return 0
}

func (m *TxPoolStatus) GetConfigTxNumInQueue() int32 {
	if m != nil {
		return m.ConfigTxNumInQueue
	}
	return 0
}

func (m *TxPoolStatus) GetConfigTxNumInPending() int32 {
	if m != nil {
		return m.ConfigTxNumInPending
	}
	return 0
}

func (m *TxPoolStatus) GetCommonTxNumInQueue() int32 {
	if m != nil {
		return m.CommonTxNumInQueue
	}
	return 0
}

func (m *TxPoolStatus) GetCommonTxNumInPending() int32 {
	if m != nil {
		return m.CommonTxNumInPending
	}
	return 0
}

// TxPoolMsg contains all txPool msg type and msg body
type TxPoolMsg struct {
	// txPool message type
	Type TxPoolMsgType `protobuf:"varint,1,opt,name=type,proto3,enum=txpool.TxPoolMsgType" json:"type,omitempty"`
	// message bytes
	Payload []byte `protobuf:"bytes,2,opt,name=payload,proto3" json:"payload,omitempty"`
}

func (m *TxPoolMsg) Reset()         { *m = TxPoolMsg{} }
func (m *TxPoolMsg) String() string { return proto.CompactTextString(m) }
func (*TxPoolMsg) ProtoMessage()    {}
func (*TxPoolMsg) Descriptor() ([]byte, []int) {
	return fileDescriptor_0bc7127f197678cd, []int{2}
}
func (m *TxPoolMsg) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TxPoolMsg) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TxPoolMsg.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TxPoolMsg) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TxPoolMsg.Merge(m, src)
}
func (m *TxPoolMsg) XXX_Size() int {
	return m.Size()
}
func (m *TxPoolMsg) XXX_DiscardUnknown() {
	xxx_messageInfo_TxPoolMsg.DiscardUnknown(m)
}

var xxx_messageInfo_TxPoolMsg proto.InternalMessageInfo

func (m *TxPoolMsg) GetType() TxPoolMsgType {
	if m != nil {
		return m.Type
	}
	return TxPoolMsgType_SINGLE_TX
}

func (m *TxPoolMsg) GetPayload() []byte {
	if m != nil {
		return m.Payload
	}
	return nil
}

// transaction batch, used to add transaction efficiently in normal and batch txPool
type TxBatch struct {
	// batch id = timestamp(8byte)+nodeId(8byte)+batchHash(8byte)
	BatchId string `protobuf:"bytes,1,opt,name=batch_id,json=batchId,proto3" json:"batch_id,omitempty"`
	// batch size
	Size_ int32 `protobuf:"varint,3,opt,name=size,proto3" json:"size,omitempty"`
	// transaction list
	Txs []*common.Transaction `protobuf:"bytes,4,rep,name=txs,proto3" json:"txs,omitempty"`
	// Map: transaction ID mapping record( key: transaction ID, value: transaction index in txs)
	TxIdsMap map[string]int32 `protobuf:"bytes,5,rep,name=tx_ids_map,json=txIdsMap,proto3" json:"tx_ids_map,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
	// batch signature
	Endorsement *common.EndorsementEntry `protobuf:"bytes,6,opt,name=endorsement,proto3" json:"endorsement,omitempty"`
}

func (m *TxBatch) Reset()         { *m = TxBatch{} }
func (m *TxBatch) String() string { return proto.CompactTextString(m) }
func (*TxBatch) ProtoMessage()    {}
func (*TxBatch) Descriptor() ([]byte, []int) {
	return fileDescriptor_0bc7127f197678cd, []int{3}
}
func (m *TxBatch) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TxBatch) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TxBatch.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TxBatch) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TxBatch.Merge(m, src)
}
func (m *TxBatch) XXX_Size() int {
	return m.Size()
}
func (m *TxBatch) XXX_DiscardUnknown() {
	xxx_messageInfo_TxBatch.DiscardUnknown(m)
}

var xxx_messageInfo_TxBatch proto.InternalMessageInfo

func (m *TxBatch) GetBatchId() string {
	if m != nil {
		return m.BatchId
	}
	return ""
}

func (m *TxBatch) GetSize_() int32 {
	if m != nil {
		return m.Size_
	}
	return 0
}

func (m *TxBatch) GetTxs() []*common.Transaction {
	if m != nil {
		return m.Txs
	}
	return nil
}

func (m *TxBatch) GetTxIdsMap() map[string]int32 {
	if m != nil {
		return m.TxIdsMap
	}
	return nil
}

func (m *TxBatch) GetEndorsement() *common.EndorsementEntry {
	if m != nil {
		return m.Endorsement
	}
	return nil
}

// transaction recover request, used to request transactions from proposer
type TxRecoverRequest struct {
	// node id
	NodeId string `protobuf:"bytes,1,opt,name=node_id,json=nodeId,proto3" json:"node_id,omitempty"`
	// height
	Height uint64 `protobuf:"varint,2,opt,name=height,proto3" json:"height,omitempty"`
	// txId list
	TxIds []string `protobuf:"bytes,3,rep,name=tx_ids,json=txIds,proto3" json:"tx_ids,omitempty"`
}

func (m *TxRecoverRequest) Reset()         { *m = TxRecoverRequest{} }
func (m *TxRecoverRequest) String() string { return proto.CompactTextString(m) }
func (*TxRecoverRequest) ProtoMessage()    {}
func (*TxRecoverRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_0bc7127f197678cd, []int{4}
}
func (m *TxRecoverRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TxRecoverRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TxRecoverRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TxRecoverRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TxRecoverRequest.Merge(m, src)
}
func (m *TxRecoverRequest) XXX_Size() int {
	return m.Size()
}
func (m *TxRecoverRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_TxRecoverRequest.DiscardUnknown(m)
}

var xxx_messageInfo_TxRecoverRequest proto.InternalMessageInfo

func (m *TxRecoverRequest) GetNodeId() string {
	if m != nil {
		return m.NodeId
	}
	return ""
}

func (m *TxRecoverRequest) GetHeight() uint64 {
	if m != nil {
		return m.Height
	}
	return 0
}

func (m *TxRecoverRequest) GetTxIds() []string {
	if m != nil {
		return m.TxIds
	}
	return nil
}

// transaction recover response, used to return transactions to the validators by proposer
type TxRecoverResponse struct {
	// node id
	NodeId string `protobuf:"bytes,1,opt,name=node_id,json=nodeId,proto3" json:"node_id,omitempty"`
	// height
	Height uint64 `protobuf:"varint,2,opt,name=height,proto3" json:"height,omitempty"`
	// tx list
	Txs []*common.Transaction `protobuf:"bytes,3,rep,name=txs,proto3" json:"txs,omitempty"`
}

func (m *TxRecoverResponse) Reset()         { *m = TxRecoverResponse{} }
func (m *TxRecoverResponse) String() string { return proto.CompactTextString(m) }
func (*TxRecoverResponse) ProtoMessage()    {}
func (*TxRecoverResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_0bc7127f197678cd, []int{5}
}
func (m *TxRecoverResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TxRecoverResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TxRecoverResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TxRecoverResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TxRecoverResponse.Merge(m, src)
}
func (m *TxRecoverResponse) XXX_Size() int {
	return m.Size()
}
func (m *TxRecoverResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_TxRecoverResponse.DiscardUnknown(m)
}

var xxx_messageInfo_TxRecoverResponse proto.InternalMessageInfo

func (m *TxRecoverResponse) GetNodeId() string {
	if m != nil {
		return m.NodeId
	}
	return ""
}

func (m *TxRecoverResponse) GetHeight() uint64 {
	if m != nil {
		return m.Height
	}
	return 0
}

func (m *TxRecoverResponse) GetTxs() []*common.Transaction {
	if m != nil {
		return m.Txs
	}
	return nil
}

// batch recover request, used to request batch from proposer
type TxBatchRecoverRequest struct {
	// proposer node id
	NodeId string `protobuf:"bytes,1,opt,name=node_id,json=nodeId,proto3" json:"node_id,omitempty"`
	// height
	Height uint64 `protobuf:"varint,2,opt,name=height,proto3" json:"height,omitempty"`
	// batchId list
	BatchIds []string `protobuf:"bytes,3,rep,name=batch_ids,json=batchIds,proto3" json:"batch_ids,omitempty"`
}

func (m *TxBatchRecoverRequest) Reset()         { *m = TxBatchRecoverRequest{} }
func (m *TxBatchRecoverRequest) String() string { return proto.CompactTextString(m) }
func (*TxBatchRecoverRequest) ProtoMessage()    {}
func (*TxBatchRecoverRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_0bc7127f197678cd, []int{6}
}
func (m *TxBatchRecoverRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TxBatchRecoverRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TxBatchRecoverRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TxBatchRecoverRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TxBatchRecoverRequest.Merge(m, src)
}
func (m *TxBatchRecoverRequest) XXX_Size() int {
	return m.Size()
}
func (m *TxBatchRecoverRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_TxBatchRecoverRequest.DiscardUnknown(m)
}

var xxx_messageInfo_TxBatchRecoverRequest proto.InternalMessageInfo

func (m *TxBatchRecoverRequest) GetNodeId() string {
	if m != nil {
		return m.NodeId
	}
	return ""
}

func (m *TxBatchRecoverRequest) GetHeight() uint64 {
	if m != nil {
		return m.Height
	}
	return 0
}

func (m *TxBatchRecoverRequest) GetBatchIds() []string {
	if m != nil {
		return m.BatchIds
	}
	return nil
}

// batch recover response, used to return transactions to the validators by proposer
type TxBatchRecoverResponse struct {
	// node id
	NodeId string `protobuf:"bytes,1,opt,name=node_id,json=nodeId,proto3" json:"node_id,omitempty"`
	// height
	Height uint64 `protobuf:"varint,2,opt,name=height,proto3" json:"height,omitempty"`
	// batch list
	TxBatches []*TxBatch `protobuf:"bytes,3,rep,name=tx_batches,json=txBatches,proto3" json:"tx_batches,omitempty"`
}

func (m *TxBatchRecoverResponse) Reset()         { *m = TxBatchRecoverResponse{} }
func (m *TxBatchRecoverResponse) String() string { return proto.CompactTextString(m) }
func (*TxBatchRecoverResponse) ProtoMessage()    {}
func (*TxBatchRecoverResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_0bc7127f197678cd, []int{7}
}
func (m *TxBatchRecoverResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TxBatchRecoverResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TxBatchRecoverResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TxBatchRecoverResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TxBatchRecoverResponse.Merge(m, src)
}
func (m *TxBatchRecoverResponse) XXX_Size() int {
	return m.Size()
}
func (m *TxBatchRecoverResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_TxBatchRecoverResponse.DiscardUnknown(m)
}

var xxx_messageInfo_TxBatchRecoverResponse proto.InternalMessageInfo

func (m *TxBatchRecoverResponse) GetNodeId() string {
	if m != nil {
		return m.NodeId
	}
	return ""
}

func (m *TxBatchRecoverResponse) GetHeight() uint64 {
	if m != nil {
		return m.Height
	}
	return 0
}

func (m *TxBatchRecoverResponse) GetTxBatches() []*TxBatch {
	if m != nil {
		return m.TxBatches
	}
	return nil
}

// rpc get pool status request
type GetPoolStatusRequest struct {
	// blockchain identifier
	ChainId string `protobuf:"bytes,1,opt,name=chain_id,json=chainId,proto3" json:"chain_id,omitempty"`
}

func (m *GetPoolStatusRequest) Reset()         { *m = GetPoolStatusRequest{} }
func (m *GetPoolStatusRequest) String() string { return proto.CompactTextString(m) }
func (*GetPoolStatusRequest) ProtoMessage()    {}
func (*GetPoolStatusRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_0bc7127f197678cd, []int{8}
}
func (m *GetPoolStatusRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetPoolStatusRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetPoolStatusRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetPoolStatusRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetPoolStatusRequest.Merge(m, src)
}
func (m *GetPoolStatusRequest) XXX_Size() int {
	return m.Size()
}
func (m *GetPoolStatusRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetPoolStatusRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetPoolStatusRequest proto.InternalMessageInfo

func (m *GetPoolStatusRequest) GetChainId() string {
	if m != nil {
		return m.ChainId
	}
	return ""
}

// rpc get tx ids by type and stage request
type GetTxIdsByTypeAndStageRequest struct {
	// blockchain identifier
	ChainId string `protobuf:"bytes,1,opt,name=chain_id,json=chainId,proto3" json:"chain_id,omitempty"`
	// tx type
	TxType TxType `protobuf:"varint,2,opt,name=tx_type,json=txType,proto3,enum=txpool.TxType" json:"tx_type,omitempty"`
	// tx stage
	TxStage TxStage `protobuf:"varint,3,opt,name=tx_stage,json=txStage,proto3,enum=txpool.TxStage" json:"tx_stage,omitempty"`
}

func (m *GetTxIdsByTypeAndStageRequest) Reset()         { *m = GetTxIdsByTypeAndStageRequest{} }
func (m *GetTxIdsByTypeAndStageRequest) String() string { return proto.CompactTextString(m) }
func (*GetTxIdsByTypeAndStageRequest) ProtoMessage()    {}
func (*GetTxIdsByTypeAndStageRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_0bc7127f197678cd, []int{9}
}
func (m *GetTxIdsByTypeAndStageRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetTxIdsByTypeAndStageRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetTxIdsByTypeAndStageRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetTxIdsByTypeAndStageRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetTxIdsByTypeAndStageRequest.Merge(m, src)
}
func (m *GetTxIdsByTypeAndStageRequest) XXX_Size() int {
	return m.Size()
}
func (m *GetTxIdsByTypeAndStageRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetTxIdsByTypeAndStageRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetTxIdsByTypeAndStageRequest proto.InternalMessageInfo

func (m *GetTxIdsByTypeAndStageRequest) GetChainId() string {
	if m != nil {
		return m.ChainId
	}
	return ""
}

func (m *GetTxIdsByTypeAndStageRequest) GetTxType() TxType {
	if m != nil {
		return m.TxType
	}
	return TxType_UNKNOWN_TYPE
}

func (m *GetTxIdsByTypeAndStageRequest) GetTxStage() TxStage {
	if m != nil {
		return m.TxStage
	}
	return TxStage_UNKNOWN_STAGE
}

// rpc get tx ids by type and stage response
type GetTxIdsByTypeAndStageResponse struct {
	// tx id list
	TxIds []string `protobuf:"bytes,1,rep,name=tx_ids,json=txIds,proto3" json:"tx_ids,omitempty"`
}

func (m *GetTxIdsByTypeAndStageResponse) Reset()         { *m = GetTxIdsByTypeAndStageResponse{} }
func (m *GetTxIdsByTypeAndStageResponse) String() string { return proto.CompactTextString(m) }
func (*GetTxIdsByTypeAndStageResponse) ProtoMessage()    {}
func (*GetTxIdsByTypeAndStageResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_0bc7127f197678cd, []int{10}
}
func (m *GetTxIdsByTypeAndStageResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetTxIdsByTypeAndStageResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetTxIdsByTypeAndStageResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetTxIdsByTypeAndStageResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetTxIdsByTypeAndStageResponse.Merge(m, src)
}
func (m *GetTxIdsByTypeAndStageResponse) XXX_Size() int {
	return m.Size()
}
func (m *GetTxIdsByTypeAndStageResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GetTxIdsByTypeAndStageResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GetTxIdsByTypeAndStageResponse proto.InternalMessageInfo

func (m *GetTxIdsByTypeAndStageResponse) GetTxIds() []string {
	if m != nil {
		return m.TxIds
	}
	return nil
}

// rpc get txs in pool by tx ids request
type GetTxsInPoolByTxIdsRequest struct {
	// blockchain identifier
	ChainId string `protobuf:"bytes,1,opt,name=chain_id,json=chainId,proto3" json:"chain_id,omitempty"`
	// tx id list
	TxIds []string `protobuf:"bytes,2,rep,name=tx_ids,json=txIds,proto3" json:"tx_ids,omitempty"`
}

func (m *GetTxsInPoolByTxIdsRequest) Reset()         { *m = GetTxsInPoolByTxIdsRequest{} }
func (m *GetTxsInPoolByTxIdsRequest) String() string { return proto.CompactTextString(m) }
func (*GetTxsInPoolByTxIdsRequest) ProtoMessage()    {}
func (*GetTxsInPoolByTxIdsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_0bc7127f197678cd, []int{11}
}
func (m *GetTxsInPoolByTxIdsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetTxsInPoolByTxIdsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetTxsInPoolByTxIdsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetTxsInPoolByTxIdsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetTxsInPoolByTxIdsRequest.Merge(m, src)
}
func (m *GetTxsInPoolByTxIdsRequest) XXX_Size() int {
	return m.Size()
}
func (m *GetTxsInPoolByTxIdsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetTxsInPoolByTxIdsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetTxsInPoolByTxIdsRequest proto.InternalMessageInfo

func (m *GetTxsInPoolByTxIdsRequest) GetChainId() string {
	if m != nil {
		return m.ChainId
	}
	return ""
}

func (m *GetTxsInPoolByTxIdsRequest) GetTxIds() []string {
	if m != nil {
		return m.TxIds
	}
	return nil
}

// rpc get txs in pool by tx ids response
type GetTxsInPoolByTxIdsResponse struct {
	// txs in the tx pool
	Txs []*common.Transaction `protobuf:"bytes,1,rep,name=txs,proto3" json:"txs,omitempty"`
	// tx ids of txs that are not in the tx pool
	TxIds []string `protobuf:"bytes,2,rep,name=tx_ids,json=txIds,proto3" json:"tx_ids,omitempty"`
}

func (m *GetTxsInPoolByTxIdsResponse) Reset()         { *m = GetTxsInPoolByTxIdsResponse{} }
func (m *GetTxsInPoolByTxIdsResponse) String() string { return proto.CompactTextString(m) }
func (*GetTxsInPoolByTxIdsResponse) ProtoMessage()    {}
func (*GetTxsInPoolByTxIdsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_0bc7127f197678cd, []int{12}
}
func (m *GetTxsInPoolByTxIdsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetTxsInPoolByTxIdsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetTxsInPoolByTxIdsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetTxsInPoolByTxIdsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetTxsInPoolByTxIdsResponse.Merge(m, src)
}
func (m *GetTxsInPoolByTxIdsResponse) XXX_Size() int {
	return m.Size()
}
func (m *GetTxsInPoolByTxIdsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GetTxsInPoolByTxIdsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GetTxsInPoolByTxIdsResponse proto.InternalMessageInfo

func (m *GetTxsInPoolByTxIdsResponse) GetTxs() []*common.Transaction {
	if m != nil {
		return m.Txs
	}
	return nil
}

func (m *GetTxsInPoolByTxIdsResponse) GetTxIds() []string {
	if m != nil {
		return m.TxIds
	}
	return nil
}

func init() {
	proto.RegisterEnum("txpool.SignalType", SignalType_name, SignalType_value)
	proto.RegisterEnum("txpool.TxType", TxType_name, TxType_value)
	proto.RegisterEnum("txpool.TxStage", TxStage_name, TxStage_value)
	proto.RegisterEnum("txpool.TxPoolMsgType", TxPoolMsgType_name, TxPoolMsgType_value)
	proto.RegisterType((*TxPoolSignal)(nil), "txpool.TxPoolSignal")
	proto.RegisterType((*TxPoolStatus)(nil), "txpool.TxPoolStatus")
	proto.RegisterType((*TxPoolMsg)(nil), "txpool.TxPoolMsg")
	proto.RegisterType((*TxBatch)(nil), "txpool.TxBatch")
	proto.RegisterMapType((map[string]int32)(nil), "txpool.TxBatch.TxIdsMapEntry")
	proto.RegisterType((*TxRecoverRequest)(nil), "txpool.TxRecoverRequest")
	proto.RegisterType((*TxRecoverResponse)(nil), "txpool.TxRecoverResponse")
	proto.RegisterType((*TxBatchRecoverRequest)(nil), "txpool.TxBatchRecoverRequest")
	proto.RegisterType((*TxBatchRecoverResponse)(nil), "txpool.TxBatchRecoverResponse")
	proto.RegisterType((*GetPoolStatusRequest)(nil), "txpool.GetPoolStatusRequest")
	proto.RegisterType((*GetTxIdsByTypeAndStageRequest)(nil), "txpool.GetTxIdsByTypeAndStageRequest")
	proto.RegisterType((*GetTxIdsByTypeAndStageResponse)(nil), "txpool.GetTxIdsByTypeAndStageResponse")
	proto.RegisterType((*GetTxsInPoolByTxIdsRequest)(nil), "txpool.GetTxsInPoolByTxIdsRequest")
	proto.RegisterType((*GetTxsInPoolByTxIdsResponse)(nil), "txpool.GetTxsInPoolByTxIdsResponse")
}

func init() { proto.RegisterFile("txpool/transaction_pool.proto", fileDescriptor_0bc7127f197678cd) }

var fileDescriptor_0bc7127f197678cd = []byte{
	// 976 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xa4, 0x55, 0xcb, 0x6e, 0xdb, 0x46,
	0x14, 0x35, 0x49, 0x5b, 0x8f, 0x2b, 0xd9, 0x61, 0x26, 0xb6, 0xcb, 0x3a, 0xb0, 0x60, 0x10, 0x28,
	0xea, 0x08, 0x88, 0x84, 0x2a, 0x40, 0x5b, 0x24, 0x2b, 0x49, 0x65, 0x54, 0x22, 0x16, 0x29, 0x53,
	0x74, 0xda, 0xa6, 0x68, 0x09, 0x5a, 0x9c, 0xca, 0x84, 0x25, 0x92, 0x11, 0x47, 0x06, 0x95, 0x9f,
	0x68, 0x37, 0xfd, 0xa3, 0x2e, 0xba, 0xcc, 0xb2, 0xcb, 0xc2, 0xfe, 0x91, 0x62, 0x66, 0x48, 0x93,
	0x72, 0xd3, 0xa6, 0x8f, 0x95, 0xe6, 0xf2, 0x9e, 0x7b, 0xce, 0x7d, 0xcd, 0x08, 0x0e, 0x49, 0x12,
	0x85, 0xe1, 0xac, 0x4d, 0x16, 0x6e, 0x10, 0xbb, 0x13, 0xe2, 0x87, 0x81, 0x43, 0x3f, 0xb4, 0xa2,
	0x45, 0x48, 0x42, 0x54, 0xe2, 0xee, 0x03, 0x65, 0x12, 0xce, 0xe7, 0x61, 0x50, 0x84, 0x71, 0xc4,
	0xc1, 0x6e, 0xea, 0x59, 0xe0, 0xd7, 0x4b, 0x1c, 0x13, 0xfe, 0x55, 0xfd, 0x1e, 0xea, 0x76, 0x32,
	0x0a, 0xc3, 0xd9, 0xd8, 0x9f, 0x06, 0xee, 0x0c, 0x3d, 0x81, 0x5a, 0xcc, 0x4e, 0x0e, 0x59, 0x45,
	0x58, 0x11, 0x8e, 0x84, 0xe3, 0x9d, 0x0e, 0x6a, 0x71, 0xf6, 0x16, 0x07, 0xd9, 0xab, 0x08, 0x5b,
	0x10, 0xdf, 0x9e, 0xd1, 0x87, 0x50, 0x99, 0x5c, 0xb8, 0x7e, 0xe0, 0xf8, 0x9e, 0x22, 0x1e, 0x09,
	0xc7, 0x55, 0xab, 0xcc, 0x6c, 0xdd, 0x53, 0x7f, 0x11, 0x6f, 0x05, 0x88, 0x4b, 0x96, 0x31, 0x7a,
	0x0c, 0x0f, 0x26, 0x61, 0xf0, 0x83, 0x3f, 0x75, 0x48, 0xc2, 0x0a, 0x70, 0x62, 0xff, 0x0d, 0x17,
	0xda, 0xb2, 0x64, 0xee, 0xca, 0x32, 0x7a, 0x83, 0x39, 0x9c, 0xe6, 0xbd, 0x0e, 0x17, 0x33, 0x38,
	0x75, 0x15, 0xe0, 0x1d, 0xd8, 0xcf, 0xd9, 0x83, 0xe5, 0xdc, 0xf1, 0x03, 0xe7, 0xf5, 0x12, 0x2f,
	0xb1, 0x22, 0xb1, 0x08, 0x94, 0x09, 0x18, 0xcb, 0xb9, 0x1e, 0x9c, 0x52, 0x0f, 0xfa, 0x14, 0x94,
	0x3f, 0xc5, 0x44, 0x38, 0xf0, 0xfc, 0x60, 0xaa, 0x6c, 0xb2, 0xa8, 0xdd, 0xb5, 0xa8, 0x11, 0xf7,
	0x71, 0xad, 0x2c, 0xb5, 0x35, 0xad, 0xad, 0x4c, 0x8b, 0x67, 0x77, 0x57, 0xeb, 0x4e, 0x4c, 0xa6,
	0x55, 0xca, 0xb4, 0x0a, 0x51, 0xa9, 0x96, 0x3a, 0x82, 0x2a, 0xaf, 0x72, 0x18, 0x4f, 0xd1, 0x23,
	0xd8, 0x2c, 0x0c, 0x67, 0x2f, 0x1b, 0xce, 0x2d, 0x80, 0xcd, 0x87, 0x41, 0x90, 0x02, 0xe5, 0xc8,
	0x5d, 0xcd, 0x42, 0x97, 0x0f, 0xa6, 0x6e, 0x65, 0xa6, 0xfa, 0xb3, 0x08, 0x65, 0x3b, 0xe9, 0xb9,
	0x64, 0x72, 0x41, 0xe7, 0x77, 0x4e, 0x0f, 0x74, 0x7e, 0x02, 0x9f, 0x1f, 0xb3, 0x75, 0x0f, 0x21,
	0xd8, 0x64, 0x0d, 0xe7, 0xed, 0x63, 0x67, 0xf4, 0x11, 0x48, 0x24, 0x89, 0x95, 0xcd, 0x23, 0xe9,
	0xb8, 0xd6, 0x79, 0xd0, 0xe2, 0x09, 0xb7, 0xec, 0x7c, 0xe3, 0x2c, 0xea, 0x47, 0xcf, 0x00, 0x48,
	0xe2, 0xf8, 0x5e, 0xec, 0xcc, 0xdd, 0x48, 0xd9, 0x62, 0xe8, 0xc3, 0x3c, 0x59, 0x26, 0xdd, 0xb2,
	0x13, 0xdd, 0x8b, 0x87, 0x6e, 0xa4, 0x05, 0x64, 0xb1, 0xb2, 0x2a, 0x24, 0x35, 0xd1, 0x53, 0xa8,
	0xe1, 0xc0, 0x0b, 0x17, 0x31, 0x9e, 0xe3, 0x80, 0xb0, 0xde, 0xd4, 0x3a, 0x4a, 0xa6, 0xa5, 0xe5,
	0x2e, 0x1e, 0x58, 0x04, 0x1f, 0x3c, 0x83, 0xed, 0x35, 0x5a, 0x24, 0x83, 0x74, 0x89, 0x57, 0x69,
	0x69, 0xf4, 0x88, 0x76, 0x61, 0xeb, 0xca, 0x9d, 0x2d, 0xb3, 0x45, 0xe2, 0xc6, 0x53, 0xf1, 0x73,
	0x41, 0x7d, 0x05, 0xb2, 0x9d, 0x58, 0x78, 0x12, 0x5e, 0xe1, 0x85, 0xc5, 0xaf, 0x0a, 0xfa, 0x00,
	0xca, 0x41, 0xe8, 0xe1, 0xbc, 0x3d, 0x25, 0x6a, 0xea, 0x1e, 0xda, 0x87, 0xd2, 0x05, 0xf6, 0xa7,
	0x17, 0x84, 0xf1, 0x6c, 0x5a, 0xa9, 0x85, 0xf6, 0xa0, 0xc4, 0x4b, 0x57, 0xa4, 0x23, 0xe9, 0xb8,
	0x6a, 0x6d, 0xb1, 0xba, 0xd4, 0x4b, 0xb8, 0x5f, 0xe0, 0x8e, 0xa3, 0x30, 0x88, 0xf1, 0xbf, 0x27,
	0x4f, 0xdb, 0x2f, 0xfd, 0x7d, 0xfb, 0x55, 0x0c, 0x7b, 0x69, 0x93, 0xff, 0x6f, 0x35, 0x0f, 0xa1,
	0x9a, 0xad, 0x47, 0x56, 0x50, 0x25, 0xdd, 0x8f, 0x58, 0x5d, 0xc1, 0xfe, 0x5d, 0x99, 0xff, 0x5a,
	0x58, 0x8b, 0x2d, 0x0c, 0x63, 0xc6, 0x59, 0x7d, 0xf7, 0xee, 0x2c, 0x8c, 0x55, 0x25, 0xfc, 0x80,
	0x63, 0xf5, 0x13, 0xd8, 0x1d, 0x60, 0x92, 0xbf, 0x2d, 0x59, 0x81, 0xc5, 0xe7, 0x48, 0x58, 0x7f,
	0x8e, 0x7e, 0x14, 0xe0, 0x70, 0x80, 0x09, 0x5b, 0x8f, 0xde, 0x8a, 0x5e, 0x94, 0x6e, 0xe0, 0x8d,
	0x89, 0x3b, 0xc5, 0xef, 0x0f, 0x46, 0x1f, 0x43, 0x99, 0x24, 0xfc, 0x5d, 0x14, 0xd9, 0xd5, 0xdb,
	0xc9, 0x93, 0x63, 0x77, 0xae, 0x44, 0xd8, 0x2f, 0x6a, 0x42, 0x85, 0x24, 0x4e, 0x4c, 0x69, 0xd9,
	0xc5, 0xd9, 0x29, 0x96, 0xc1, 0xd5, 0xca, 0x84, 0x1f, 0xd4, 0xcf, 0xa0, 0xf1, 0x57, 0x09, 0xa5,
	0x7d, 0xcc, 0x97, 0x49, 0x28, 0x2e, 0x93, 0x01, 0x07, 0x2c, 0x30, 0xd6, 0x03, 0xda, 0x82, 0xde,
	0x8a, 0x71, 0xfc, 0x83, 0x32, 0x72, 0x3e, 0xb1, 0xc8, 0xf7, 0x2d, 0x3c, 0x7c, 0x27, 0x5f, 0x9a,
	0x45, 0xba, 0x75, 0xc2, 0x7b, 0x2e, 0xfd, 0xbb, 0xc9, 0x9b, 0x1a, 0x40, 0xfe, 0xdf, 0x81, 0xea,
	0x50, 0x31, 0x4c, 0x47, 0x7b, 0xa9, 0x19, 0xb6, 0xbc, 0x81, 0xf6, 0x01, 0xd9, 0x56, 0xd7, 0x18,
	0x77, 0xfb, 0xb6, 0x6e, 0x1a, 0x8e, 0x6e, 0xf4, 0xcd, 0xa1, 0x26, 0x0b, 0xe8, 0x3e, 0x6c, 0xf7,
	0x4e, 0xcc, 0xfe, 0x0b, 0x67, 0x64, 0x99, 0x23, 0x73, 0xac, 0xc9, 0x62, 0xf3, 0x39, 0x94, 0x78,
	0xab, 0x91, 0x0c, 0xf5, 0x33, 0xe3, 0x85, 0x61, 0x7e, 0x65, 0x38, 0xf6, 0x37, 0x23, 0x4d, 0xde,
	0x40, 0xdb, 0x50, 0xed, 0x9b, 0xc6, 0x73, 0x7d, 0xe0, 0xd8, 0x5f, 0xcb, 0x02, 0x37, 0x87, 0x43,
	0xd3, 0xa0, 0xa6, 0x48, 0x25, 0xbb, 0x27, 0x27, 0x1c, 0x2b, 0x35, 0x75, 0xfa, 0xf6, 0xb1, 0x2e,
	0x53, 0x95, 0x8c, 0x68, 0x6c, 0x77, 0x07, 0x94, 0xa9, 0x0e, 0x15, 0xdd, 0x70, 0x4e, 0xcf, 0xb4,
	0x33, 0x9a, 0xc6, 0x0e, 0x80, 0x6e, 0x38, 0x23, 0xcd, 0xf8, 0x42, 0x37, 0x06, 0xb2, 0x48, 0x89,
	0x29, 0x13, 0x07, 0x4b, 0x4d, 0x93, 0x3e, 0x36, 0x85, 0x87, 0x97, 0xfa, 0xc7, 0xba, 0x31, 0x38,
	0xd1, 0xa8, 0x30, 0x23, 0xeb, 0x75, 0xed, 0xfe, 0x97, 0x3c, 0xab, 0x7b, 0x50, 0xb3, 0xb4, 0xbe,
	0xf9, 0x52, 0xb3, 0x1c, 0x4b, 0x3b, 0x95, 0x45, 0x5a, 0x47, 0xfe, 0x61, 0x3c, 0x92, 0xa5, 0xde,
	0x77, 0xbf, 0x5e, 0x37, 0x84, 0xb7, 0xd7, 0x0d, 0xe1, 0xf7, 0xeb, 0x86, 0xf0, 0xd3, 0x4d, 0x63,
	0xe3, 0xed, 0x4d, 0x63, 0xe3, 0xb7, 0x9b, 0xc6, 0x06, 0x28, 0xe1, 0x62, 0xda, 0x62, 0x53, 0x9c,
	0xbb, 0x97, 0x78, 0xd1, 0x8a, 0xce, 0xd3, 0xad, 0x7a, 0xf5, 0xa8, 0xf0, 0x35, 0x5c, 0x4c, 0xdb,
	0xb9, 0xd9, 0x8e, 0xce, 0x1f, 0x4f, 0xc3, 0xf6, 0x55, 0xa7, 0xcd, 0xa1, 0xe7, 0x25, 0xf6, 0xbf,
	0xff, 0xe4, 0x8f, 0x00, 0x00, 0x00, 0xff, 0xff, 0xee, 0xb4, 0xa1, 0x32, 0x50, 0x08, 0x00, 0x00,
}

func (m *TxPoolSignal) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TxPoolSignal) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TxPoolSignal) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ChainId) > 0 {
		i -= len(m.ChainId)
		copy(dAtA[i:], m.ChainId)
		i = encodeVarintTransactionPool(dAtA, i, uint64(len(m.ChainId)))
		i--
		dAtA[i] = 0x12
	}
	if m.SignalType != 0 {
		i = encodeVarintTransactionPool(dAtA, i, uint64(m.SignalType))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *TxPoolStatus) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TxPoolStatus) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TxPoolStatus) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.CommonTxNumInPending != 0 {
		i = encodeVarintTransactionPool(dAtA, i, uint64(m.CommonTxNumInPending))
		i--
		dAtA[i] = 0x30
	}
	if m.CommonTxNumInQueue != 0 {
		i = encodeVarintTransactionPool(dAtA, i, uint64(m.CommonTxNumInQueue))
		i--
		dAtA[i] = 0x28
	}
	if m.ConfigTxNumInPending != 0 {
		i = encodeVarintTransactionPool(dAtA, i, uint64(m.ConfigTxNumInPending))
		i--
		dAtA[i] = 0x20
	}
	if m.ConfigTxNumInQueue != 0 {
		i = encodeVarintTransactionPool(dAtA, i, uint64(m.ConfigTxNumInQueue))
		i--
		dAtA[i] = 0x18
	}
	if m.CommonTxPoolSize != 0 {
		i = encodeVarintTransactionPool(dAtA, i, uint64(m.CommonTxPoolSize))
		i--
		dAtA[i] = 0x10
	}
	if m.ConfigTxPoolSize != 0 {
		i = encodeVarintTransactionPool(dAtA, i, uint64(m.ConfigTxPoolSize))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *TxPoolMsg) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TxPoolMsg) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TxPoolMsg) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Payload) > 0 {
		i -= len(m.Payload)
		copy(dAtA[i:], m.Payload)
		i = encodeVarintTransactionPool(dAtA, i, uint64(len(m.Payload)))
		i--
		dAtA[i] = 0x12
	}
	if m.Type != 0 {
		i = encodeVarintTransactionPool(dAtA, i, uint64(m.Type))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *TxBatch) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TxBatch) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TxBatch) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Endorsement != nil {
		{
			size, err := m.Endorsement.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTransactionPool(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x32
	}
	if len(m.TxIdsMap) > 0 {
		for k := range m.TxIdsMap {
			v := m.TxIdsMap[k]
			baseI := i
			i = encodeVarintTransactionPool(dAtA, i, uint64(v))
			i--
			dAtA[i] = 0x10
			i -= len(k)
			copy(dAtA[i:], k)
			i = encodeVarintTransactionPool(dAtA, i, uint64(len(k)))
			i--
			dAtA[i] = 0xa
			i = encodeVarintTransactionPool(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0x2a
		}
	}
	if len(m.Txs) > 0 {
		for iNdEx := len(m.Txs) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Txs[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTransactionPool(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x22
		}
	}
	if m.Size_ != 0 {
		i = encodeVarintTransactionPool(dAtA, i, uint64(m.Size_))
		i--
		dAtA[i] = 0x18
	}
	if len(m.BatchId) > 0 {
		i -= len(m.BatchId)
		copy(dAtA[i:], m.BatchId)
		i = encodeVarintTransactionPool(dAtA, i, uint64(len(m.BatchId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *TxRecoverRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TxRecoverRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TxRecoverRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.TxIds) > 0 {
		for iNdEx := len(m.TxIds) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.TxIds[iNdEx])
			copy(dAtA[i:], m.TxIds[iNdEx])
			i = encodeVarintTransactionPool(dAtA, i, uint64(len(m.TxIds[iNdEx])))
			i--
			dAtA[i] = 0x1a
		}
	}
	if m.Height != 0 {
		i = encodeVarintTransactionPool(dAtA, i, uint64(m.Height))
		i--
		dAtA[i] = 0x10
	}
	if len(m.NodeId) > 0 {
		i -= len(m.NodeId)
		copy(dAtA[i:], m.NodeId)
		i = encodeVarintTransactionPool(dAtA, i, uint64(len(m.NodeId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *TxRecoverResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TxRecoverResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TxRecoverResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Txs) > 0 {
		for iNdEx := len(m.Txs) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Txs[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTransactionPool(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1a
		}
	}
	if m.Height != 0 {
		i = encodeVarintTransactionPool(dAtA, i, uint64(m.Height))
		i--
		dAtA[i] = 0x10
	}
	if len(m.NodeId) > 0 {
		i -= len(m.NodeId)
		copy(dAtA[i:], m.NodeId)
		i = encodeVarintTransactionPool(dAtA, i, uint64(len(m.NodeId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *TxBatchRecoverRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TxBatchRecoverRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TxBatchRecoverRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.BatchIds) > 0 {
		for iNdEx := len(m.BatchIds) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.BatchIds[iNdEx])
			copy(dAtA[i:], m.BatchIds[iNdEx])
			i = encodeVarintTransactionPool(dAtA, i, uint64(len(m.BatchIds[iNdEx])))
			i--
			dAtA[i] = 0x1a
		}
	}
	if m.Height != 0 {
		i = encodeVarintTransactionPool(dAtA, i, uint64(m.Height))
		i--
		dAtA[i] = 0x10
	}
	if len(m.NodeId) > 0 {
		i -= len(m.NodeId)
		copy(dAtA[i:], m.NodeId)
		i = encodeVarintTransactionPool(dAtA, i, uint64(len(m.NodeId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *TxBatchRecoverResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TxBatchRecoverResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TxBatchRecoverResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.TxBatches) > 0 {
		for iNdEx := len(m.TxBatches) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.TxBatches[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTransactionPool(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1a
		}
	}
	if m.Height != 0 {
		i = encodeVarintTransactionPool(dAtA, i, uint64(m.Height))
		i--
		dAtA[i] = 0x10
	}
	if len(m.NodeId) > 0 {
		i -= len(m.NodeId)
		copy(dAtA[i:], m.NodeId)
		i = encodeVarintTransactionPool(dAtA, i, uint64(len(m.NodeId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *GetPoolStatusRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetPoolStatusRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetPoolStatusRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ChainId) > 0 {
		i -= len(m.ChainId)
		copy(dAtA[i:], m.ChainId)
		i = encodeVarintTransactionPool(dAtA, i, uint64(len(m.ChainId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *GetTxIdsByTypeAndStageRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetTxIdsByTypeAndStageRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetTxIdsByTypeAndStageRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.TxStage != 0 {
		i = encodeVarintTransactionPool(dAtA, i, uint64(m.TxStage))
		i--
		dAtA[i] = 0x18
	}
	if m.TxType != 0 {
		i = encodeVarintTransactionPool(dAtA, i, uint64(m.TxType))
		i--
		dAtA[i] = 0x10
	}
	if len(m.ChainId) > 0 {
		i -= len(m.ChainId)
		copy(dAtA[i:], m.ChainId)
		i = encodeVarintTransactionPool(dAtA, i, uint64(len(m.ChainId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *GetTxIdsByTypeAndStageResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetTxIdsByTypeAndStageResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetTxIdsByTypeAndStageResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.TxIds) > 0 {
		for iNdEx := len(m.TxIds) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.TxIds[iNdEx])
			copy(dAtA[i:], m.TxIds[iNdEx])
			i = encodeVarintTransactionPool(dAtA, i, uint64(len(m.TxIds[iNdEx])))
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *GetTxsInPoolByTxIdsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetTxsInPoolByTxIdsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetTxsInPoolByTxIdsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.TxIds) > 0 {
		for iNdEx := len(m.TxIds) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.TxIds[iNdEx])
			copy(dAtA[i:], m.TxIds[iNdEx])
			i = encodeVarintTransactionPool(dAtA, i, uint64(len(m.TxIds[iNdEx])))
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.ChainId) > 0 {
		i -= len(m.ChainId)
		copy(dAtA[i:], m.ChainId)
		i = encodeVarintTransactionPool(dAtA, i, uint64(len(m.ChainId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *GetTxsInPoolByTxIdsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetTxsInPoolByTxIdsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetTxsInPoolByTxIdsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.TxIds) > 0 {
		for iNdEx := len(m.TxIds) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.TxIds[iNdEx])
			copy(dAtA[i:], m.TxIds[iNdEx])
			i = encodeVarintTransactionPool(dAtA, i, uint64(len(m.TxIds[iNdEx])))
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.Txs) > 0 {
		for iNdEx := len(m.Txs) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Txs[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTransactionPool(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func encodeVarintTransactionPool(dAtA []byte, offset int, v uint64) int {
	offset -= sovTransactionPool(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *TxPoolSignal) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.SignalType != 0 {
		n += 1 + sovTransactionPool(uint64(m.SignalType))
	}
	l = len(m.ChainId)
	if l > 0 {
		n += 1 + l + sovTransactionPool(uint64(l))
	}
	return n
}

func (m *TxPoolStatus) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ConfigTxPoolSize != 0 {
		n += 1 + sovTransactionPool(uint64(m.ConfigTxPoolSize))
	}
	if m.CommonTxPoolSize != 0 {
		n += 1 + sovTransactionPool(uint64(m.CommonTxPoolSize))
	}
	if m.ConfigTxNumInQueue != 0 {
		n += 1 + sovTransactionPool(uint64(m.ConfigTxNumInQueue))
	}
	if m.ConfigTxNumInPending != 0 {
		n += 1 + sovTransactionPool(uint64(m.ConfigTxNumInPending))
	}
	if m.CommonTxNumInQueue != 0 {
		n += 1 + sovTransactionPool(uint64(m.CommonTxNumInQueue))
	}
	if m.CommonTxNumInPending != 0 {
		n += 1 + sovTransactionPool(uint64(m.CommonTxNumInPending))
	}
	return n
}

func (m *TxPoolMsg) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Type != 0 {
		n += 1 + sovTransactionPool(uint64(m.Type))
	}
	l = len(m.Payload)
	if l > 0 {
		n += 1 + l + sovTransactionPool(uint64(l))
	}
	return n
}

func (m *TxBatch) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.BatchId)
	if l > 0 {
		n += 1 + l + sovTransactionPool(uint64(l))
	}
	if m.Size_ != 0 {
		n += 1 + sovTransactionPool(uint64(m.Size_))
	}
	if len(m.Txs) > 0 {
		for _, e := range m.Txs {
			l = e.Size()
			n += 1 + l + sovTransactionPool(uint64(l))
		}
	}
	if len(m.TxIdsMap) > 0 {
		for k, v := range m.TxIdsMap {
			_ = k
			_ = v
			mapEntrySize := 1 + len(k) + sovTransactionPool(uint64(len(k))) + 1 + sovTransactionPool(uint64(v))
			n += mapEntrySize + 1 + sovTransactionPool(uint64(mapEntrySize))
		}
	}
	if m.Endorsement != nil {
		l = m.Endorsement.Size()
		n += 1 + l + sovTransactionPool(uint64(l))
	}
	return n
}

func (m *TxRecoverRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.NodeId)
	if l > 0 {
		n += 1 + l + sovTransactionPool(uint64(l))
	}
	if m.Height != 0 {
		n += 1 + sovTransactionPool(uint64(m.Height))
	}
	if len(m.TxIds) > 0 {
		for _, s := range m.TxIds {
			l = len(s)
			n += 1 + l + sovTransactionPool(uint64(l))
		}
	}
	return n
}

func (m *TxRecoverResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.NodeId)
	if l > 0 {
		n += 1 + l + sovTransactionPool(uint64(l))
	}
	if m.Height != 0 {
		n += 1 + sovTransactionPool(uint64(m.Height))
	}
	if len(m.Txs) > 0 {
		for _, e := range m.Txs {
			l = e.Size()
			n += 1 + l + sovTransactionPool(uint64(l))
		}
	}
	return n
}

func (m *TxBatchRecoverRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.NodeId)
	if l > 0 {
		n += 1 + l + sovTransactionPool(uint64(l))
	}
	if m.Height != 0 {
		n += 1 + sovTransactionPool(uint64(m.Height))
	}
	if len(m.BatchIds) > 0 {
		for _, s := range m.BatchIds {
			l = len(s)
			n += 1 + l + sovTransactionPool(uint64(l))
		}
	}
	return n
}

func (m *TxBatchRecoverResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.NodeId)
	if l > 0 {
		n += 1 + l + sovTransactionPool(uint64(l))
	}
	if m.Height != 0 {
		n += 1 + sovTransactionPool(uint64(m.Height))
	}
	if len(m.TxBatches) > 0 {
		for _, e := range m.TxBatches {
			l = e.Size()
			n += 1 + l + sovTransactionPool(uint64(l))
		}
	}
	return n
}

func (m *GetPoolStatusRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ChainId)
	if l > 0 {
		n += 1 + l + sovTransactionPool(uint64(l))
	}
	return n
}

func (m *GetTxIdsByTypeAndStageRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ChainId)
	if l > 0 {
		n += 1 + l + sovTransactionPool(uint64(l))
	}
	if m.TxType != 0 {
		n += 1 + sovTransactionPool(uint64(m.TxType))
	}
	if m.TxStage != 0 {
		n += 1 + sovTransactionPool(uint64(m.TxStage))
	}
	return n
}

func (m *GetTxIdsByTypeAndStageResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.TxIds) > 0 {
		for _, s := range m.TxIds {
			l = len(s)
			n += 1 + l + sovTransactionPool(uint64(l))
		}
	}
	return n
}

func (m *GetTxsInPoolByTxIdsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ChainId)
	if l > 0 {
		n += 1 + l + sovTransactionPool(uint64(l))
	}
	if len(m.TxIds) > 0 {
		for _, s := range m.TxIds {
			l = len(s)
			n += 1 + l + sovTransactionPool(uint64(l))
		}
	}
	return n
}

func (m *GetTxsInPoolByTxIdsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Txs) > 0 {
		for _, e := range m.Txs {
			l = e.Size()
			n += 1 + l + sovTransactionPool(uint64(l))
		}
	}
	if len(m.TxIds) > 0 {
		for _, s := range m.TxIds {
			l = len(s)
			n += 1 + l + sovTransactionPool(uint64(l))
		}
	}
	return n
}

func sovTransactionPool(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozTransactionPool(x uint64) (n int) {
	return sovTransactionPool(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *TxPoolSignal) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTransactionPool
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TxPoolSignal: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TxPoolSignal: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SignalType", wireType)
			}
			m.SignalType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTransactionPool
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SignalType |= SignalType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChainId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTransactionPool
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTransactionPool
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTransactionPool
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ChainId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTransactionPool(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTransactionPool
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TxPoolStatus) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTransactionPool
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TxPoolStatus: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TxPoolStatus: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ConfigTxPoolSize", wireType)
			}
			m.ConfigTxPoolSize = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTransactionPool
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ConfigTxPoolSize |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CommonTxPoolSize", wireType)
			}
			m.CommonTxPoolSize = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTransactionPool
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CommonTxPoolSize |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ConfigTxNumInQueue", wireType)
			}
			m.ConfigTxNumInQueue = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTransactionPool
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ConfigTxNumInQueue |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ConfigTxNumInPending", wireType)
			}
			m.ConfigTxNumInPending = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTransactionPool
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ConfigTxNumInPending |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CommonTxNumInQueue", wireType)
			}
			m.CommonTxNumInQueue = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTransactionPool
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CommonTxNumInQueue |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CommonTxNumInPending", wireType)
			}
			m.CommonTxNumInPending = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTransactionPool
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CommonTxNumInPending |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTransactionPool(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTransactionPool
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TxPoolMsg) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTransactionPool
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TxPoolMsg: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TxPoolMsg: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			m.Type = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTransactionPool
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Type |= TxPoolMsgType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Payload", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTransactionPool
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTransactionPool
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthTransactionPool
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Payload = append(m.Payload[:0], dAtA[iNdEx:postIndex]...)
			if m.Payload == nil {
				m.Payload = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTransactionPool(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTransactionPool
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TxBatch) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTransactionPool
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TxBatch: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TxBatch: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BatchId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTransactionPool
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTransactionPool
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTransactionPool
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BatchId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Size_", wireType)
			}
			m.Size_ = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTransactionPool
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Size_ |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Txs", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTransactionPool
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTransactionPool
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTransactionPool
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Txs = append(m.Txs, &common.Transaction{})
			if err := m.Txs[len(m.Txs)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TxIdsMap", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTransactionPool
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTransactionPool
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTransactionPool
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.TxIdsMap == nil {
				m.TxIdsMap = make(map[string]int32)
			}
			var mapkey string
			var mapvalue int32
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowTransactionPool
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowTransactionPool
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthTransactionPool
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey < 0 {
						return ErrInvalidLengthTransactionPool
					}
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowTransactionPool
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapvalue |= int32(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipTransactionPool(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if (skippy < 0) || (iNdEx+skippy) < 0 {
						return ErrInvalidLengthTransactionPool
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.TxIdsMap[mapkey] = mapvalue
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Endorsement", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTransactionPool
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTransactionPool
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTransactionPool
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Endorsement == nil {
				m.Endorsement = &common.EndorsementEntry{}
			}
			if err := m.Endorsement.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTransactionPool(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTransactionPool
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TxRecoverRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTransactionPool
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TxRecoverRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TxRecoverRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NodeId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTransactionPool
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTransactionPool
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTransactionPool
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NodeId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Height", wireType)
			}
			m.Height = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTransactionPool
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Height |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TxIds", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTransactionPool
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTransactionPool
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTransactionPool
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TxIds = append(m.TxIds, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTransactionPool(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTransactionPool
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TxRecoverResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTransactionPool
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TxRecoverResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TxRecoverResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NodeId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTransactionPool
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTransactionPool
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTransactionPool
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NodeId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Height", wireType)
			}
			m.Height = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTransactionPool
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Height |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Txs", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTransactionPool
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTransactionPool
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTransactionPool
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Txs = append(m.Txs, &common.Transaction{})
			if err := m.Txs[len(m.Txs)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTransactionPool(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTransactionPool
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TxBatchRecoverRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTransactionPool
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TxBatchRecoverRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TxBatchRecoverRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NodeId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTransactionPool
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTransactionPool
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTransactionPool
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NodeId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Height", wireType)
			}
			m.Height = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTransactionPool
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Height |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BatchIds", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTransactionPool
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTransactionPool
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTransactionPool
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BatchIds = append(m.BatchIds, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTransactionPool(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTransactionPool
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TxBatchRecoverResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTransactionPool
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TxBatchRecoverResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TxBatchRecoverResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NodeId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTransactionPool
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTransactionPool
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTransactionPool
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NodeId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Height", wireType)
			}
			m.Height = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTransactionPool
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Height |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TxBatches", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTransactionPool
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTransactionPool
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTransactionPool
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TxBatches = append(m.TxBatches, &TxBatch{})
			if err := m.TxBatches[len(m.TxBatches)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTransactionPool(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTransactionPool
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetPoolStatusRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTransactionPool
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetPoolStatusRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetPoolStatusRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChainId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTransactionPool
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTransactionPool
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTransactionPool
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ChainId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTransactionPool(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTransactionPool
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetTxIdsByTypeAndStageRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTransactionPool
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetTxIdsByTypeAndStageRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetTxIdsByTypeAndStageRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChainId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTransactionPool
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTransactionPool
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTransactionPool
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ChainId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TxType", wireType)
			}
			m.TxType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTransactionPool
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TxType |= TxType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TxStage", wireType)
			}
			m.TxStage = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTransactionPool
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TxStage |= TxStage(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTransactionPool(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTransactionPool
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetTxIdsByTypeAndStageResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTransactionPool
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetTxIdsByTypeAndStageResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetTxIdsByTypeAndStageResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TxIds", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTransactionPool
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTransactionPool
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTransactionPool
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TxIds = append(m.TxIds, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTransactionPool(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTransactionPool
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetTxsInPoolByTxIdsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTransactionPool
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetTxsInPoolByTxIdsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetTxsInPoolByTxIdsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChainId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTransactionPool
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTransactionPool
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTransactionPool
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ChainId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TxIds", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTransactionPool
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTransactionPool
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTransactionPool
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TxIds = append(m.TxIds, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTransactionPool(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTransactionPool
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetTxsInPoolByTxIdsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTransactionPool
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetTxsInPoolByTxIdsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetTxsInPoolByTxIdsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Txs", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTransactionPool
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTransactionPool
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTransactionPool
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Txs = append(m.Txs, &common.Transaction{})
			if err := m.Txs[len(m.Txs)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TxIds", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTransactionPool
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTransactionPool
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTransactionPool
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TxIds = append(m.TxIds, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTransactionPool(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTransactionPool
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipTransactionPool(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowTransactionPool
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTransactionPool
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTransactionPool
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthTransactionPool
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupTransactionPool
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthTransactionPool
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthTransactionPool        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowTransactionPool          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupTransactionPool = fmt.Errorf("proto: unexpected end of group")
)
