// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: accesscontrol/member.proto

package accesscontrol

import (
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type MemberType int32

const (
	//X509 cert
	MemberType_CERT MemberType = 0
	//cert hash
	MemberType_CERT_HASH MemberType = 1
	//public key
	MemberType_PUBLIC_KEY MemberType = 2
	//did
	MemberType_DID MemberType = 3
	//alias
	MemberType_ALIAS MemberType = 4
	//address
	MemberType_ADDR MemberType = 5
)

var MemberType_name = map[int32]string{
	0: "CERT",
	1: "CERT_HASH",
	2: "PUBLIC_KEY",
	3: "DID",
	4: "ALIAS",
	5: "ADDR",
}

var MemberType_value = map[string]int32{
	"CERT":       0,
	"CERT_HASH":  1,
	"PUBLIC_KEY": 2,
	"DID":        3,
	"ALIAS":      4,
	"ADDR":       5,
}

func (x MemberType) String() string {
	return proto.EnumName(MemberType_name, int32(x))
}

func (MemberType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_d279366e50bb6647, []int{0}
}

// member status
type MemberStatus int32

const (
	//member's status is normal
	MemberStatus_NORMAL MemberStatus = 0
	//member's status is invalid
	MemberStatus_INVALID MemberStatus = 1
	//member's status is revoked
	MemberStatus_REVOKED MemberStatus = 2
	//member's status is frozen
	MemberStatus_FROZEN MemberStatus = 3
)

var MemberStatus_name = map[int32]string{
	0: "NORMAL",
	1: "INVALID",
	2: "REVOKED",
	3: "FROZEN",
}

var MemberStatus_value = map[string]int32{
	"NORMAL":  0,
	"INVALID": 1,
	"REVOKED": 2,
	"FROZEN":  3,
}

func (x MemberStatus) String() string {
	return proto.EnumName(MemberStatus_name, int32(x))
}

func (MemberStatus) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_d279366e50bb6647, []int{1}
}

// verify the member's relevant identity material type
type VerifyType int32

const (
	//CRL
	VerifyType_CRL VerifyType = 0
)

var VerifyType_name = map[int32]string{
	0: "CRL",
}

var VerifyType_value = map[string]int32{
	"CRL": 0,
}

func (x VerifyType) String() string {
	return proto.EnumName(VerifyType_name, int32(x))
}

func (VerifyType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_d279366e50bb6647, []int{2}
}

// online member of blockchain
type Member struct {
	// organization identifier of the member
	OrgId string `protobuf:"bytes,1,opt,name=org_id,json=orgId,proto3" json:"org_id,omitempty"`
	// member type
	MemberType MemberType `protobuf:"varint,2,opt,name=member_type,json=memberType,proto3,enum=accesscontrol.MemberType" json:"member_type,omitempty"`
	// member identity related info bytes
	MemberInfo []byte `protobuf:"bytes,3,opt,name=member_info,json=memberInfo,proto3" json:"member_info,omitempty"`
}

func (m *Member) Reset()         { *m = Member{} }
func (m *Member) String() string { return proto.CompactTextString(m) }
func (*Member) ProtoMessage()    {}
func (*Member) Descriptor() ([]byte, []int) {
	return fileDescriptor_d279366e50bb6647, []int{0}
}
func (m *Member) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Member) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Member.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Member) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Member.Merge(m, src)
}
func (m *Member) XXX_Size() int {
	return m.Size()
}
func (m *Member) XXX_DiscardUnknown() {
	xxx_messageInfo_Member.DiscardUnknown(m)
}

var xxx_messageInfo_Member proto.InternalMessageInfo

func (m *Member) GetOrgId() string {
	if m != nil {
		return m.OrgId
	}
	return ""
}

func (m *Member) GetMemberType() MemberType {
	if m != nil {
		return m.MemberType
	}
	return MemberType_CERT
}

func (m *Member) GetMemberInfo() []byte {
	if m != nil {
		return m.MemberInfo
	}
	return nil
}

// full attribute member of blockchain
type MemberFull struct {
	// organization identifier of the member
	OrgId string `protobuf:"bytes,1,opt,name=org_id,json=orgId,proto3" json:"org_id,omitempty"`
	// member type
	MemberType MemberType `protobuf:"varint,2,opt,name=member_type,json=memberType,proto3,enum=accesscontrol.MemberType" json:"member_type,omitempty"`
	// member identity related info bytes
	MemberInfo []byte `protobuf:"bytes,3,opt,name=member_info,json=memberInfo,proto3" json:"member_info,omitempty"`
	// the identity of this member (non-uniqueness)
	MemberId string `protobuf:"bytes,4,opt,name=member_id,json=memberId,proto3" json:"member_id,omitempty"`
	// role of this member
	Role string `protobuf:"bytes,5,opt,name=role,proto3" json:"role,omitempty"`
	// the identity of this member (unique)
	Uid string `protobuf:"bytes,6,opt,name=uid,proto3" json:"uid,omitempty"`
}

func (m *MemberFull) Reset()         { *m = MemberFull{} }
func (m *MemberFull) String() string { return proto.CompactTextString(m) }
func (*MemberFull) ProtoMessage()    {}
func (*MemberFull) Descriptor() ([]byte, []int) {
	return fileDescriptor_d279366e50bb6647, []int{1}
}
func (m *MemberFull) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MemberFull) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MemberFull.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MemberFull) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MemberFull.Merge(m, src)
}
func (m *MemberFull) XXX_Size() int {
	return m.Size()
}
func (m *MemberFull) XXX_DiscardUnknown() {
	xxx_messageInfo_MemberFull.DiscardUnknown(m)
}

var xxx_messageInfo_MemberFull proto.InternalMessageInfo

func (m *MemberFull) GetOrgId() string {
	if m != nil {
		return m.OrgId
	}
	return ""
}

func (m *MemberFull) GetMemberType() MemberType {
	if m != nil {
		return m.MemberType
	}
	return MemberType_CERT
}

func (m *MemberFull) GetMemberInfo() []byte {
	if m != nil {
		return m.MemberInfo
	}
	return nil
}

func (m *MemberFull) GetMemberId() string {
	if m != nil {
		return m.MemberId
	}
	return ""
}

func (m *MemberFull) GetRole() string {
	if m != nil {
		return m.Role
	}
	return ""
}

func (m *MemberFull) GetUid() string {
	if m != nil {
		return m.Uid
	}
	return ""
}

// member extra data
type MemberExtraData struct {
	// sequence, like ethereum account nonce, by default is 0
	Sequence uint64 `protobuf:"varint,1,opt,name=sequence,proto3" json:"sequence,omitempty"`
}

func (m *MemberExtraData) Reset()         { *m = MemberExtraData{} }
func (m *MemberExtraData) String() string { return proto.CompactTextString(m) }
func (*MemberExtraData) ProtoMessage()    {}
func (*MemberExtraData) Descriptor() ([]byte, []int) {
	return fileDescriptor_d279366e50bb6647, []int{2}
}
func (m *MemberExtraData) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MemberExtraData) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MemberExtraData.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MemberExtraData) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MemberExtraData.Merge(m, src)
}
func (m *MemberExtraData) XXX_Size() int {
	return m.Size()
}
func (m *MemberExtraData) XXX_DiscardUnknown() {
	xxx_messageInfo_MemberExtraData.DiscardUnknown(m)
}

var xxx_messageInfo_MemberExtraData proto.InternalMessageInfo

func (m *MemberExtraData) GetSequence() uint64 {
	if m != nil {
		return m.Sequence
	}
	return 0
}

type MemberAndExtraData struct {
	Member    *Member          `protobuf:"bytes,1,opt,name=member,proto3" json:"member,omitempty"`
	ExtraData *MemberExtraData `protobuf:"bytes,2,opt,name=extra_data,json=extraData,proto3" json:"extra_data,omitempty"`
}

func (m *MemberAndExtraData) Reset()         { *m = MemberAndExtraData{} }
func (m *MemberAndExtraData) String() string { return proto.CompactTextString(m) }
func (*MemberAndExtraData) ProtoMessage()    {}
func (*MemberAndExtraData) Descriptor() ([]byte, []int) {
	return fileDescriptor_d279366e50bb6647, []int{3}
}
func (m *MemberAndExtraData) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MemberAndExtraData) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MemberAndExtraData.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MemberAndExtraData) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MemberAndExtraData.Merge(m, src)
}
func (m *MemberAndExtraData) XXX_Size() int {
	return m.Size()
}
func (m *MemberAndExtraData) XXX_DiscardUnknown() {
	xxx_messageInfo_MemberAndExtraData.DiscardUnknown(m)
}

var xxx_messageInfo_MemberAndExtraData proto.InternalMessageInfo

func (m *MemberAndExtraData) GetMember() *Member {
	if m != nil {
		return m.Member
	}
	return nil
}

func (m *MemberAndExtraData) GetExtraData() *MemberExtraData {
	if m != nil {
		return m.ExtraData
	}
	return nil
}

// public key member's info
type PKInfo struct {
	// the der of the public key
	PkBytes []byte `protobuf:"bytes,1,opt,name=pk_bytes,json=pkBytes,proto3" json:"pk_bytes,omitempty"`
	// member role
	Role string `protobuf:"bytes,2,opt,name=role,proto3" json:"role,omitempty"`
	// member's org_id
	OrgId string `protobuf:"bytes,3,opt,name=org_id,json=orgId,proto3" json:"org_id,omitempty"`
}

func (m *PKInfo) Reset()         { *m = PKInfo{} }
func (m *PKInfo) String() string { return proto.CompactTextString(m) }
func (*PKInfo) ProtoMessage()    {}
func (*PKInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_d279366e50bb6647, []int{4}
}
func (m *PKInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PKInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PKInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PKInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PKInfo.Merge(m, src)
}
func (m *PKInfo) XXX_Size() int {
	return m.Size()
}
func (m *PKInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_PKInfo.DiscardUnknown(m)
}

var xxx_messageInfo_PKInfo proto.InternalMessageInfo

func (m *PKInfo) GetPkBytes() []byte {
	if m != nil {
		return m.PkBytes
	}
	return nil
}

func (m *PKInfo) GetRole() string {
	if m != nil {
		return m.Role
	}
	return ""
}

func (m *PKInfo) GetOrgId() string {
	if m != nil {
		return m.OrgId
	}
	return ""
}

func init() {
	proto.RegisterEnum("accesscontrol.MemberType", MemberType_name, MemberType_value)
	proto.RegisterEnum("accesscontrol.MemberStatus", MemberStatus_name, MemberStatus_value)
	proto.RegisterEnum("accesscontrol.VerifyType", VerifyType_name, VerifyType_value)
	proto.RegisterType((*Member)(nil), "accesscontrol.Member")
	proto.RegisterType((*MemberFull)(nil), "accesscontrol.MemberFull")
	proto.RegisterType((*MemberExtraData)(nil), "accesscontrol.MemberExtraData")
	proto.RegisterType((*MemberAndExtraData)(nil), "accesscontrol.MemberAndExtraData")
	proto.RegisterType((*PKInfo)(nil), "accesscontrol.PKInfo")
}

func init() { proto.RegisterFile("accesscontrol/member.proto", fileDescriptor_d279366e50bb6647) }

var fileDescriptor_d279366e50bb6647 = []byte{
	// 519 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xc4, 0x53, 0x41, 0x8b, 0xda, 0x40,
	0x14, 0xce, 0x18, 0x8d, 0xfa, 0xdc, 0xdd, 0x0e, 0x03, 0x42, 0x76, 0x0b, 0x59, 0xf1, 0x24, 0x82,
	0x5a, 0xec, 0xad, 0x50, 0x68, 0x34, 0x59, 0x36, 0xe8, 0xea, 0x32, 0x6e, 0x85, 0xee, 0x25, 0x44,
	0x33, 0x5a, 0x51, 0x33, 0x69, 0x8c, 0xa5, 0x42, 0x4f, 0xfd, 0x05, 0xfd, 0x4f, 0xbd, 0xf4, 0xb8,
	0xc7, 0x1e, 0x8b, 0xfe, 0x91, 0x92, 0xc9, 0x1a, 0x15, 0xf6, 0xde, 0xdb, 0xf7, 0xe6, 0x7d, 0xdf,
	0xfb, 0xe6, 0xbd, 0xc7, 0x83, 0x2b, 0x67, 0x3c, 0x66, 0xab, 0xd5, 0x98, 0x7b, 0x61, 0xc0, 0x17,
	0x8d, 0x25, 0x5b, 0x8e, 0x58, 0x50, 0xf7, 0x03, 0x1e, 0x72, 0x72, 0x7e, 0x92, 0x2b, 0x7f, 0x07,
	0xe5, 0x4e, 0xa4, 0x49, 0x11, 0x14, 0x1e, 0x4c, 0xed, 0x99, 0xab, 0xa2, 0x12, 0xaa, 0xe4, 0x69,
	0x86, 0x07, 0x53, 0xcb, 0x25, 0xef, 0xa0, 0x10, 0xeb, 0xed, 0x70, 0xe3, 0x33, 0x35, 0x55, 0x42,
	0x95, 0x8b, 0xe6, 0x65, 0xfd, 0xa4, 0x4a, 0x3d, 0x2e, 0xf1, 0xb0, 0xf1, 0x19, 0x85, 0x65, 0x82,
	0xc9, 0x75, 0xa2, 0x9d, 0x79, 0x13, 0xae, 0xca, 0x25, 0x54, 0x39, 0xdb, 0x13, 0x2c, 0x6f, 0xc2,
	0xcb, 0xbf, 0x10, 0x40, 0xac, 0xbd, 0x59, 0x2f, 0x16, 0xff, 0xe3, 0x0b, 0xe4, 0x35, 0xe4, 0xf7,
	0x04, 0x57, 0x4d, 0x0b, 0xdb, 0xdc, 0x73, 0xda, 0x25, 0x04, 0xd2, 0x01, 0x5f, 0x30, 0x35, 0x23,
	0xde, 0x05, 0x26, 0x18, 0xe4, 0xf5, 0xcc, 0x55, 0x15, 0xf1, 0x14, 0xc1, 0x72, 0x0d, 0x5e, 0xc5,
	0xee, 0xe6, 0xb7, 0x30, 0x70, 0x0c, 0x27, 0x74, 0xc8, 0x15, 0xe4, 0x56, 0xec, 0xcb, 0x9a, 0x79,
	0x63, 0x26, 0x7a, 0x49, 0xd3, 0x24, 0x2e, 0xff, 0x40, 0x40, 0x62, 0xbe, 0xee, 0xb9, 0x07, 0x49,
	0x0d, 0x94, 0xd8, 0x57, 0x08, 0x0a, 0xcd, 0xe2, 0x8b, 0x0d, 0xd2, 0x67, 0x12, 0x79, 0x0f, 0xc0,
	0x22, 0xad, 0xed, 0x3a, 0xa1, 0x23, 0x66, 0x52, 0x68, 0x6a, 0x2f, 0x4a, 0x12, 0x0b, 0x9a, 0x67,
	0x7b, 0x58, 0xee, 0x81, 0x72, 0xdf, 0x11, 0x03, 0xb8, 0x84, 0x9c, 0x3f, 0xb7, 0x47, 0x9b, 0x90,
	0xad, 0x84, 0xf3, 0x19, 0xcd, 0xfa, 0xf3, 0x56, 0x14, 0x26, 0xed, 0xa7, 0x8e, 0xda, 0x3f, 0xec,
	0x48, 0x3e, 0xda, 0x51, 0x75, 0xb0, 0x5f, 0xa4, 0x98, 0x7a, 0x0e, 0xd2, 0x6d, 0x93, 0x3e, 0x60,
	0x89, 0x9c, 0x43, 0x3e, 0x42, 0xf6, 0xad, 0x3e, 0xb8, 0xc5, 0x88, 0x5c, 0x00, 0xdc, 0x7f, 0x6c,
	0x75, 0xad, 0xb6, 0xdd, 0x31, 0x3f, 0xe1, 0x14, 0xc9, 0x82, 0x6c, 0x58, 0x06, 0x96, 0x49, 0x1e,
	0x32, 0x7a, 0xd7, 0xd2, 0x07, 0x38, 0x1d, 0x89, 0x75, 0xc3, 0xa0, 0x38, 0x53, 0xfd, 0x00, 0x67,
	0x71, 0xd1, 0x41, 0xe8, 0x84, 0xeb, 0x15, 0x01, 0x50, 0x7a, 0x7d, 0x7a, 0xa7, 0x77, 0xb1, 0x44,
	0x0a, 0x90, 0xb5, 0x7a, 0x43, 0xbd, 0x6b, 0x19, 0x18, 0x45, 0x01, 0x35, 0x87, 0xfd, 0x8e, 0x69,
	0xe0, 0x54, 0xc4, 0xba, 0xa1, 0xfd, 0x47, 0xb3, 0x87, 0xe5, 0x6a, 0x11, 0x60, 0xc8, 0x82, 0xd9,
	0x64, 0x23, 0xbe, 0x95, 0x05, 0xb9, 0x4d, 0xbb, 0x58, 0x6a, 0xcd, 0x7f, 0x6f, 0x35, 0xf4, 0xb4,
	0xd5, 0xd0, 0xdf, 0xad, 0x86, 0x7e, 0xee, 0x34, 0xe9, 0x69, 0xa7, 0x49, 0x7f, 0x76, 0x9a, 0x04,
	0xd7, 0x3c, 0x98, 0xd6, 0xc7, 0x9f, 0x9d, 0x99, 0xb7, 0x74, 0xe6, 0xd1, 0xd1, 0x8c, 0x4e, 0x67,
	0xfa, 0xf8, 0xe6, 0x28, 0xc9, 0x83, 0x69, 0xe3, 0x10, 0x36, 0xfc, 0x51, 0x6d, 0xca, 0x1b, 0x5f,
	0x9b, 0x8d, 0x13, 0xc5, 0x48, 0x11, 0x87, 0xf7, 0xf6, 0x5f, 0x00, 0x00, 0x00, 0xff, 0xff, 0x39,
	0x64, 0xe0, 0x9f, 0x96, 0x03, 0x00, 0x00,
}

func (m *Member) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Member) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Member) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.MemberInfo) > 0 {
		i -= len(m.MemberInfo)
		copy(dAtA[i:], m.MemberInfo)
		i = encodeVarintMember(dAtA, i, uint64(len(m.MemberInfo)))
		i--
		dAtA[i] = 0x1a
	}
	if m.MemberType != 0 {
		i = encodeVarintMember(dAtA, i, uint64(m.MemberType))
		i--
		dAtA[i] = 0x10
	}
	if len(m.OrgId) > 0 {
		i -= len(m.OrgId)
		copy(dAtA[i:], m.OrgId)
		i = encodeVarintMember(dAtA, i, uint64(len(m.OrgId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MemberFull) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MemberFull) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MemberFull) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Uid) > 0 {
		i -= len(m.Uid)
		copy(dAtA[i:], m.Uid)
		i = encodeVarintMember(dAtA, i, uint64(len(m.Uid)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.Role) > 0 {
		i -= len(m.Role)
		copy(dAtA[i:], m.Role)
		i = encodeVarintMember(dAtA, i, uint64(len(m.Role)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.MemberId) > 0 {
		i -= len(m.MemberId)
		copy(dAtA[i:], m.MemberId)
		i = encodeVarintMember(dAtA, i, uint64(len(m.MemberId)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.MemberInfo) > 0 {
		i -= len(m.MemberInfo)
		copy(dAtA[i:], m.MemberInfo)
		i = encodeVarintMember(dAtA, i, uint64(len(m.MemberInfo)))
		i--
		dAtA[i] = 0x1a
	}
	if m.MemberType != 0 {
		i = encodeVarintMember(dAtA, i, uint64(m.MemberType))
		i--
		dAtA[i] = 0x10
	}
	if len(m.OrgId) > 0 {
		i -= len(m.OrgId)
		copy(dAtA[i:], m.OrgId)
		i = encodeVarintMember(dAtA, i, uint64(len(m.OrgId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MemberExtraData) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MemberExtraData) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MemberExtraData) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Sequence != 0 {
		i = encodeVarintMember(dAtA, i, uint64(m.Sequence))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *MemberAndExtraData) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MemberAndExtraData) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MemberAndExtraData) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.ExtraData != nil {
		{
			size, err := m.ExtraData.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMember(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.Member != nil {
		{
			size, err := m.Member.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMember(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *PKInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PKInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PKInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.OrgId) > 0 {
		i -= len(m.OrgId)
		copy(dAtA[i:], m.OrgId)
		i = encodeVarintMember(dAtA, i, uint64(len(m.OrgId)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Role) > 0 {
		i -= len(m.Role)
		copy(dAtA[i:], m.Role)
		i = encodeVarintMember(dAtA, i, uint64(len(m.Role)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.PkBytes) > 0 {
		i -= len(m.PkBytes)
		copy(dAtA[i:], m.PkBytes)
		i = encodeVarintMember(dAtA, i, uint64(len(m.PkBytes)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintMember(dAtA []byte, offset int, v uint64) int {
	offset -= sovMember(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *Member) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.OrgId)
	if l > 0 {
		n += 1 + l + sovMember(uint64(l))
	}
	if m.MemberType != 0 {
		n += 1 + sovMember(uint64(m.MemberType))
	}
	l = len(m.MemberInfo)
	if l > 0 {
		n += 1 + l + sovMember(uint64(l))
	}
	return n
}

func (m *MemberFull) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.OrgId)
	if l > 0 {
		n += 1 + l + sovMember(uint64(l))
	}
	if m.MemberType != 0 {
		n += 1 + sovMember(uint64(m.MemberType))
	}
	l = len(m.MemberInfo)
	if l > 0 {
		n += 1 + l + sovMember(uint64(l))
	}
	l = len(m.MemberId)
	if l > 0 {
		n += 1 + l + sovMember(uint64(l))
	}
	l = len(m.Role)
	if l > 0 {
		n += 1 + l + sovMember(uint64(l))
	}
	l = len(m.Uid)
	if l > 0 {
		n += 1 + l + sovMember(uint64(l))
	}
	return n
}

func (m *MemberExtraData) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Sequence != 0 {
		n += 1 + sovMember(uint64(m.Sequence))
	}
	return n
}

func (m *MemberAndExtraData) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Member != nil {
		l = m.Member.Size()
		n += 1 + l + sovMember(uint64(l))
	}
	if m.ExtraData != nil {
		l = m.ExtraData.Size()
		n += 1 + l + sovMember(uint64(l))
	}
	return n
}

func (m *PKInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.PkBytes)
	if l > 0 {
		n += 1 + l + sovMember(uint64(l))
	}
	l = len(m.Role)
	if l > 0 {
		n += 1 + l + sovMember(uint64(l))
	}
	l = len(m.OrgId)
	if l > 0 {
		n += 1 + l + sovMember(uint64(l))
	}
	return n
}

func sovMember(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozMember(x uint64) (n int) {
	return sovMember(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Member) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMember
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Member: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Member: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OrgId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMember
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMember
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMember
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OrgId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MemberType", wireType)
			}
			m.MemberType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMember
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MemberType |= MemberType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MemberInfo", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMember
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthMember
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthMember
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MemberInfo = append(m.MemberInfo[:0], dAtA[iNdEx:postIndex]...)
			if m.MemberInfo == nil {
				m.MemberInfo = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMember(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMember
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MemberFull) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMember
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MemberFull: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MemberFull: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OrgId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMember
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMember
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMember
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OrgId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MemberType", wireType)
			}
			m.MemberType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMember
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MemberType |= MemberType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MemberInfo", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMember
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthMember
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthMember
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MemberInfo = append(m.MemberInfo[:0], dAtA[iNdEx:postIndex]...)
			if m.MemberInfo == nil {
				m.MemberInfo = []byte{}
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MemberId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMember
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMember
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMember
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MemberId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Role", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMember
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMember
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMember
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Role = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Uid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMember
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMember
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMember
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Uid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMember(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMember
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MemberExtraData) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMember
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MemberExtraData: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MemberExtraData: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sequence", wireType)
			}
			m.Sequence = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMember
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Sequence |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipMember(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMember
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MemberAndExtraData) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMember
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MemberAndExtraData: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MemberAndExtraData: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Member", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMember
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMember
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMember
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Member == nil {
				m.Member = &Member{}
			}
			if err := m.Member.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExtraData", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMember
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMember
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMember
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ExtraData == nil {
				m.ExtraData = &MemberExtraData{}
			}
			if err := m.ExtraData.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMember(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMember
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PKInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMember
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PKInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PKInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PkBytes", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMember
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthMember
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthMember
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PkBytes = append(m.PkBytes[:0], dAtA[iNdEx:postIndex]...)
			if m.PkBytes == nil {
				m.PkBytes = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Role", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMember
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMember
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMember
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Role = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OrgId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMember
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMember
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMember
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OrgId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMember(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMember
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipMember(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowMember
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowMember
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowMember
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthMember
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupMember
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthMember
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthMember        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowMember          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupMember = fmt.Errorf("proto: unexpected end of group")
)
