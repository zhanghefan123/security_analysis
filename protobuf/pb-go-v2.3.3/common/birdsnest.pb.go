// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: common/birdsnest.proto

package common

import (
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type KeyType int32

const (
	KeyType_KTDefault      KeyType = 0
	KeyType_KTTimestampKey KeyType = 1
)

var KeyType_name = map[int32]string{
	0: "KTDefault",
	1: "KTTimestampKey",
}

var KeyType_value = map[string]int32{
	"KTDefault":      0,
	"KTTimestampKey": 1,
}

func (x KeyType) String() string {
	return proto.EnumName(KeyType_name, int32(x))
}

func (KeyType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_0558ac0327521ab3, []int{0}
}

type FilterExtensionType int32

const (
	FilterExtensionType_FETDefault   FilterExtensionType = 0
	FilterExtensionType_FETTimestamp FilterExtensionType = 1
)

var FilterExtensionType_name = map[int32]string{
	0: "FETDefault",
	1: "FETTimestamp",
}

var FilterExtensionType_value = map[string]int32{
	"FETDefault":   0,
	"FETTimestamp": 1,
}

func (x FilterExtensionType) String() string {
	return proto.EnumName(FilterExtensionType_name, int32(x))
}

func (FilterExtensionType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_0558ac0327521ab3, []int{1}
}

type RuleType int32

const (
	RuleType_AbsoluteExpireTime RuleType = 0
)

var RuleType_name = map[int32]string{
	0: "AbsoluteExpireTime",
}

var RuleType_value = map[string]int32{
	"AbsoluteExpireTime": 0,
}

func (x RuleType) String() string {
	return proto.EnumName(RuleType_name, int32(x))
}

func (RuleType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_0558ac0327521ab3, []int{2}
}

type SerializeIntervalType int32

const (
	// Timed serialize type
	SerializeIntervalType_Height SerializeIntervalType = 0
	// Timed serialize type
	SerializeIntervalType_Timed SerializeIntervalType = 1
	// Exit serialize type
	SerializeIntervalType_Exit SerializeIntervalType = 2
)

var SerializeIntervalType_name = map[int32]string{
	0: "Height",
	1: "Timed",
	2: "Exit",
}

var SerializeIntervalType_value = map[string]int32{
	"Height": 0,
	"Timed":  1,
	"Exit":   2,
}

func (x SerializeIntervalType) String() string {
	return proto.EnumName(SerializeIntervalType_name, int32(x))
}

func (SerializeIntervalType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_0558ac0327521ab3, []int{3}
}

// Bird's Nest
type BirdsNest struct {
	// Bird's Nest config
	Config *BirdsNestConfig `protobuf:"bytes,1,opt,name=config,proto3" json:"config,omitempty"`
	// The final height
	Height uint64 `protobuf:"varint,2,opt,name=height,proto3" json:"height,omitempty"`
	// current index
	CurrentIndex uint32 `protobuf:"varint,3,opt,name=currentIndex,proto3" json:"currentIndex,omitempty"`
	// A group of cuckoos filter
	Filters []*CuckooFilter `protobuf:"bytes,4,rep,name=filters,proto3" json:"filters,omitempty"`
}

func (m *BirdsNest) Reset()         { *m = BirdsNest{} }
func (m *BirdsNest) String() string { return proto.CompactTextString(m) }
func (*BirdsNest) ProtoMessage()    {}
func (*BirdsNest) Descriptor() ([]byte, []int) {
	return fileDescriptor_0558ac0327521ab3, []int{0}
}
func (m *BirdsNest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *BirdsNest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_BirdsNest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *BirdsNest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BirdsNest.Merge(m, src)
}
func (m *BirdsNest) XXX_Size() int {
	return m.Size()
}
func (m *BirdsNest) XXX_DiscardUnknown() {
	xxx_messageInfo_BirdsNest.DiscardUnknown(m)
}

var xxx_messageInfo_BirdsNest proto.InternalMessageInfo

func (m *BirdsNest) GetConfig() *BirdsNestConfig {
	if m != nil {
		return m.Config
	}
	return nil
}

func (m *BirdsNest) GetHeight() uint64 {
	if m != nil {
		return m.Height
	}
	return 0
}

func (m *BirdsNest) GetCurrentIndex() uint32 {
	if m != nil {
		return m.CurrentIndex
	}
	return 0
}

func (m *BirdsNest) GetFilters() []*CuckooFilter {
	if m != nil {
		return m.Filters
	}
	return nil
}

// Sharding Bird's Nest
type ShardingBirdsNest struct {
	Length uint32 `protobuf:"varint,1,opt,name=length,proto3" json:"length,omitempty"`
	// The final height
	Height uint64 `protobuf:"varint,2,opt,name=height,proto3" json:"height,omitempty"`
	// Bird's Nest config
	Config *ShardingBirdsNestConfig `protobuf:"bytes,3,opt,name=config,proto3" json:"config,omitempty"`
}

func (m *ShardingBirdsNest) Reset()         { *m = ShardingBirdsNest{} }
func (m *ShardingBirdsNest) String() string { return proto.CompactTextString(m) }
func (*ShardingBirdsNest) ProtoMessage()    {}
func (*ShardingBirdsNest) Descriptor() ([]byte, []int) {
	return fileDescriptor_0558ac0327521ab3, []int{1}
}
func (m *ShardingBirdsNest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ShardingBirdsNest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ShardingBirdsNest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ShardingBirdsNest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ShardingBirdsNest.Merge(m, src)
}
func (m *ShardingBirdsNest) XXX_Size() int {
	return m.Size()
}
func (m *ShardingBirdsNest) XXX_DiscardUnknown() {
	xxx_messageInfo_ShardingBirdsNest.DiscardUnknown(m)
}

var xxx_messageInfo_ShardingBirdsNest proto.InternalMessageInfo

func (m *ShardingBirdsNest) GetLength() uint32 {
	if m != nil {
		return m.Length
	}
	return 0
}

func (m *ShardingBirdsNest) GetHeight() uint64 {
	if m != nil {
		return m.Height
	}
	return 0
}

func (m *ShardingBirdsNest) GetConfig() *ShardingBirdsNestConfig {
	if m != nil {
		return m.Config
	}
	return nil
}

// Chain table structure
type CuckooFilter struct {
	// The field "cuckoo" is used to hold the serialized data of the cuckoo
	// Pb limit: The size of bytes cannot be larger than 4 GB
	Cuckoo []byte `protobuf:"bytes,1,opt,name=cuckoo,proto3" json:"cuckoo,omitempty"`
	// Carries the ID of the time
	Extension []byte `protobuf:"bytes,2,opt,name=extension,proto3" json:"extension,omitempty"`
	// cuckoo configuration
	Config []byte `protobuf:"bytes,3,opt,name=config,proto3" json:"config,omitempty"`
}

func (m *CuckooFilter) Reset()         { *m = CuckooFilter{} }
func (m *CuckooFilter) String() string { return proto.CompactTextString(m) }
func (*CuckooFilter) ProtoMessage()    {}
func (*CuckooFilter) Descriptor() ([]byte, []int) {
	return fileDescriptor_0558ac0327521ab3, []int{2}
}
func (m *CuckooFilter) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CuckooFilter) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CuckooFilter.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CuckooFilter) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CuckooFilter.Merge(m, src)
}
func (m *CuckooFilter) XXX_Size() int {
	return m.Size()
}
func (m *CuckooFilter) XXX_DiscardUnknown() {
	xxx_messageInfo_CuckooFilter.DiscardUnknown(m)
}

var xxx_messageInfo_CuckooFilter proto.InternalMessageInfo

func (m *CuckooFilter) GetCuckoo() []byte {
	if m != nil {
		return m.Cuckoo
	}
	return nil
}

func (m *CuckooFilter) GetExtension() []byte {
	if m != nil {
		return m.Extension
	}
	return nil
}

func (m *CuckooFilter) GetConfig() []byte {
	if m != nil {
		return m.Config
	}
	return nil
}

// Sharding bird's Nest configuration
type ShardingBirdsNestConfig struct {
	ChainId string `protobuf:"bytes,1,opt,name=chain_id,json=chainId,proto3" json:"chain_id,omitempty"`
	Length  uint32 `protobuf:"varint,2,opt,name=length,proto3" json:"length,omitempty"`
	// sharding task timeout
	Timeout int64 `protobuf:"varint,3,opt,name=timeout,proto3" json:"timeout,omitempty"`
	// Bird's Nest configuration
	Birdsnest *BirdsNestConfig `protobuf:"bytes,4,opt,name=birdsnest,proto3" json:"birdsnest,omitempty"`
	// Snapshot config
	Snapshot *SnapshotSerializerConfig `protobuf:"bytes,5,opt,name=snapshot,proto3" json:"snapshot,omitempty"`
}

func (m *ShardingBirdsNestConfig) Reset()         { *m = ShardingBirdsNestConfig{} }
func (m *ShardingBirdsNestConfig) String() string { return proto.CompactTextString(m) }
func (*ShardingBirdsNestConfig) ProtoMessage()    {}
func (*ShardingBirdsNestConfig) Descriptor() ([]byte, []int) {
	return fileDescriptor_0558ac0327521ab3, []int{3}
}
func (m *ShardingBirdsNestConfig) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ShardingBirdsNestConfig) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ShardingBirdsNestConfig.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ShardingBirdsNestConfig) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ShardingBirdsNestConfig.Merge(m, src)
}
func (m *ShardingBirdsNestConfig) XXX_Size() int {
	return m.Size()
}
func (m *ShardingBirdsNestConfig) XXX_DiscardUnknown() {
	xxx_messageInfo_ShardingBirdsNestConfig.DiscardUnknown(m)
}

var xxx_messageInfo_ShardingBirdsNestConfig proto.InternalMessageInfo

func (m *ShardingBirdsNestConfig) GetChainId() string {
	if m != nil {
		return m.ChainId
	}
	return ""
}

func (m *ShardingBirdsNestConfig) GetLength() uint32 {
	if m != nil {
		return m.Length
	}
	return 0
}

func (m *ShardingBirdsNestConfig) GetTimeout() int64 {
	if m != nil {
		return m.Timeout
	}
	return 0
}

func (m *ShardingBirdsNestConfig) GetBirdsnest() *BirdsNestConfig {
	if m != nil {
		return m.Birdsnest
	}
	return nil
}

func (m *ShardingBirdsNestConfig) GetSnapshot() *SnapshotSerializerConfig {
	if m != nil {
		return m.Snapshot
	}
	return nil
}

type BirdsNestConfig struct {
	ChainId string `protobuf:"bytes,1,opt,name=chain_id,json=chainId,proto3" json:"chain_id,omitempty"`
	Length  uint32 `protobuf:"varint,2,opt,name=length,proto3" json:"length,omitempty"`
	// rules config
	Rules *RulesConfig `protobuf:"bytes,3,opt,name=rules,proto3" json:"rules,omitempty"`
	// Cuckoo config
	Cuckoo *CuckooConfig `protobuf:"bytes,4,opt,name=cuckoo,proto3" json:"cuckoo,omitempty"`
	// Snapshot config
	Snapshot *SnapshotSerializerConfig `protobuf:"bytes,5,opt,name=snapshot,proto3" json:"snapshot,omitempty"`
}

func (m *BirdsNestConfig) Reset()         { *m = BirdsNestConfig{} }
func (m *BirdsNestConfig) String() string { return proto.CompactTextString(m) }
func (*BirdsNestConfig) ProtoMessage()    {}
func (*BirdsNestConfig) Descriptor() ([]byte, []int) {
	return fileDescriptor_0558ac0327521ab3, []int{4}
}
func (m *BirdsNestConfig) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *BirdsNestConfig) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_BirdsNestConfig.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *BirdsNestConfig) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BirdsNestConfig.Merge(m, src)
}
func (m *BirdsNestConfig) XXX_Size() int {
	return m.Size()
}
func (m *BirdsNestConfig) XXX_DiscardUnknown() {
	xxx_messageInfo_BirdsNestConfig.DiscardUnknown(m)
}

var xxx_messageInfo_BirdsNestConfig proto.InternalMessageInfo

func (m *BirdsNestConfig) GetChainId() string {
	if m != nil {
		return m.ChainId
	}
	return ""
}

func (m *BirdsNestConfig) GetLength() uint32 {
	if m != nil {
		return m.Length
	}
	return 0
}

func (m *BirdsNestConfig) GetRules() *RulesConfig {
	if m != nil {
		return m.Rules
	}
	return nil
}

func (m *BirdsNestConfig) GetCuckoo() *CuckooConfig {
	if m != nil {
		return m.Cuckoo
	}
	return nil
}

func (m *BirdsNestConfig) GetSnapshot() *SnapshotSerializerConfig {
	if m != nil {
		return m.Snapshot
	}
	return nil
}

type RulesConfig struct {
	// absolute expire time second
	AbsoluteExpireTime int64 `protobuf:"varint,1,opt,name=absolute_expire_time,json=absoluteExpireTime,proto3" json:"absolute_expire_time,omitempty"`
}

func (m *RulesConfig) Reset()         { *m = RulesConfig{} }
func (m *RulesConfig) String() string { return proto.CompactTextString(m) }
func (*RulesConfig) ProtoMessage()    {}
func (*RulesConfig) Descriptor() ([]byte, []int) {
	return fileDescriptor_0558ac0327521ab3, []int{5}
}
func (m *RulesConfig) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RulesConfig) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RulesConfig.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RulesConfig) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RulesConfig.Merge(m, src)
}
func (m *RulesConfig) XXX_Size() int {
	return m.Size()
}
func (m *RulesConfig) XXX_DiscardUnknown() {
	xxx_messageInfo_RulesConfig.DiscardUnknown(m)
}

var xxx_messageInfo_RulesConfig proto.InternalMessageInfo

func (m *RulesConfig) GetAbsoluteExpireTime() int64 {
	if m != nil {
		return m.AbsoluteExpireTime
	}
	return 0
}

// Cuckoo config
type CuckooConfig struct {
	KeyType KeyType `protobuf:"varint,1,opt,name=key_type,json=keyType,proto3,enum=common.KeyType" json:"key_type,omitempty"`
	// num of tags for each bucket, which is b in paper. tag is fingerprint, which is f in paper.
	TagsPerBucket uint32 `protobuf:"varint,2,opt,name=tags_per_bucket,json=tagsPerBucket,proto3" json:"tags_per_bucket,omitempty"`
	// num of bits for each item, which is length of tag(fingerprint)
	BitsPerItem uint32 `protobuf:"varint,3,opt,name=bits_per_item,json=bitsPerItem,proto3" json:"bits_per_item,omitempty"`
	// num of keys that filter will store. this value should close to and lower
	//					 nextPow2(maxNumKeys/tagsPerBucket) * maxLoadFactor. cause table.NumBuckets is always a power of two
	MaxNumKeys uint32 `protobuf:"varint,4,opt,name=max_num_keys,json=maxNumKeys,proto3" json:"max_num_keys,omitempty"`
	// has two constant parameters to choose from:
	// TableTypeSingle normal single table
	// TableTypePacked packed table, use semi-sort to save 1 bit per item
	TableType uint32 `protobuf:"varint,5,opt,name=table_type,json=tableType,proto3" json:"table_type,omitempty"`
}

func (m *CuckooConfig) Reset()         { *m = CuckooConfig{} }
func (m *CuckooConfig) String() string { return proto.CompactTextString(m) }
func (*CuckooConfig) ProtoMessage()    {}
func (*CuckooConfig) Descriptor() ([]byte, []int) {
	return fileDescriptor_0558ac0327521ab3, []int{6}
}
func (m *CuckooConfig) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CuckooConfig) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CuckooConfig.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CuckooConfig) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CuckooConfig.Merge(m, src)
}
func (m *CuckooConfig) XXX_Size() int {
	return m.Size()
}
func (m *CuckooConfig) XXX_DiscardUnknown() {
	xxx_messageInfo_CuckooConfig.DiscardUnknown(m)
}

var xxx_messageInfo_CuckooConfig proto.InternalMessageInfo

func (m *CuckooConfig) GetKeyType() KeyType {
	if m != nil {
		return m.KeyType
	}
	return KeyType_KTDefault
}

func (m *CuckooConfig) GetTagsPerBucket() uint32 {
	if m != nil {
		return m.TagsPerBucket
	}
	return 0
}

func (m *CuckooConfig) GetBitsPerItem() uint32 {
	if m != nil {
		return m.BitsPerItem
	}
	return 0
}

func (m *CuckooConfig) GetMaxNumKeys() uint32 {
	if m != nil {
		return m.MaxNumKeys
	}
	return 0
}

func (m *CuckooConfig) GetTableType() uint32 {
	if m != nil {
		return m.TableType
	}
	return 0
}

// Snapshot serializer config
type SnapshotSerializerConfig struct {
	// serialization type
	Type        SerializeIntervalType               `protobuf:"varint,1,opt,name=type,proto3,enum=common.SerializeIntervalType" json:"type,omitempty"`
	Timed       *TimedSerializeIntervalConfig       `protobuf:"bytes,2,opt,name=timed,proto3" json:"timed,omitempty"`
	BlockHeight *BlockHeightSerializeIntervalConfig `protobuf:"bytes,3,opt,name=block_height,json=blockHeight,proto3" json:"block_height,omitempty"`
	// filepath
	Path string `protobuf:"bytes,4,opt,name=path,proto3" json:"path,omitempty"`
}

func (m *SnapshotSerializerConfig) Reset()         { *m = SnapshotSerializerConfig{} }
func (m *SnapshotSerializerConfig) String() string { return proto.CompactTextString(m) }
func (*SnapshotSerializerConfig) ProtoMessage()    {}
func (*SnapshotSerializerConfig) Descriptor() ([]byte, []int) {
	return fileDescriptor_0558ac0327521ab3, []int{7}
}
func (m *SnapshotSerializerConfig) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SnapshotSerializerConfig) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SnapshotSerializerConfig.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SnapshotSerializerConfig) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SnapshotSerializerConfig.Merge(m, src)
}
func (m *SnapshotSerializerConfig) XXX_Size() int {
	return m.Size()
}
func (m *SnapshotSerializerConfig) XXX_DiscardUnknown() {
	xxx_messageInfo_SnapshotSerializerConfig.DiscardUnknown(m)
}

var xxx_messageInfo_SnapshotSerializerConfig proto.InternalMessageInfo

func (m *SnapshotSerializerConfig) GetType() SerializeIntervalType {
	if m != nil {
		return m.Type
	}
	return SerializeIntervalType_Height
}

func (m *SnapshotSerializerConfig) GetTimed() *TimedSerializeIntervalConfig {
	if m != nil {
		return m.Timed
	}
	return nil
}

func (m *SnapshotSerializerConfig) GetBlockHeight() *BlockHeightSerializeIntervalConfig {
	if m != nil {
		return m.BlockHeight
	}
	return nil
}

func (m *SnapshotSerializerConfig) GetPath() string {
	if m != nil {
		return m.Path
	}
	return ""
}

// Timed serialization interval
type TimedSerializeIntervalConfig struct {
	Interval int64 `protobuf:"varint,1,opt,name=interval,proto3" json:"interval,omitempty"`
}

func (m *TimedSerializeIntervalConfig) Reset()         { *m = TimedSerializeIntervalConfig{} }
func (m *TimedSerializeIntervalConfig) String() string { return proto.CompactTextString(m) }
func (*TimedSerializeIntervalConfig) ProtoMessage()    {}
func (*TimedSerializeIntervalConfig) Descriptor() ([]byte, []int) {
	return fileDescriptor_0558ac0327521ab3, []int{8}
}
func (m *TimedSerializeIntervalConfig) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TimedSerializeIntervalConfig) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TimedSerializeIntervalConfig.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TimedSerializeIntervalConfig) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TimedSerializeIntervalConfig.Merge(m, src)
}
func (m *TimedSerializeIntervalConfig) XXX_Size() int {
	return m.Size()
}
func (m *TimedSerializeIntervalConfig) XXX_DiscardUnknown() {
	xxx_messageInfo_TimedSerializeIntervalConfig.DiscardUnknown(m)
}

var xxx_messageInfo_TimedSerializeIntervalConfig proto.InternalMessageInfo

func (m *TimedSerializeIntervalConfig) GetInterval() int64 {
	if m != nil {
		return m.Interval
	}
	return 0
}

// Block height serialization interval
type BlockHeightSerializeIntervalConfig struct {
	Interval uint64 `protobuf:"varint,1,opt,name=interval,proto3" json:"interval,omitempty"`
}

func (m *BlockHeightSerializeIntervalConfig) Reset()         { *m = BlockHeightSerializeIntervalConfig{} }
func (m *BlockHeightSerializeIntervalConfig) String() string { return proto.CompactTextString(m) }
func (*BlockHeightSerializeIntervalConfig) ProtoMessage()    {}
func (*BlockHeightSerializeIntervalConfig) Descriptor() ([]byte, []int) {
	return fileDescriptor_0558ac0327521ab3, []int{9}
}
func (m *BlockHeightSerializeIntervalConfig) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *BlockHeightSerializeIntervalConfig) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_BlockHeightSerializeIntervalConfig.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *BlockHeightSerializeIntervalConfig) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BlockHeightSerializeIntervalConfig.Merge(m, src)
}
func (m *BlockHeightSerializeIntervalConfig) XXX_Size() int {
	return m.Size()
}
func (m *BlockHeightSerializeIntervalConfig) XXX_DiscardUnknown() {
	xxx_messageInfo_BlockHeightSerializeIntervalConfig.DiscardUnknown(m)
}

var xxx_messageInfo_BlockHeightSerializeIntervalConfig proto.InternalMessageInfo

func (m *BlockHeightSerializeIntervalConfig) GetInterval() uint64 {
	if m != nil {
		return m.Interval
	}
	return 0
}

func init() {
	proto.RegisterEnum("common.KeyType", KeyType_name, KeyType_value)
	proto.RegisterEnum("common.FilterExtensionType", FilterExtensionType_name, FilterExtensionType_value)
	proto.RegisterEnum("common.RuleType", RuleType_name, RuleType_value)
	proto.RegisterEnum("common.SerializeIntervalType", SerializeIntervalType_name, SerializeIntervalType_value)
	proto.RegisterType((*BirdsNest)(nil), "common.BirdsNest")
	proto.RegisterType((*ShardingBirdsNest)(nil), "common.ShardingBirdsNest")
	proto.RegisterType((*CuckooFilter)(nil), "common.CuckooFilter")
	proto.RegisterType((*ShardingBirdsNestConfig)(nil), "common.ShardingBirdsNestConfig")
	proto.RegisterType((*BirdsNestConfig)(nil), "common.BirdsNestConfig")
	proto.RegisterType((*RulesConfig)(nil), "common.RulesConfig")
	proto.RegisterType((*CuckooConfig)(nil), "common.CuckooConfig")
	proto.RegisterType((*SnapshotSerializerConfig)(nil), "common.SnapshotSerializerConfig")
	proto.RegisterType((*TimedSerializeIntervalConfig)(nil), "common.TimedSerializeIntervalConfig")
	proto.RegisterType((*BlockHeightSerializeIntervalConfig)(nil), "common.BlockHeightSerializeIntervalConfig")
}

func init() { proto.RegisterFile("common/birdsnest.proto", fileDescriptor_0558ac0327521ab3) }

var fileDescriptor_0558ac0327521ab3 = []byte{
	// 815 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0x55, 0xcb, 0x8e, 0xe3, 0x54,
	0x10, 0x8d, 0x3b, 0x4f, 0x57, 0x9c, 0x6e, 0x73, 0x67, 0xc8, 0x18, 0x34, 0x13, 0x22, 0x0b, 0xa1,
	0x4c, 0x34, 0x24, 0x10, 0x84, 0x06, 0x8d, 0x90, 0x80, 0x6e, 0xd2, 0x22, 0x8a, 0x18, 0x8d, 0x3c,
	0x59, 0x21, 0x24, 0xcb, 0x76, 0xaa, 0x93, 0xab, 0xf8, 0xa5, 0xeb, 0xeb, 0x51, 0x82, 0xf8, 0x08,
	0x3e, 0x83, 0x3f, 0x81, 0x65, 0x2f, 0x91, 0xd8, 0xa0, 0xee, 0x2d, 0x1f, 0x81, 0x7c, 0xfd, 0x4a,
	0x13, 0xd2, 0x2c, 0x60, 0xe7, 0x7a, 0x9c, 0xaa, 0x73, 0xaa, 0x2a, 0x37, 0xd0, 0x75, 0x02, 0xcf,
	0x0b, 0xfc, 0xb1, 0x4d, 0xd9, 0x32, 0xf2, 0x31, 0xe2, 0xa3, 0x90, 0x05, 0x3c, 0x20, 0x8d, 0xd4,
	0xaf, 0xff, 0x2c, 0x81, 0x7c, 0x9e, 0xc4, 0x5e, 0x62, 0xc4, 0xc9, 0x18, 0x1a, 0x4e, 0xe0, 0x5f,
	0xd1, 0x95, 0x26, 0xf5, 0xa5, 0x41, 0x7b, 0xf2, 0x68, 0x94, 0xa6, 0x8d, 0x8a, 0x94, 0x0b, 0x11,
	0x36, 0xb2, 0x34, 0xd2, 0x85, 0xc6, 0x1a, 0xe9, 0x6a, 0xcd, 0xb5, 0x93, 0xbe, 0x34, 0xa8, 0x19,
	0x99, 0x45, 0x74, 0x50, 0x9c, 0x98, 0x31, 0xf4, 0xf9, 0xcc, 0x5f, 0xe2, 0x56, 0xab, 0xf6, 0xa5,
	0x41, 0xc7, 0xb8, 0xe3, 0x23, 0x23, 0x68, 0x5e, 0x51, 0x97, 0x23, 0x8b, 0xb4, 0x5a, 0xbf, 0x3a,
	0x68, 0x4f, 0x1e, 0xe6, 0xdd, 0x2e, 0x62, 0x67, 0x13, 0x04, 0x97, 0x22, 0x68, 0xe4, 0x49, 0xfa,
	0x8f, 0xf0, 0xd6, 0xeb, 0xb5, 0xc5, 0x96, 0xd4, 0x5f, 0x95, 0x8c, 0xbb, 0xd0, 0x70, 0xd1, 0x5f,
	0xf1, 0xb5, 0x60, 0xdc, 0x31, 0x32, 0xeb, 0x28, 0xb1, 0xe7, 0x85, 0xc2, 0xaa, 0x50, 0xf8, 0x5e,
	0xde, 0xf3, 0xa0, 0xf4, 0x5d, 0xa5, 0xfa, 0xf7, 0xa0, 0xec, 0xd3, 0x4a, 0x1a, 0x38, 0xc2, 0x16,
	0x8d, 0x15, 0x23, 0xb3, 0xc8, 0x63, 0x90, 0x71, 0xcb, 0xd1, 0x8f, 0x68, 0xe0, 0x8b, 0xde, 0x8a,
	0x51, 0x3a, 0x04, 0xaa, 0x6c, 0xaf, 0x14, 0xd5, 0x7f, 0x97, 0xe0, 0xd1, 0x11, 0x06, 0xe4, 0x1d,
	0x68, 0x39, 0x6b, 0x8b, 0xfa, 0x26, 0x5d, 0x8a, 0x5e, 0xb2, 0xd1, 0x14, 0xf6, 0x6c, 0xb9, 0xa7,
	0xfe, 0xe4, 0x8e, 0x7a, 0x0d, 0x9a, 0x9c, 0x7a, 0x18, 0xc4, 0x5c, 0xf4, 0xa9, 0x1a, 0xb9, 0x49,
	0x3e, 0x05, 0xb9, 0x38, 0x05, 0xad, 0x76, 0xff, 0x92, 0xcb, 0x4c, 0xf2, 0x39, 0xb4, 0x22, 0xdf,
	0x0a, 0xa3, 0x75, 0xc0, 0xb5, 0xba, 0x40, 0xf5, 0x8b, 0xc1, 0x65, 0xfe, 0xd7, 0xc8, 0xa8, 0xe5,
	0xd2, 0x1f, 0x90, 0x65, 0xf0, 0x02, 0x91, 0xa8, 0x3b, 0xfb, 0x1f, 0x54, 0x3d, 0x85, 0x3a, 0x8b,
	0x5d, 0x8c, 0xb2, 0xd5, 0x3d, 0xc8, 0x19, 0x18, 0x89, 0x33, 0x6b, 0x9a, 0x66, 0x90, 0x67, 0xc5,
	0x76, 0x52, 0x8d, 0x7f, 0x3b, 0xad, 0x62, 0xb7, 0xe9, 0xce, 0xfe, 0x9b, 0xba, 0x2f, 0xa0, 0xbd,
	0xc7, 0x80, 0x7c, 0x04, 0x0f, 0x2d, 0x3b, 0x0a, 0xdc, 0x98, 0xa3, 0x89, 0xdb, 0x90, 0x32, 0x34,
	0x93, 0xe1, 0x0b, 0x91, 0x55, 0x83, 0xe4, 0xb1, 0xa9, 0x08, 0x2d, 0xa8, 0x87, 0xfa, 0x2f, 0x52,
	0x7e, 0x5b, 0x59, 0x89, 0x21, 0xb4, 0x36, 0xb8, 0x33, 0xf9, 0x2e, 0x4c, 0x61, 0xa7, 0x93, 0xb3,
	0x9c, 0xcf, 0x1c, 0x77, 0x8b, 0x5d, 0x88, 0x46, 0x73, 0x93, 0x7e, 0x90, 0x0f, 0xe0, 0x8c, 0x5b,
	0xab, 0xc8, 0x0c, 0x91, 0x99, 0x76, 0xec, 0x6c, 0x90, 0x67, 0x53, 0xeb, 0x24, 0xee, 0x57, 0xc8,
	0xce, 0x85, 0x93, 0xe8, 0xd0, 0xb1, 0x29, 0x4f, 0xf3, 0x28, 0x47, 0x2f, 0xfb, 0x49, 0xb6, 0x13,
	0xe7, 0x2b, 0x64, 0x33, 0x8e, 0x1e, 0xe9, 0x83, 0xe2, 0x59, 0x5b, 0xd3, 0x8f, 0x3d, 0x73, 0x83,
	0xbb, 0x48, 0xcc, 0xae, 0x63, 0x80, 0x67, 0x6d, 0x5f, 0xc6, 0xde, 0x1c, 0x77, 0x11, 0x79, 0x02,
	0xc0, 0x2d, 0xdb, 0xc5, 0x94, 0x5b, 0x5d, 0xc4, 0x65, 0xe1, 0x49, 0xc8, 0xe8, 0x7f, 0x4a, 0xa0,
	0x1d, 0x9b, 0x18, 0xf9, 0x18, 0x6a, 0x7b, 0x8a, 0x9e, 0x14, 0x13, 0xce, 0xf3, 0x66, 0x3e, 0x47,
	0xf6, 0xc6, 0x72, 0x85, 0x3e, 0x91, 0x4a, 0x5e, 0x40, 0x3d, 0x99, 0xdd, 0x52, 0x48, 0x6a, 0x4f,
	0xde, 0xcf, 0x31, 0xc9, 0xd8, 0x96, 0x07, 0xc0, 0xfc, 0x04, 0x04, 0x84, 0x7c, 0x0b, 0x8a, 0xed,
	0x06, 0xce, 0xc6, 0xcc, 0xde, 0x81, 0xf4, 0x68, 0x86, 0xc5, 0xb1, 0x27, 0xb1, 0x6f, 0x44, 0xe8,
	0x58, 0xa1, 0xb6, 0x5d, 0xe6, 0x10, 0x02, 0xb5, 0xd0, 0xe2, 0x6b, 0x31, 0x13, 0xd9, 0x10, 0xdf,
	0xfa, 0x0b, 0x78, 0x7c, 0x1f, 0x13, 0xf2, 0x2e, 0xb4, 0x68, 0xe6, 0xc9, 0xd6, 0x5f, 0xd8, 0xfa,
	0x97, 0xa0, 0xff, 0x3b, 0x85, 0x83, 0x0a, 0xb5, 0xb2, 0xc2, 0xf0, 0x19, 0x34, 0xb3, 0x6b, 0x20,
	0x1d, 0x90, 0xe7, 0x8b, 0xaf, 0xf1, 0xca, 0x8a, 0x5d, 0xae, 0x56, 0x08, 0x81, 0xd3, 0xf9, 0x22,
	0x61, 0x16, 0x71, 0xcb, 0x0b, 0xe7, 0xb8, 0x53, 0xa5, 0xe1, 0x73, 0x78, 0x90, 0xbe, 0x5c, 0xd3,
	0xfc, 0x31, 0x12, 0xc8, 0x53, 0x80, 0xcb, 0xe9, 0x1e, 0x54, 0x05, 0xe5, 0x72, 0x5a, 0x62, 0x55,
	0x69, 0xa8, 0x43, 0x2b, 0x39, 0x6f, 0x91, 0xdd, 0x05, 0xf2, 0xd5, 0xc1, 0xfd, 0xaa, 0x95, 0xe1,
	0x67, 0xf0, 0xf6, 0x3f, 0xae, 0x91, 0x00, 0x34, 0x52, 0x81, 0x6a, 0x85, 0xc8, 0x50, 0x17, 0xd3,
	0x52, 0x25, 0xd2, 0x82, 0xda, 0x74, 0x4b, 0xb9, 0x7a, 0x72, 0x7e, 0xf1, 0xeb, 0x4d, 0x4f, 0xba,
	0xbe, 0xe9, 0x49, 0x7f, 0xdc, 0xf4, 0xa4, 0x9f, 0x6e, 0x7b, 0x95, 0xeb, 0xdb, 0x5e, 0xe5, 0xb7,
	0xdb, 0x5e, 0xe5, 0xbb, 0xa7, 0xe2, 0x39, 0xf0, 0xac, 0x0d, 0xb2, 0x51, 0xc0, 0x56, 0xe3, 0xd2,
	0x1c, 0x87, 0xf6, 0x87, 0xab, 0x60, 0xfc, 0x66, 0x32, 0x4e, 0x77, 0x69, 0x37, 0xc4, 0x7f, 0xda,
	0x27, 0x7f, 0x05, 0x00, 0x00, 0xff, 0xff, 0x33, 0x10, 0xe9, 0xa8, 0xed, 0x06, 0x00, 0x00,
}

func (m *BirdsNest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BirdsNest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *BirdsNest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Filters) > 0 {
		for iNdEx := len(m.Filters) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Filters[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintBirdsnest(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x22
		}
	}
	if m.CurrentIndex != 0 {
		i = encodeVarintBirdsnest(dAtA, i, uint64(m.CurrentIndex))
		i--
		dAtA[i] = 0x18
	}
	if m.Height != 0 {
		i = encodeVarintBirdsnest(dAtA, i, uint64(m.Height))
		i--
		dAtA[i] = 0x10
	}
	if m.Config != nil {
		{
			size, err := m.Config.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintBirdsnest(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ShardingBirdsNest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ShardingBirdsNest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ShardingBirdsNest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Config != nil {
		{
			size, err := m.Config.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintBirdsnest(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if m.Height != 0 {
		i = encodeVarintBirdsnest(dAtA, i, uint64(m.Height))
		i--
		dAtA[i] = 0x10
	}
	if m.Length != 0 {
		i = encodeVarintBirdsnest(dAtA, i, uint64(m.Length))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *CuckooFilter) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CuckooFilter) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CuckooFilter) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Config) > 0 {
		i -= len(m.Config)
		copy(dAtA[i:], m.Config)
		i = encodeVarintBirdsnest(dAtA, i, uint64(len(m.Config)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Extension) > 0 {
		i -= len(m.Extension)
		copy(dAtA[i:], m.Extension)
		i = encodeVarintBirdsnest(dAtA, i, uint64(len(m.Extension)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Cuckoo) > 0 {
		i -= len(m.Cuckoo)
		copy(dAtA[i:], m.Cuckoo)
		i = encodeVarintBirdsnest(dAtA, i, uint64(len(m.Cuckoo)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ShardingBirdsNestConfig) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ShardingBirdsNestConfig) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ShardingBirdsNestConfig) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Snapshot != nil {
		{
			size, err := m.Snapshot.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintBirdsnest(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2a
	}
	if m.Birdsnest != nil {
		{
			size, err := m.Birdsnest.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintBirdsnest(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	if m.Timeout != 0 {
		i = encodeVarintBirdsnest(dAtA, i, uint64(m.Timeout))
		i--
		dAtA[i] = 0x18
	}
	if m.Length != 0 {
		i = encodeVarintBirdsnest(dAtA, i, uint64(m.Length))
		i--
		dAtA[i] = 0x10
	}
	if len(m.ChainId) > 0 {
		i -= len(m.ChainId)
		copy(dAtA[i:], m.ChainId)
		i = encodeVarintBirdsnest(dAtA, i, uint64(len(m.ChainId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *BirdsNestConfig) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BirdsNestConfig) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *BirdsNestConfig) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Snapshot != nil {
		{
			size, err := m.Snapshot.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintBirdsnest(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2a
	}
	if m.Cuckoo != nil {
		{
			size, err := m.Cuckoo.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintBirdsnest(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	if m.Rules != nil {
		{
			size, err := m.Rules.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintBirdsnest(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if m.Length != 0 {
		i = encodeVarintBirdsnest(dAtA, i, uint64(m.Length))
		i--
		dAtA[i] = 0x10
	}
	if len(m.ChainId) > 0 {
		i -= len(m.ChainId)
		copy(dAtA[i:], m.ChainId)
		i = encodeVarintBirdsnest(dAtA, i, uint64(len(m.ChainId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *RulesConfig) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RulesConfig) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RulesConfig) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.AbsoluteExpireTime != 0 {
		i = encodeVarintBirdsnest(dAtA, i, uint64(m.AbsoluteExpireTime))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *CuckooConfig) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CuckooConfig) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CuckooConfig) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.TableType != 0 {
		i = encodeVarintBirdsnest(dAtA, i, uint64(m.TableType))
		i--
		dAtA[i] = 0x28
	}
	if m.MaxNumKeys != 0 {
		i = encodeVarintBirdsnest(dAtA, i, uint64(m.MaxNumKeys))
		i--
		dAtA[i] = 0x20
	}
	if m.BitsPerItem != 0 {
		i = encodeVarintBirdsnest(dAtA, i, uint64(m.BitsPerItem))
		i--
		dAtA[i] = 0x18
	}
	if m.TagsPerBucket != 0 {
		i = encodeVarintBirdsnest(dAtA, i, uint64(m.TagsPerBucket))
		i--
		dAtA[i] = 0x10
	}
	if m.KeyType != 0 {
		i = encodeVarintBirdsnest(dAtA, i, uint64(m.KeyType))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *SnapshotSerializerConfig) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SnapshotSerializerConfig) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SnapshotSerializerConfig) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Path) > 0 {
		i -= len(m.Path)
		copy(dAtA[i:], m.Path)
		i = encodeVarintBirdsnest(dAtA, i, uint64(len(m.Path)))
		i--
		dAtA[i] = 0x22
	}
	if m.BlockHeight != nil {
		{
			size, err := m.BlockHeight.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintBirdsnest(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if m.Timed != nil {
		{
			size, err := m.Timed.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintBirdsnest(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.Type != 0 {
		i = encodeVarintBirdsnest(dAtA, i, uint64(m.Type))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *TimedSerializeIntervalConfig) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TimedSerializeIntervalConfig) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TimedSerializeIntervalConfig) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Interval != 0 {
		i = encodeVarintBirdsnest(dAtA, i, uint64(m.Interval))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *BlockHeightSerializeIntervalConfig) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BlockHeightSerializeIntervalConfig) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *BlockHeightSerializeIntervalConfig) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Interval != 0 {
		i = encodeVarintBirdsnest(dAtA, i, uint64(m.Interval))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintBirdsnest(dAtA []byte, offset int, v uint64) int {
	offset -= sovBirdsnest(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *BirdsNest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Config != nil {
		l = m.Config.Size()
		n += 1 + l + sovBirdsnest(uint64(l))
	}
	if m.Height != 0 {
		n += 1 + sovBirdsnest(uint64(m.Height))
	}
	if m.CurrentIndex != 0 {
		n += 1 + sovBirdsnest(uint64(m.CurrentIndex))
	}
	if len(m.Filters) > 0 {
		for _, e := range m.Filters {
			l = e.Size()
			n += 1 + l + sovBirdsnest(uint64(l))
		}
	}
	return n
}

func (m *ShardingBirdsNest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Length != 0 {
		n += 1 + sovBirdsnest(uint64(m.Length))
	}
	if m.Height != 0 {
		n += 1 + sovBirdsnest(uint64(m.Height))
	}
	if m.Config != nil {
		l = m.Config.Size()
		n += 1 + l + sovBirdsnest(uint64(l))
	}
	return n
}

func (m *CuckooFilter) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Cuckoo)
	if l > 0 {
		n += 1 + l + sovBirdsnest(uint64(l))
	}
	l = len(m.Extension)
	if l > 0 {
		n += 1 + l + sovBirdsnest(uint64(l))
	}
	l = len(m.Config)
	if l > 0 {
		n += 1 + l + sovBirdsnest(uint64(l))
	}
	return n
}

func (m *ShardingBirdsNestConfig) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ChainId)
	if l > 0 {
		n += 1 + l + sovBirdsnest(uint64(l))
	}
	if m.Length != 0 {
		n += 1 + sovBirdsnest(uint64(m.Length))
	}
	if m.Timeout != 0 {
		n += 1 + sovBirdsnest(uint64(m.Timeout))
	}
	if m.Birdsnest != nil {
		l = m.Birdsnest.Size()
		n += 1 + l + sovBirdsnest(uint64(l))
	}
	if m.Snapshot != nil {
		l = m.Snapshot.Size()
		n += 1 + l + sovBirdsnest(uint64(l))
	}
	return n
}

func (m *BirdsNestConfig) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ChainId)
	if l > 0 {
		n += 1 + l + sovBirdsnest(uint64(l))
	}
	if m.Length != 0 {
		n += 1 + sovBirdsnest(uint64(m.Length))
	}
	if m.Rules != nil {
		l = m.Rules.Size()
		n += 1 + l + sovBirdsnest(uint64(l))
	}
	if m.Cuckoo != nil {
		l = m.Cuckoo.Size()
		n += 1 + l + sovBirdsnest(uint64(l))
	}
	if m.Snapshot != nil {
		l = m.Snapshot.Size()
		n += 1 + l + sovBirdsnest(uint64(l))
	}
	return n
}

func (m *RulesConfig) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.AbsoluteExpireTime != 0 {
		n += 1 + sovBirdsnest(uint64(m.AbsoluteExpireTime))
	}
	return n
}

func (m *CuckooConfig) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.KeyType != 0 {
		n += 1 + sovBirdsnest(uint64(m.KeyType))
	}
	if m.TagsPerBucket != 0 {
		n += 1 + sovBirdsnest(uint64(m.TagsPerBucket))
	}
	if m.BitsPerItem != 0 {
		n += 1 + sovBirdsnest(uint64(m.BitsPerItem))
	}
	if m.MaxNumKeys != 0 {
		n += 1 + sovBirdsnest(uint64(m.MaxNumKeys))
	}
	if m.TableType != 0 {
		n += 1 + sovBirdsnest(uint64(m.TableType))
	}
	return n
}

func (m *SnapshotSerializerConfig) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Type != 0 {
		n += 1 + sovBirdsnest(uint64(m.Type))
	}
	if m.Timed != nil {
		l = m.Timed.Size()
		n += 1 + l + sovBirdsnest(uint64(l))
	}
	if m.BlockHeight != nil {
		l = m.BlockHeight.Size()
		n += 1 + l + sovBirdsnest(uint64(l))
	}
	l = len(m.Path)
	if l > 0 {
		n += 1 + l + sovBirdsnest(uint64(l))
	}
	return n
}

func (m *TimedSerializeIntervalConfig) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Interval != 0 {
		n += 1 + sovBirdsnest(uint64(m.Interval))
	}
	return n
}

func (m *BlockHeightSerializeIntervalConfig) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Interval != 0 {
		n += 1 + sovBirdsnest(uint64(m.Interval))
	}
	return n
}

func sovBirdsnest(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozBirdsnest(x uint64) (n int) {
	return sovBirdsnest(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *BirdsNest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBirdsnest
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BirdsNest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BirdsNest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Config", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBirdsnest
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBirdsnest
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthBirdsnest
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Config == nil {
				m.Config = &BirdsNestConfig{}
			}
			if err := m.Config.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Height", wireType)
			}
			m.Height = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBirdsnest
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Height |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CurrentIndex", wireType)
			}
			m.CurrentIndex = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBirdsnest
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CurrentIndex |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Filters", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBirdsnest
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBirdsnest
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthBirdsnest
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Filters = append(m.Filters, &CuckooFilter{})
			if err := m.Filters[len(m.Filters)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipBirdsnest(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthBirdsnest
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ShardingBirdsNest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBirdsnest
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ShardingBirdsNest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ShardingBirdsNest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Length", wireType)
			}
			m.Length = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBirdsnest
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Length |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Height", wireType)
			}
			m.Height = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBirdsnest
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Height |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Config", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBirdsnest
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBirdsnest
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthBirdsnest
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Config == nil {
				m.Config = &ShardingBirdsNestConfig{}
			}
			if err := m.Config.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipBirdsnest(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthBirdsnest
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CuckooFilter) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBirdsnest
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CuckooFilter: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CuckooFilter: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Cuckoo", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBirdsnest
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthBirdsnest
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthBirdsnest
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Cuckoo = append(m.Cuckoo[:0], dAtA[iNdEx:postIndex]...)
			if m.Cuckoo == nil {
				m.Cuckoo = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Extension", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBirdsnest
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthBirdsnest
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthBirdsnest
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Extension = append(m.Extension[:0], dAtA[iNdEx:postIndex]...)
			if m.Extension == nil {
				m.Extension = []byte{}
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Config", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBirdsnest
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthBirdsnest
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthBirdsnest
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Config = append(m.Config[:0], dAtA[iNdEx:postIndex]...)
			if m.Config == nil {
				m.Config = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipBirdsnest(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthBirdsnest
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ShardingBirdsNestConfig) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBirdsnest
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ShardingBirdsNestConfig: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ShardingBirdsNestConfig: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChainId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBirdsnest
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBirdsnest
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBirdsnest
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ChainId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Length", wireType)
			}
			m.Length = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBirdsnest
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Length |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Timeout", wireType)
			}
			m.Timeout = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBirdsnest
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Timeout |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Birdsnest", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBirdsnest
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBirdsnest
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthBirdsnest
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Birdsnest == nil {
				m.Birdsnest = &BirdsNestConfig{}
			}
			if err := m.Birdsnest.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Snapshot", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBirdsnest
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBirdsnest
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthBirdsnest
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Snapshot == nil {
				m.Snapshot = &SnapshotSerializerConfig{}
			}
			if err := m.Snapshot.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipBirdsnest(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthBirdsnest
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BirdsNestConfig) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBirdsnest
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BirdsNestConfig: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BirdsNestConfig: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChainId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBirdsnest
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBirdsnest
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBirdsnest
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ChainId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Length", wireType)
			}
			m.Length = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBirdsnest
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Length |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Rules", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBirdsnest
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBirdsnest
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthBirdsnest
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Rules == nil {
				m.Rules = &RulesConfig{}
			}
			if err := m.Rules.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Cuckoo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBirdsnest
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBirdsnest
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthBirdsnest
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Cuckoo == nil {
				m.Cuckoo = &CuckooConfig{}
			}
			if err := m.Cuckoo.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Snapshot", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBirdsnest
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBirdsnest
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthBirdsnest
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Snapshot == nil {
				m.Snapshot = &SnapshotSerializerConfig{}
			}
			if err := m.Snapshot.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipBirdsnest(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthBirdsnest
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RulesConfig) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBirdsnest
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RulesConfig: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RulesConfig: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AbsoluteExpireTime", wireType)
			}
			m.AbsoluteExpireTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBirdsnest
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AbsoluteExpireTime |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipBirdsnest(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthBirdsnest
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CuckooConfig) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBirdsnest
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CuckooConfig: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CuckooConfig: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field KeyType", wireType)
			}
			m.KeyType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBirdsnest
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.KeyType |= KeyType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TagsPerBucket", wireType)
			}
			m.TagsPerBucket = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBirdsnest
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TagsPerBucket |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BitsPerItem", wireType)
			}
			m.BitsPerItem = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBirdsnest
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BitsPerItem |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxNumKeys", wireType)
			}
			m.MaxNumKeys = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBirdsnest
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MaxNumKeys |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TableType", wireType)
			}
			m.TableType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBirdsnest
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TableType |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipBirdsnest(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthBirdsnest
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SnapshotSerializerConfig) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBirdsnest
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SnapshotSerializerConfig: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SnapshotSerializerConfig: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			m.Type = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBirdsnest
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Type |= SerializeIntervalType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Timed", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBirdsnest
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBirdsnest
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthBirdsnest
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Timed == nil {
				m.Timed = &TimedSerializeIntervalConfig{}
			}
			if err := m.Timed.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BlockHeight", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBirdsnest
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBirdsnest
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthBirdsnest
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.BlockHeight == nil {
				m.BlockHeight = &BlockHeightSerializeIntervalConfig{}
			}
			if err := m.BlockHeight.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Path", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBirdsnest
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBirdsnest
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBirdsnest
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Path = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipBirdsnest(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthBirdsnest
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TimedSerializeIntervalConfig) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBirdsnest
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TimedSerializeIntervalConfig: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TimedSerializeIntervalConfig: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Interval", wireType)
			}
			m.Interval = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBirdsnest
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Interval |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipBirdsnest(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthBirdsnest
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BlockHeightSerializeIntervalConfig) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBirdsnest
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BlockHeightSerializeIntervalConfig: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BlockHeightSerializeIntervalConfig: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Interval", wireType)
			}
			m.Interval = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBirdsnest
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Interval |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipBirdsnest(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthBirdsnest
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipBirdsnest(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowBirdsnest
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowBirdsnest
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowBirdsnest
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthBirdsnest
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupBirdsnest
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthBirdsnest
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthBirdsnest        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowBirdsnest          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupBirdsnest = fmt.Errorf("proto: unexpected end of group")
)
