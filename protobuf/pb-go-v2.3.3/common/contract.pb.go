// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: common/contract.proto

package common

import (
	accesscontrol "zhanghefan123/security/protobuf/pb-go/accesscontrol"
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// smart contract runtime, contains vm type and language type
type RuntimeType int32

const (
	RuntimeType_INVALID RuntimeType = 0
	// native implement in chainmaker-go
	RuntimeType_NATIVE RuntimeType = 1
	// vm-wasmer, language-c++
	RuntimeType_WASMER RuntimeType = 2
	// vm-wxvm, language-cpp
	RuntimeType_WXVM RuntimeType = 3
	// wasm interpreter in go
	RuntimeType_GASM RuntimeType = 4
	// vm-evm
	RuntimeType_EVM RuntimeType = 5
	// vm-docker, language-golang
	RuntimeType_DOCKER_GO RuntimeType = 6
	// vm-java, language-java
	RuntimeType_JAVA RuntimeType = 7
	// vm-go, language-go
	RuntimeType_GO RuntimeType = 8
)

var RuntimeType_name = map[int32]string{
	0: "INVALID",
	1: "NATIVE",
	2: "WASMER",
	3: "WXVM",
	4: "GASM",
	5: "EVM",
	6: "DOCKER_GO",
	7: "JAVA",
	8: "GO",
}

var RuntimeType_value = map[string]int32{
	"INVALID":   0,
	"NATIVE":    1,
	"WASMER":    2,
	"WXVM":      3,
	"GASM":      4,
	"EVM":       5,
	"DOCKER_GO": 6,
	"JAVA":      7,
	"GO":        8,
}

func (x RuntimeType) String() string {
	return proto.EnumName(RuntimeType_name, int32(x))
}

func (RuntimeType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_a1095c55e7168440, []int{0}
}

// current contract status
type ContractStatus int32

const (
	// normal, can be invoked
	ContractStatus_NORMAL ContractStatus = 0
	// frozen, cannot be invoked temporarily
	ContractStatus_FROZEN ContractStatus = 1
	// revoked, cannot be invoked permanently
	ContractStatus_REVOKED ContractStatus = 2
)

var ContractStatus_name = map[int32]string{
	0: "NORMAL",
	1: "FROZEN",
	2: "REVOKED",
}

var ContractStatus_value = map[string]int32{
	"NORMAL":  0,
	"FROZEN":  1,
	"REVOKED": 2,
}

func (x ContractStatus) String() string {
	return proto.EnumName(ContractStatus_name, int32(x))
}

func (ContractStatus) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_a1095c55e7168440, []int{1}
}

type Contract struct {
	// smart contract name, set by contract creator, can have multiple versions
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// smart contract version, set by contract creator, name + version should be unique
	Version string `protobuf:"bytes,2,opt,name=version,proto3" json:"version,omitempty"`
	// smart contract runtime type, set by contract creator
	RuntimeType RuntimeType `protobuf:"varint,3,opt,name=runtime_type,json=runtimeType,proto3,enum=common.RuntimeType" json:"runtime_type,omitempty"`
	//contract status
	Status ContractStatus `protobuf:"varint,4,opt,name=status,proto3,enum=common.ContractStatus" json:"status,omitempty"`
	//contract creator identity
	Creator *accesscontrol.MemberFull `protobuf:"bytes,5,opt,name=creator,proto3" json:"creator,omitempty"`
	//contract address
	Address string `protobuf:"bytes,6,opt,name=address,proto3" json:"address,omitempty"`
}

func (m *Contract) Reset()         { *m = Contract{} }
func (m *Contract) String() string { return proto.CompactTextString(m) }
func (*Contract) ProtoMessage()    {}
func (*Contract) Descriptor() ([]byte, []int) {
	return fileDescriptor_a1095c55e7168440, []int{0}
}
func (m *Contract) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Contract) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Contract.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Contract) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Contract.Merge(m, src)
}
func (m *Contract) XXX_Size() int {
	return m.Size()
}
func (m *Contract) XXX_DiscardUnknown() {
	xxx_messageInfo_Contract.DiscardUnknown(m)
}

var xxx_messageInfo_Contract proto.InternalMessageInfo

func (m *Contract) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Contract) GetVersion() string {
	if m != nil {
		return m.Version
	}
	return ""
}

func (m *Contract) GetRuntimeType() RuntimeType {
	if m != nil {
		return m.RuntimeType
	}
	return RuntimeType_INVALID
}

func (m *Contract) GetStatus() ContractStatus {
	if m != nil {
		return m.Status
	}
	return ContractStatus_NORMAL
}

func (m *Contract) GetCreator() *accesscontrol.MemberFull {
	if m != nil {
		return m.Creator
	}
	return nil
}

func (m *Contract) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

func init() {
	proto.RegisterEnum("common.RuntimeType", RuntimeType_name, RuntimeType_value)
	proto.RegisterEnum("common.ContractStatus", ContractStatus_name, ContractStatus_value)
	proto.RegisterType((*Contract)(nil), "common.Contract")
}

func init() { proto.RegisterFile("common/contract.proto", fileDescriptor_a1095c55e7168440) }

var fileDescriptor_a1095c55e7168440 = []byte{
	// 418 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x54, 0x52, 0xc1, 0x6a, 0xdb, 0x40,
	0x14, 0xf4, 0xda, 0x8e, 0xe4, 0x3c, 0xb7, 0x61, 0xd9, 0xd2, 0xb2, 0xcd, 0x41, 0x98, 0x9e, 0xdc,
	0x40, 0x25, 0x70, 0x68, 0xef, 0x6a, 0xac, 0x18, 0x37, 0x91, 0x05, 0xeb, 0xa0, 0x94, 0x40, 0x09,
	0x6b, 0x65, 0x71, 0x4d, 0x2d, 0xad, 0x58, 0xad, 0x03, 0xf9, 0x8b, 0x7e, 0x56, 0x8f, 0x39, 0xf6,
	0x58, 0xec, 0x0f, 0xe8, 0x2f, 0x04, 0xad, 0x24, 0x12, 0xdf, 0xde, 0xbc, 0x37, 0xc3, 0xcc, 0x48,
	0x0b, 0x6f, 0x13, 0x99, 0xa6, 0x32, 0xf3, 0x12, 0x99, 0x69, 0xc5, 0x13, 0xed, 0xe6, 0x4a, 0x6a,
	0x49, 0xac, 0x6a, 0x7d, 0x7c, 0xcc, 0x93, 0x44, 0x14, 0x85, 0xb9, 0xca, 0xb5, 0x97, 0x8a, 0x74,
	0x21, 0x54, 0xc5, 0xf9, 0xf0, 0x1f, 0x41, 0xef, 0xac, 0x96, 0x11, 0x02, 0xdd, 0x8c, 0xa7, 0x82,
	0xa2, 0x01, 0x1a, 0x1e, 0x32, 0x33, 0x13, 0x0a, 0xf6, 0xbd, 0x50, 0xc5, 0x4a, 0x66, 0xb4, 0x6d,
	0xd6, 0x0d, 0x24, 0x5f, 0xe0, 0x95, 0xda, 0x64, 0x7a, 0x95, 0x8a, 0x5b, 0xfd, 0x90, 0x0b, 0xda,
	0x19, 0xa0, 0xe1, 0xd1, 0xe8, 0x8d, 0x5b, 0xb9, 0xba, 0xac, 0xba, 0x5d, 0x3d, 0xe4, 0x82, 0xf5,
	0xd5, 0x33, 0x20, 0x2e, 0x58, 0x85, 0xe6, 0x7a, 0x53, 0xd0, 0xae, 0x51, 0xbc, 0x6b, 0x14, 0x4d,
	0x8e, 0xb9, 0xb9, 0xb2, 0x9a, 0x45, 0x4e, 0xc1, 0x4e, 0x94, 0xe0, 0x5a, 0x2a, 0x7a, 0x30, 0x40,
	0xc3, 0xfe, 0xe8, 0xbd, 0xbb, 0x57, 0xc8, 0x0d, 0x4d, 0xa1, 0xf3, 0xcd, 0x7a, 0xcd, 0x1a, 0x66,
	0x19, 0x9b, 0xdf, 0xdd, 0x29, 0x51, 0x14, 0xd4, 0xaa, 0x62, 0xd7, 0xf0, 0x24, 0x87, 0xfe, 0x8b,
	0x68, 0xa4, 0x0f, 0xf6, 0x74, 0x16, 0xfb, 0x97, 0xd3, 0x31, 0x6e, 0x11, 0x00, 0x6b, 0xe6, 0x5f,
	0x4d, 0xe3, 0x00, 0xa3, 0x72, 0xbe, 0xf6, 0xe7, 0x61, 0xc0, 0x70, 0x9b, 0xf4, 0xa0, 0x7b, 0xfd,
	0x3d, 0x0e, 0x71, 0xa7, 0x9c, 0x26, 0xfe, 0x3c, 0xc4, 0x5d, 0x62, 0x43, 0x27, 0x88, 0x43, 0x7c,
	0x40, 0x5e, 0xc3, 0xe1, 0x38, 0x3a, 0xbb, 0x08, 0xd8, 0xed, 0x24, 0xc2, 0x56, 0xc9, 0xf8, 0xe6,
	0xc7, 0x3e, 0xb6, 0x89, 0x05, 0xed, 0x49, 0x84, 0x7b, 0x27, 0x9f, 0xe1, 0x68, 0xbf, 0x9a, 0xf1,
	0x89, 0x58, 0xe8, 0x5f, 0x56, 0x9e, 0xe7, 0x2c, 0xba, 0x09, 0x66, 0x18, 0x95, 0x61, 0x58, 0x10,
	0x47, 0x17, 0xc1, 0x18, 0xb7, 0xbf, 0xfe, 0xf8, 0xb3, 0x75, 0xd0, 0xe3, 0xd6, 0x41, 0xff, 0xb6,
	0x0e, 0xfa, 0xbd, 0x73, 0x5a, 0x8f, 0x3b, 0xa7, 0xf5, 0x77, 0xe7, 0xb4, 0x80, 0x4a, 0xb5, 0x74,
	0x93, 0x9f, 0x7c, 0x95, 0xa5, 0xfc, 0x57, 0xf9, 0x2b, 0x17, 0xf5, 0x27, 0xbc, 0xf9, 0xf8, 0x62,
	0x2b, 0xd5, 0xd2, 0x7b, 0x86, 0x5e, 0xbe, 0xf8, 0xb4, 0x94, 0xde, 0xfd, 0xc8, 0xab, 0xa8, 0x0b,
	0xcb, 0x3c, 0x80, 0xd3, 0xa7, 0x00, 0x00, 0x00, 0xff, 0xff, 0x53, 0x42, 0xac, 0x9c, 0x3d, 0x02,
	0x00, 0x00,
}

func (m *Contract) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Contract) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Contract) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Address) > 0 {
		i -= len(m.Address)
		copy(dAtA[i:], m.Address)
		i = encodeVarintContract(dAtA, i, uint64(len(m.Address)))
		i--
		dAtA[i] = 0x32
	}
	if m.Creator != nil {
		{
			size, err := m.Creator.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintContract(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2a
	}
	if m.Status != 0 {
		i = encodeVarintContract(dAtA, i, uint64(m.Status))
		i--
		dAtA[i] = 0x20
	}
	if m.RuntimeType != 0 {
		i = encodeVarintContract(dAtA, i, uint64(m.RuntimeType))
		i--
		dAtA[i] = 0x18
	}
	if len(m.Version) > 0 {
		i -= len(m.Version)
		copy(dAtA[i:], m.Version)
		i = encodeVarintContract(dAtA, i, uint64(len(m.Version)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintContract(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintContract(dAtA []byte, offset int, v uint64) int {
	offset -= sovContract(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *Contract) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovContract(uint64(l))
	}
	l = len(m.Version)
	if l > 0 {
		n += 1 + l + sovContract(uint64(l))
	}
	if m.RuntimeType != 0 {
		n += 1 + sovContract(uint64(m.RuntimeType))
	}
	if m.Status != 0 {
		n += 1 + sovContract(uint64(m.Status))
	}
	if m.Creator != nil {
		l = m.Creator.Size()
		n += 1 + l + sovContract(uint64(l))
	}
	l = len(m.Address)
	if l > 0 {
		n += 1 + l + sovContract(uint64(l))
	}
	return n
}

func sovContract(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozContract(x uint64) (n int) {
	return sovContract(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Contract) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowContract
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Contract: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Contract: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowContract
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthContract
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthContract
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Version", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowContract
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthContract
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthContract
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Version = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RuntimeType", wireType)
			}
			m.RuntimeType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowContract
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RuntimeType |= RuntimeType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			m.Status = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowContract
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Status |= ContractStatus(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowContract
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthContract
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthContract
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Creator == nil {
				m.Creator = &accesscontrol.MemberFull{}
			}
			if err := m.Creator.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Address", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowContract
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthContract
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthContract
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Address = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipContract(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthContract
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipContract(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowContract
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowContract
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowContract
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthContract
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupContract
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthContract
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthContract        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowContract          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupContract = fmt.Errorf("proto: unexpected end of group")
)
