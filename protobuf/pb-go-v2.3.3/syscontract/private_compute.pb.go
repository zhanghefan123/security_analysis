// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: syscontract/private_compute.proto

package syscontract

import (
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// methods of private compute contract
type PrivateComputeFunction int32

const (
	// get contract code
	PrivateComputeFunction_GET_CONTRACT PrivateComputeFunction = 0
	// get private data
	PrivateComputeFunction_GET_DATA PrivateComputeFunction = 1
	// save cert of tee
	PrivateComputeFunction_SAVE_CA_CERT PrivateComputeFunction = 2
	// save private data dir
	PrivateComputeFunction_SAVE_DIR PrivateComputeFunction = 3
	// save data of private computation result
	PrivateComputeFunction_SAVE_DATA PrivateComputeFunction = 4
	//save enclave report
	PrivateComputeFunction_SAVE_ENCLAVE_REPORT PrivateComputeFunction = 5
	//get enclave proof
	PrivateComputeFunction_GET_ENCLAVE_PROOF PrivateComputeFunction = 6
	//get cert of tee
	PrivateComputeFunction_GET_CA_CERT PrivateComputeFunction = 7
	//get private data dir
	PrivateComputeFunction_GET_DIR PrivateComputeFunction = 8
	//check caller cert auth
	PrivateComputeFunction_CHECK_CALLER_CERT_AUTH           PrivateComputeFunction = 9
	PrivateComputeFunction_GET_ENCLAVE_ENCRYPT_PUB_KEY      PrivateComputeFunction = 10
	PrivateComputeFunction_GET_ENCLAVE_VERIFICATION_PUB_KEY PrivateComputeFunction = 11
	PrivateComputeFunction_GET_ENCLAVE_REPORT               PrivateComputeFunction = 12
	PrivateComputeFunction_GET_ENCLAVE_CHALLENGE            PrivateComputeFunction = 13
	PrivateComputeFunction_GET_ENCLAVE_SIGNATURE            PrivateComputeFunction = 14
	PrivateComputeFunction_SAVE_REMOTE_ATTESTATION          PrivateComputeFunction = 15
)

var PrivateComputeFunction_name = map[int32]string{
	0:  "GET_CONTRACT",
	1:  "GET_DATA",
	2:  "SAVE_CA_CERT",
	3:  "SAVE_DIR",
	4:  "SAVE_DATA",
	5:  "SAVE_ENCLAVE_REPORT",
	6:  "GET_ENCLAVE_PROOF",
	7:  "GET_CA_CERT",
	8:  "GET_DIR",
	9:  "CHECK_CALLER_CERT_AUTH",
	10: "GET_ENCLAVE_ENCRYPT_PUB_KEY",
	11: "GET_ENCLAVE_VERIFICATION_PUB_KEY",
	12: "GET_ENCLAVE_REPORT",
	13: "GET_ENCLAVE_CHALLENGE",
	14: "GET_ENCLAVE_SIGNATURE",
	15: "SAVE_REMOTE_ATTESTATION",
}

var PrivateComputeFunction_value = map[string]int32{
	"GET_CONTRACT":                     0,
	"GET_DATA":                         1,
	"SAVE_CA_CERT":                     2,
	"SAVE_DIR":                         3,
	"SAVE_DATA":                        4,
	"SAVE_ENCLAVE_REPORT":              5,
	"GET_ENCLAVE_PROOF":                6,
	"GET_CA_CERT":                      7,
	"GET_DIR":                          8,
	"CHECK_CALLER_CERT_AUTH":           9,
	"GET_ENCLAVE_ENCRYPT_PUB_KEY":      10,
	"GET_ENCLAVE_VERIFICATION_PUB_KEY": 11,
	"GET_ENCLAVE_REPORT":               12,
	"GET_ENCLAVE_CHALLENGE":            13,
	"GET_ENCLAVE_SIGNATURE":            14,
	"SAVE_REMOTE_ATTESTATION":          15,
}

func (x PrivateComputeFunction) String() string {
	return proto.EnumName(PrivateComputeFunction_name, int32(x))
}

func (PrivateComputeFunction) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_a33579392083061d, []int{0}
}

type RemoteAttestationRequest struct {
	SignPair []*SignInfo               `protobuf:"bytes,1,rep,name=sign_pair,json=signPair,proto3" json:"sign_pair,omitempty"`
	Payload  *RemoteAttestationPayload `protobuf:"bytes,2,opt,name=payload,proto3" json:"payload,omitempty"`
}

func (m *RemoteAttestationRequest) Reset()         { *m = RemoteAttestationRequest{} }
func (m *RemoteAttestationRequest) String() string { return proto.CompactTextString(m) }
func (*RemoteAttestationRequest) ProtoMessage()    {}
func (*RemoteAttestationRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_a33579392083061d, []int{0}
}
func (m *RemoteAttestationRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RemoteAttestationRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RemoteAttestationRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RemoteAttestationRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RemoteAttestationRequest.Merge(m, src)
}
func (m *RemoteAttestationRequest) XXX_Size() int {
	return m.Size()
}
func (m *RemoteAttestationRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_RemoteAttestationRequest.DiscardUnknown(m)
}

var xxx_messageInfo_RemoteAttestationRequest proto.InternalMessageInfo

func (m *RemoteAttestationRequest) GetSignPair() []*SignInfo {
	if m != nil {
		return m.SignPair
	}
	return nil
}

func (m *RemoteAttestationRequest) GetPayload() *RemoteAttestationPayload {
	if m != nil {
		return m.Payload
	}
	return nil
}

type RemoteAttestationPayload struct {
	Challenge string   `protobuf:"bytes,1,opt,name=challenge,proto3" json:"challenge,omitempty"`
	OrgId     []string `protobuf:"bytes,2,rep,name=org_id,json=orgId,proto3" json:"org_id,omitempty"`
}

func (m *RemoteAttestationPayload) Reset()         { *m = RemoteAttestationPayload{} }
func (m *RemoteAttestationPayload) String() string { return proto.CompactTextString(m) }
func (*RemoteAttestationPayload) ProtoMessage()    {}
func (*RemoteAttestationPayload) Descriptor() ([]byte, []int) {
	return fileDescriptor_a33579392083061d, []int{1}
}
func (m *RemoteAttestationPayload) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RemoteAttestationPayload) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RemoteAttestationPayload.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RemoteAttestationPayload) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RemoteAttestationPayload.Merge(m, src)
}
func (m *RemoteAttestationPayload) XXX_Size() int {
	return m.Size()
}
func (m *RemoteAttestationPayload) XXX_DiscardUnknown() {
	xxx_messageInfo_RemoteAttestationPayload.DiscardUnknown(m)
}

var xxx_messageInfo_RemoteAttestationPayload proto.InternalMessageInfo

func (m *RemoteAttestationPayload) GetChallenge() string {
	if m != nil {
		return m.Challenge
	}
	return ""
}

func (m *RemoteAttestationPayload) GetOrgId() []string {
	if m != nil {
		return m.OrgId
	}
	return nil
}

type PrivateDeployRequest struct {
	SignPair []*SignInfo           `protobuf:"bytes,1,rep,name=sign_pair,json=signPair,proto3" json:"sign_pair,omitempty"`
	Payload  *PrivateDeployPayload `protobuf:"bytes,2,opt,name=payload,proto3" json:"payload,omitempty"`
}

func (m *PrivateDeployRequest) Reset()         { *m = PrivateDeployRequest{} }
func (m *PrivateDeployRequest) String() string { return proto.CompactTextString(m) }
func (*PrivateDeployRequest) ProtoMessage()    {}
func (*PrivateDeployRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_a33579392083061d, []int{2}
}
func (m *PrivateDeployRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PrivateDeployRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PrivateDeployRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PrivateDeployRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PrivateDeployRequest.Merge(m, src)
}
func (m *PrivateDeployRequest) XXX_Size() int {
	return m.Size()
}
func (m *PrivateDeployRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_PrivateDeployRequest.DiscardUnknown(m)
}

var xxx_messageInfo_PrivateDeployRequest proto.InternalMessageInfo

func (m *PrivateDeployRequest) GetSignPair() []*SignInfo {
	if m != nil {
		return m.SignPair
	}
	return nil
}

func (m *PrivateDeployRequest) GetPayload() *PrivateDeployPayload {
	if m != nil {
		return m.Payload
	}
	return nil
}

type PrivateDeployPayload struct {
	CodeBytes string `protobuf:"bytes,1,opt,name=code_bytes,json=codeBytes,proto3" json:"code_bytes,omitempty"`
	// deploy args which is packed by abi
	PrivateRlpData  string   `protobuf:"bytes,2,opt,name=private_rlp_data,json=privateRlpData,proto3" json:"private_rlp_data,omitempty"`
	Passwd          string   `protobuf:"bytes,3,opt,name=passwd,proto3" json:"passwd,omitempty"`
	SigAlgo         string   `protobuf:"bytes,4,opt,name=sig_algo,json=sigAlgo,proto3" json:"sig_algo,omitempty"`
	ContractName    string   `protobuf:"bytes,5,opt,name=contract_name,json=contractName,proto3" json:"contract_name,omitempty"`
	ContractVersion string   `protobuf:"bytes,6,opt,name=contract_version,json=contractVersion,proto3" json:"contract_version,omitempty"`
	CodeHash        string   `protobuf:"bytes,7,opt,name=code_hash,json=codeHash,proto3" json:"code_hash,omitempty"`
	OrgId           []string `protobuf:"bytes,8,rep,name=org_id,json=orgId,proto3" json:"org_id,omitempty"`
	TimeStamp       string   `protobuf:"bytes,9,opt,name=time_stamp,json=timeStamp,proto3" json:"time_stamp,omitempty"`
}

func (m *PrivateDeployPayload) Reset()         { *m = PrivateDeployPayload{} }
func (m *PrivateDeployPayload) String() string { return proto.CompactTextString(m) }
func (*PrivateDeployPayload) ProtoMessage()    {}
func (*PrivateDeployPayload) Descriptor() ([]byte, []int) {
	return fileDescriptor_a33579392083061d, []int{3}
}
func (m *PrivateDeployPayload) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PrivateDeployPayload) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PrivateDeployPayload.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PrivateDeployPayload) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PrivateDeployPayload.Merge(m, src)
}
func (m *PrivateDeployPayload) XXX_Size() int {
	return m.Size()
}
func (m *PrivateDeployPayload) XXX_DiscardUnknown() {
	xxx_messageInfo_PrivateDeployPayload.DiscardUnknown(m)
}

var xxx_messageInfo_PrivateDeployPayload proto.InternalMessageInfo

func (m *PrivateDeployPayload) GetCodeBytes() string {
	if m != nil {
		return m.CodeBytes
	}
	return ""
}

func (m *PrivateDeployPayload) GetPrivateRlpData() string {
	if m != nil {
		return m.PrivateRlpData
	}
	return ""
}

func (m *PrivateDeployPayload) GetPasswd() string {
	if m != nil {
		return m.Passwd
	}
	return ""
}

func (m *PrivateDeployPayload) GetSigAlgo() string {
	if m != nil {
		return m.SigAlgo
	}
	return ""
}

func (m *PrivateDeployPayload) GetContractName() string {
	if m != nil {
		return m.ContractName
	}
	return ""
}

func (m *PrivateDeployPayload) GetContractVersion() string {
	if m != nil {
		return m.ContractVersion
	}
	return ""
}

func (m *PrivateDeployPayload) GetCodeHash() string {
	if m != nil {
		return m.CodeHash
	}
	return ""
}

func (m *PrivateDeployPayload) GetOrgId() []string {
	if m != nil {
		return m.OrgId
	}
	return nil
}

func (m *PrivateDeployPayload) GetTimeStamp() string {
	if m != nil {
		return m.TimeStamp
	}
	return ""
}

type PrivateComputeRequest struct {
	SignPair []*SignInfo            `protobuf:"bytes,1,rep,name=sign_pair,json=signPair,proto3" json:"sign_pair,omitempty"`
	Payload  *PrivateComputePayload `protobuf:"bytes,2,opt,name=payload,proto3" json:"payload,omitempty"`
}

func (m *PrivateComputeRequest) Reset()         { *m = PrivateComputeRequest{} }
func (m *PrivateComputeRequest) String() string { return proto.CompactTextString(m) }
func (*PrivateComputeRequest) ProtoMessage()    {}
func (*PrivateComputeRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_a33579392083061d, []int{4}
}
func (m *PrivateComputeRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PrivateComputeRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PrivateComputeRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PrivateComputeRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PrivateComputeRequest.Merge(m, src)
}
func (m *PrivateComputeRequest) XXX_Size() int {
	return m.Size()
}
func (m *PrivateComputeRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_PrivateComputeRequest.DiscardUnknown(m)
}

var xxx_messageInfo_PrivateComputeRequest proto.InternalMessageInfo

func (m *PrivateComputeRequest) GetSignPair() []*SignInfo {
	if m != nil {
		return m.SignPair
	}
	return nil
}

func (m *PrivateComputeRequest) GetPayload() *PrivateComputePayload {
	if m != nil {
		return m.Payload
	}
	return nil
}

type PrivateComputePayload struct {
	PrivateRlpData string   `protobuf:"bytes,1,opt,name=private_rlp_data,json=privateRlpData,proto3" json:"private_rlp_data,omitempty"`
	Passwd         string   `protobuf:"bytes,2,opt,name=passwd,proto3" json:"passwd,omitempty"`
	SigAlgo        string   `protobuf:"bytes,3,opt,name=sig_algo,json=sigAlgo,proto3" json:"sig_algo,omitempty"`
	ContractName   string   `protobuf:"bytes,4,opt,name=contract_name,json=contractName,proto3" json:"contract_name,omitempty"`
	CodeHash       string   `protobuf:"bytes,5,opt,name=code_hash,json=codeHash,proto3" json:"code_hash,omitempty"`
	OrgId          []string `protobuf:"bytes,6,rep,name=org_id,json=orgId,proto3" json:"org_id,omitempty"`
	TimeStamp      string   `protobuf:"bytes,7,opt,name=time_stamp,json=timeStamp,proto3" json:"time_stamp,omitempty"`
}

func (m *PrivateComputePayload) Reset()         { *m = PrivateComputePayload{} }
func (m *PrivateComputePayload) String() string { return proto.CompactTextString(m) }
func (*PrivateComputePayload) ProtoMessage()    {}
func (*PrivateComputePayload) Descriptor() ([]byte, []int) {
	return fileDescriptor_a33579392083061d, []int{5}
}
func (m *PrivateComputePayload) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PrivateComputePayload) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PrivateComputePayload.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PrivateComputePayload) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PrivateComputePayload.Merge(m, src)
}
func (m *PrivateComputePayload) XXX_Size() int {
	return m.Size()
}
func (m *PrivateComputePayload) XXX_DiscardUnknown() {
	xxx_messageInfo_PrivateComputePayload.DiscardUnknown(m)
}

var xxx_messageInfo_PrivateComputePayload proto.InternalMessageInfo

func (m *PrivateComputePayload) GetPrivateRlpData() string {
	if m != nil {
		return m.PrivateRlpData
	}
	return ""
}

func (m *PrivateComputePayload) GetPasswd() string {
	if m != nil {
		return m.Passwd
	}
	return ""
}

func (m *PrivateComputePayload) GetSigAlgo() string {
	if m != nil {
		return m.SigAlgo
	}
	return ""
}

func (m *PrivateComputePayload) GetContractName() string {
	if m != nil {
		return m.ContractName
	}
	return ""
}

func (m *PrivateComputePayload) GetCodeHash() string {
	if m != nil {
		return m.CodeHash
	}
	return ""
}

func (m *PrivateComputePayload) GetOrgId() []string {
	if m != nil {
		return m.OrgId
	}
	return nil
}

func (m *PrivateComputePayload) GetTimeStamp() string {
	if m != nil {
		return m.TimeStamp
	}
	return ""
}

type SignInfo struct {
	ClientSign string `protobuf:"bytes,1,opt,name=client_sign,json=clientSign,proto3" json:"client_sign,omitempty"`
	Cert       string `protobuf:"bytes,2,opt,name=cert,proto3" json:"cert,omitempty"`
}

func (m *SignInfo) Reset()         { *m = SignInfo{} }
func (m *SignInfo) String() string { return proto.CompactTextString(m) }
func (*SignInfo) ProtoMessage()    {}
func (*SignInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_a33579392083061d, []int{6}
}
func (m *SignInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SignInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SignInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SignInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SignInfo.Merge(m, src)
}
func (m *SignInfo) XXX_Size() int {
	return m.Size()
}
func (m *SignInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_SignInfo.DiscardUnknown(m)
}

var xxx_messageInfo_SignInfo proto.InternalMessageInfo

func (m *SignInfo) GetClientSign() string {
	if m != nil {
		return m.ClientSign
	}
	return ""
}

func (m *SignInfo) GetCert() string {
	if m != nil {
		return m.Cert
	}
	return ""
}

func init() {
	proto.RegisterEnum("syscontract.PrivateComputeFunction", PrivateComputeFunction_name, PrivateComputeFunction_value)
	proto.RegisterType((*RemoteAttestationRequest)(nil), "syscontract.RemoteAttestationRequest")
	proto.RegisterType((*RemoteAttestationPayload)(nil), "syscontract.RemoteAttestationPayload")
	proto.RegisterType((*PrivateDeployRequest)(nil), "syscontract.PrivateDeployRequest")
	proto.RegisterType((*PrivateDeployPayload)(nil), "syscontract.PrivateDeployPayload")
	proto.RegisterType((*PrivateComputeRequest)(nil), "syscontract.PrivateComputeRequest")
	proto.RegisterType((*PrivateComputePayload)(nil), "syscontract.PrivateComputePayload")
	proto.RegisterType((*SignInfo)(nil), "syscontract.SignInfo")
}

func init() { proto.RegisterFile("syscontract/private_compute.proto", fileDescriptor_a33579392083061d) }

var fileDescriptor_a33579392083061d = []byte{
	// 795 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xa4, 0x55, 0xcf, 0x6f, 0xe3, 0x44,
	0x14, 0xae, 0x9b, 0x36, 0x89, 0x5f, 0xda, 0xad, 0x19, 0x48, 0xd7, 0x4b, 0xd9, 0x6c, 0x37, 0x80,
	0x14, 0x90, 0x48, 0xa4, 0x72, 0x04, 0x69, 0xe5, 0xba, 0x6e, 0x6b, 0x6d, 0x49, 0xa2, 0x89, 0x5b,
	0x69, 0xb9, 0x8c, 0x26, 0xce, 0xe0, 0x58, 0x38, 0x1e, 0x63, 0x4f, 0x8b, 0x72, 0xe6, 0x80, 0x38,
	0xc1, 0x3f, 0xc3, 0xff, 0xc0, 0x71, 0x8f, 0x1c, 0x51, 0x7b, 0xe5, 0x8f, 0x58, 0x8d, 0x7f, 0x74,
	0x9d, 0x1f, 0xd5, 0x1e, 0x7a, 0x4a, 0xe6, 0x7b, 0xdf, 0xbc, 0xf7, 0xbe, 0xef, 0xcb, 0x28, 0xf0,
	0x32, 0x99, 0x27, 0x2e, 0x0f, 0x45, 0x4c, 0x5d, 0xd1, 0x8b, 0x62, 0xff, 0x86, 0x0a, 0x46, 0x5c,
	0x3e, 0x8b, 0xae, 0x05, 0xeb, 0x46, 0x31, 0x17, 0x1c, 0x35, 0x4a, 0x94, 0xf6, 0x9f, 0x0a, 0xe8,
	0x98, 0xcd, 0xb8, 0x60, 0x86, 0x10, 0x2c, 0x11, 0x54, 0xf8, 0x3c, 0xc4, 0xec, 0x97, 0x6b, 0x96,
	0x08, 0x74, 0x04, 0x6a, 0xe2, 0x7b, 0x21, 0x89, 0xa8, 0x1f, 0xeb, 0xca, 0x61, 0xa5, 0xd3, 0x38,
	0x6a, 0x76, 0x4b, 0xb7, 0xbb, 0x23, 0xdf, 0x0b, 0xed, 0xf0, 0x27, 0x8e, 0xeb, 0x92, 0x37, 0xa4,
	0x7e, 0x8c, 0x5e, 0x41, 0x2d, 0xa2, 0xf3, 0x80, 0xd3, 0x89, 0xbe, 0x79, 0xa8, 0x74, 0x1a, 0x47,
	0x5f, 0x2e, 0xdc, 0x58, 0x99, 0x35, 0xcc, 0xc8, 0xb8, 0xb8, 0xd5, 0x1e, 0xac, 0x59, 0x28, 0x27,
	0xa1, 0xcf, 0x40, 0x75, 0xa7, 0x34, 0x08, 0x58, 0xe8, 0x31, 0x5d, 0x39, 0x54, 0x3a, 0x2a, 0x7e,
	0x0f, 0xa0, 0x26, 0x54, 0x79, 0xec, 0x11, 0x5f, 0x4e, 0xae, 0x74, 0x54, 0xbc, 0xcd, 0x63, 0xcf,
	0x9e, 0xb4, 0x7f, 0x57, 0xe0, 0x93, 0x61, 0xe6, 0xc4, 0x09, 0x8b, 0x02, 0x3e, 0x7f, 0x8c, 0xbc,
	0xef, 0x96, 0xe5, 0xbd, 0x5c, 0xb8, 0xb1, 0x30, 0x67, 0x45, 0xda, 0xdf, 0x9b, 0x4b, 0x9b, 0x14,
	0xba, 0x9e, 0x03, 0xb8, 0x7c, 0xc2, 0xc8, 0x78, 0x2e, 0x58, 0x72, 0x2f, 0x8c, 0x4f, 0xd8, 0xb1,
	0x04, 0x50, 0x07, 0xb4, 0x22, 0xca, 0x38, 0x88, 0xc8, 0x84, 0x0a, 0x9a, 0x4e, 0x57, 0xf1, 0x93,
	0x1c, 0xc7, 0x41, 0x74, 0x42, 0x05, 0x45, 0xfb, 0x50, 0x8d, 0x68, 0x92, 0xfc, 0x3a, 0xd1, 0x2b,
	0x69, 0x3d, 0x3f, 0xa1, 0x67, 0x20, 0x25, 0x10, 0x1a, 0x78, 0x5c, 0xdf, 0x4a, 0x2b, 0xb5, 0xc4,
	0xf7, 0x8c, 0xc0, 0xe3, 0xe8, 0x73, 0xd8, 0x2d, 0xd6, 0x27, 0x21, 0x9d, 0x31, 0x7d, 0x3b, 0xad,
	0xef, 0x14, 0x60, 0x9f, 0xce, 0x18, 0xfa, 0x0a, 0xb4, 0x7b, 0xd2, 0x0d, 0x8b, 0x13, 0x9f, 0x87,
	0x7a, 0x35, 0xe5, 0xed, 0x15, 0xf8, 0x55, 0x06, 0xa3, 0x03, 0x48, 0x37, 0x27, 0x53, 0x9a, 0x4c,
	0xf5, 0x5a, 0xca, 0xa9, 0x4b, 0xe0, 0x9c, 0x26, 0xd3, 0x52, 0x44, 0xf5, 0x52, 0x44, 0x52, 0xbf,
	0xf0, 0x67, 0x8c, 0x24, 0x82, 0xce, 0x22, 0x5d, 0xcd, 0xf4, 0x4b, 0x64, 0x24, 0x81, 0xf6, 0x1f,
	0x0a, 0x34, 0x73, 0xdf, 0xcc, 0xec, 0xa7, 0xfc, 0x98, 0x08, 0xbf, 0x5f, 0x8e, 0xb0, 0xbd, 0x2e,
	0xc2, 0x7c, 0xd0, 0x4a, 0x86, 0xff, 0xaf, 0xec, 0x52, 0x84, 0xb8, 0x2e, 0x25, 0xe5, 0x03, 0x29,
	0x6d, 0x3e, 0x98, 0x52, 0xe5, 0x03, 0x29, 0x6d, 0xad, 0x49, 0x69, 0xc1, 0xfa, 0xed, 0x07, 0xad,
	0xaf, 0x3e, 0x6c, 0x7d, 0x6d, 0xd9, 0xfa, 0x57, 0x50, 0x2f, 0x2c, 0x44, 0x2f, 0xa0, 0xe1, 0x06,
	0x3e, 0x0b, 0x05, 0x91, 0x5e, 0xe6, 0xda, 0x20, 0x83, 0x24, 0x09, 0x21, 0xd8, 0x72, 0x59, 0x2c,
	0x72, 0x55, 0xe9, 0xf7, 0xaf, 0x7f, 0xab, 0xc0, 0xfe, 0xa2, 0x5f, 0xa7, 0xd7, 0xa1, 0x2b, 0x1f,
	0x35, 0xd2, 0x60, 0xe7, 0xcc, 0x72, 0x88, 0x39, 0xe8, 0x3b, 0xd8, 0x30, 0x1d, 0x6d, 0x03, 0xed,
	0x40, 0x5d, 0x22, 0x27, 0x86, 0x63, 0x68, 0x8a, 0xac, 0x8f, 0x8c, 0x2b, 0x8b, 0x98, 0x06, 0x31,
	0x2d, 0xec, 0x68, 0x9b, 0xb2, 0x9e, 0x22, 0x27, 0x36, 0xd6, 0x2a, 0x68, 0x17, 0xd4, 0xec, 0x24,
	0xe9, 0x5b, 0xe8, 0x29, 0x7c, 0x9c, 0x1e, 0xad, 0xbe, 0x79, 0x21, 0x3f, 0xb1, 0x35, 0x1c, 0x60,
	0x47, 0xdb, 0x46, 0x4d, 0xf8, 0x48, 0x76, 0x2d, 0xf0, 0x21, 0x1e, 0x0c, 0x4e, 0xb5, 0x2a, 0xda,
	0x83, 0x46, 0x3a, 0x3e, 0xef, 0x5e, 0x43, 0x0d, 0xa8, 0xa5, 0xd3, 0x6d, 0xac, 0xd5, 0xd1, 0xa7,
	0xb0, 0x6f, 0x9e, 0x5b, 0xe6, 0x6b, 0x62, 0x1a, 0x17, 0x17, 0x16, 0x4e, 0x39, 0xc4, 0xb8, 0x74,
	0xce, 0x35, 0x15, 0xbd, 0x80, 0x83, 0x72, 0x43, 0xab, 0x6f, 0xe2, 0x37, 0x43, 0x87, 0x0c, 0x2f,
	0x8f, 0xc9, 0x6b, 0xeb, 0x8d, 0x06, 0xe8, 0x0b, 0x38, 0x2c, 0x13, 0xae, 0x2c, 0x6c, 0x9f, 0xda,
	0xa6, 0xe1, 0xd8, 0x83, 0xfe, 0x3d, 0xab, 0x81, 0xf6, 0x01, 0x95, 0x59, 0xf9, 0xbe, 0x3b, 0xe8,
	0x19, 0x34, 0xcb, 0xb8, 0x79, 0x2e, 0x37, 0xe8, 0x9f, 0x59, 0xda, 0xee, 0x72, 0x69, 0x64, 0x9f,
	0xf5, 0x0d, 0xe7, 0x12, 0x5b, 0xda, 0x13, 0x74, 0x00, 0x4f, 0x47, 0x59, 0x9b, 0x1f, 0x06, 0x8e,
	0x45, 0x0c, 0xc7, 0xb1, 0x46, 0x4e, 0x3a, 0x52, 0xdb, 0x3b, 0xf6, 0xfe, 0xb9, 0x6d, 0x29, 0x6f,
	0x6f, 0x5b, 0xca, 0x7f, 0xb7, 0x2d, 0xe5, 0xaf, 0xbb, 0xd6, 0xc6, 0xdb, 0xbb, 0xd6, 0xc6, 0xbf,
	0x77, 0xad, 0x0d, 0x78, 0xce, 0x63, 0xaf, 0xeb, 0x4e, 0xa9, 0x1f, 0xce, 0xe8, 0xcf, 0x2c, 0xee,
	0x46, 0xe3, 0xf2, 0x6b, 0xf8, 0xb1, 0x5c, 0xe2, 0xb1, 0xd7, 0x7b, 0x7f, 0xec, 0x45, 0xe3, 0x6f,
	0x3c, 0xde, 0xbb, 0x39, 0xea, 0x95, 0xf8, 0xe3, 0x6a, 0xfa, 0x1f, 0xf3, 0xed, 0xbb, 0x00, 0x00,
	0x00, 0xff, 0xff, 0xb1, 0x34, 0x63, 0x45, 0x88, 0x06, 0x00, 0x00,
}

func (m *RemoteAttestationRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RemoteAttestationRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RemoteAttestationRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Payload != nil {
		{
			size, err := m.Payload.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintPrivateCompute(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.SignPair) > 0 {
		for iNdEx := len(m.SignPair) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.SignPair[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintPrivateCompute(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *RemoteAttestationPayload) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RemoteAttestationPayload) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RemoteAttestationPayload) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.OrgId) > 0 {
		for iNdEx := len(m.OrgId) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.OrgId[iNdEx])
			copy(dAtA[i:], m.OrgId[iNdEx])
			i = encodeVarintPrivateCompute(dAtA, i, uint64(len(m.OrgId[iNdEx])))
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.Challenge) > 0 {
		i -= len(m.Challenge)
		copy(dAtA[i:], m.Challenge)
		i = encodeVarintPrivateCompute(dAtA, i, uint64(len(m.Challenge)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *PrivateDeployRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PrivateDeployRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PrivateDeployRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Payload != nil {
		{
			size, err := m.Payload.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintPrivateCompute(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.SignPair) > 0 {
		for iNdEx := len(m.SignPair) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.SignPair[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintPrivateCompute(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *PrivateDeployPayload) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PrivateDeployPayload) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PrivateDeployPayload) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.TimeStamp) > 0 {
		i -= len(m.TimeStamp)
		copy(dAtA[i:], m.TimeStamp)
		i = encodeVarintPrivateCompute(dAtA, i, uint64(len(m.TimeStamp)))
		i--
		dAtA[i] = 0x4a
	}
	if len(m.OrgId) > 0 {
		for iNdEx := len(m.OrgId) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.OrgId[iNdEx])
			copy(dAtA[i:], m.OrgId[iNdEx])
			i = encodeVarintPrivateCompute(dAtA, i, uint64(len(m.OrgId[iNdEx])))
			i--
			dAtA[i] = 0x42
		}
	}
	if len(m.CodeHash) > 0 {
		i -= len(m.CodeHash)
		copy(dAtA[i:], m.CodeHash)
		i = encodeVarintPrivateCompute(dAtA, i, uint64(len(m.CodeHash)))
		i--
		dAtA[i] = 0x3a
	}
	if len(m.ContractVersion) > 0 {
		i -= len(m.ContractVersion)
		copy(dAtA[i:], m.ContractVersion)
		i = encodeVarintPrivateCompute(dAtA, i, uint64(len(m.ContractVersion)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.ContractName) > 0 {
		i -= len(m.ContractName)
		copy(dAtA[i:], m.ContractName)
		i = encodeVarintPrivateCompute(dAtA, i, uint64(len(m.ContractName)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.SigAlgo) > 0 {
		i -= len(m.SigAlgo)
		copy(dAtA[i:], m.SigAlgo)
		i = encodeVarintPrivateCompute(dAtA, i, uint64(len(m.SigAlgo)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Passwd) > 0 {
		i -= len(m.Passwd)
		copy(dAtA[i:], m.Passwd)
		i = encodeVarintPrivateCompute(dAtA, i, uint64(len(m.Passwd)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.PrivateRlpData) > 0 {
		i -= len(m.PrivateRlpData)
		copy(dAtA[i:], m.PrivateRlpData)
		i = encodeVarintPrivateCompute(dAtA, i, uint64(len(m.PrivateRlpData)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.CodeBytes) > 0 {
		i -= len(m.CodeBytes)
		copy(dAtA[i:], m.CodeBytes)
		i = encodeVarintPrivateCompute(dAtA, i, uint64(len(m.CodeBytes)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *PrivateComputeRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PrivateComputeRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PrivateComputeRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Payload != nil {
		{
			size, err := m.Payload.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintPrivateCompute(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.SignPair) > 0 {
		for iNdEx := len(m.SignPair) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.SignPair[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintPrivateCompute(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *PrivateComputePayload) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PrivateComputePayload) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PrivateComputePayload) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.TimeStamp) > 0 {
		i -= len(m.TimeStamp)
		copy(dAtA[i:], m.TimeStamp)
		i = encodeVarintPrivateCompute(dAtA, i, uint64(len(m.TimeStamp)))
		i--
		dAtA[i] = 0x3a
	}
	if len(m.OrgId) > 0 {
		for iNdEx := len(m.OrgId) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.OrgId[iNdEx])
			copy(dAtA[i:], m.OrgId[iNdEx])
			i = encodeVarintPrivateCompute(dAtA, i, uint64(len(m.OrgId[iNdEx])))
			i--
			dAtA[i] = 0x32
		}
	}
	if len(m.CodeHash) > 0 {
		i -= len(m.CodeHash)
		copy(dAtA[i:], m.CodeHash)
		i = encodeVarintPrivateCompute(dAtA, i, uint64(len(m.CodeHash)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.ContractName) > 0 {
		i -= len(m.ContractName)
		copy(dAtA[i:], m.ContractName)
		i = encodeVarintPrivateCompute(dAtA, i, uint64(len(m.ContractName)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.SigAlgo) > 0 {
		i -= len(m.SigAlgo)
		copy(dAtA[i:], m.SigAlgo)
		i = encodeVarintPrivateCompute(dAtA, i, uint64(len(m.SigAlgo)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Passwd) > 0 {
		i -= len(m.Passwd)
		copy(dAtA[i:], m.Passwd)
		i = encodeVarintPrivateCompute(dAtA, i, uint64(len(m.Passwd)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.PrivateRlpData) > 0 {
		i -= len(m.PrivateRlpData)
		copy(dAtA[i:], m.PrivateRlpData)
		i = encodeVarintPrivateCompute(dAtA, i, uint64(len(m.PrivateRlpData)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *SignInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SignInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SignInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Cert) > 0 {
		i -= len(m.Cert)
		copy(dAtA[i:], m.Cert)
		i = encodeVarintPrivateCompute(dAtA, i, uint64(len(m.Cert)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.ClientSign) > 0 {
		i -= len(m.ClientSign)
		copy(dAtA[i:], m.ClientSign)
		i = encodeVarintPrivateCompute(dAtA, i, uint64(len(m.ClientSign)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintPrivateCompute(dAtA []byte, offset int, v uint64) int {
	offset -= sovPrivateCompute(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *RemoteAttestationRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.SignPair) > 0 {
		for _, e := range m.SignPair {
			l = e.Size()
			n += 1 + l + sovPrivateCompute(uint64(l))
		}
	}
	if m.Payload != nil {
		l = m.Payload.Size()
		n += 1 + l + sovPrivateCompute(uint64(l))
	}
	return n
}

func (m *RemoteAttestationPayload) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Challenge)
	if l > 0 {
		n += 1 + l + sovPrivateCompute(uint64(l))
	}
	if len(m.OrgId) > 0 {
		for _, s := range m.OrgId {
			l = len(s)
			n += 1 + l + sovPrivateCompute(uint64(l))
		}
	}
	return n
}

func (m *PrivateDeployRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.SignPair) > 0 {
		for _, e := range m.SignPair {
			l = e.Size()
			n += 1 + l + sovPrivateCompute(uint64(l))
		}
	}
	if m.Payload != nil {
		l = m.Payload.Size()
		n += 1 + l + sovPrivateCompute(uint64(l))
	}
	return n
}

func (m *PrivateDeployPayload) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.CodeBytes)
	if l > 0 {
		n += 1 + l + sovPrivateCompute(uint64(l))
	}
	l = len(m.PrivateRlpData)
	if l > 0 {
		n += 1 + l + sovPrivateCompute(uint64(l))
	}
	l = len(m.Passwd)
	if l > 0 {
		n += 1 + l + sovPrivateCompute(uint64(l))
	}
	l = len(m.SigAlgo)
	if l > 0 {
		n += 1 + l + sovPrivateCompute(uint64(l))
	}
	l = len(m.ContractName)
	if l > 0 {
		n += 1 + l + sovPrivateCompute(uint64(l))
	}
	l = len(m.ContractVersion)
	if l > 0 {
		n += 1 + l + sovPrivateCompute(uint64(l))
	}
	l = len(m.CodeHash)
	if l > 0 {
		n += 1 + l + sovPrivateCompute(uint64(l))
	}
	if len(m.OrgId) > 0 {
		for _, s := range m.OrgId {
			l = len(s)
			n += 1 + l + sovPrivateCompute(uint64(l))
		}
	}
	l = len(m.TimeStamp)
	if l > 0 {
		n += 1 + l + sovPrivateCompute(uint64(l))
	}
	return n
}

func (m *PrivateComputeRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.SignPair) > 0 {
		for _, e := range m.SignPair {
			l = e.Size()
			n += 1 + l + sovPrivateCompute(uint64(l))
		}
	}
	if m.Payload != nil {
		l = m.Payload.Size()
		n += 1 + l + sovPrivateCompute(uint64(l))
	}
	return n
}

func (m *PrivateComputePayload) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.PrivateRlpData)
	if l > 0 {
		n += 1 + l + sovPrivateCompute(uint64(l))
	}
	l = len(m.Passwd)
	if l > 0 {
		n += 1 + l + sovPrivateCompute(uint64(l))
	}
	l = len(m.SigAlgo)
	if l > 0 {
		n += 1 + l + sovPrivateCompute(uint64(l))
	}
	l = len(m.ContractName)
	if l > 0 {
		n += 1 + l + sovPrivateCompute(uint64(l))
	}
	l = len(m.CodeHash)
	if l > 0 {
		n += 1 + l + sovPrivateCompute(uint64(l))
	}
	if len(m.OrgId) > 0 {
		for _, s := range m.OrgId {
			l = len(s)
			n += 1 + l + sovPrivateCompute(uint64(l))
		}
	}
	l = len(m.TimeStamp)
	if l > 0 {
		n += 1 + l + sovPrivateCompute(uint64(l))
	}
	return n
}

func (m *SignInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ClientSign)
	if l > 0 {
		n += 1 + l + sovPrivateCompute(uint64(l))
	}
	l = len(m.Cert)
	if l > 0 {
		n += 1 + l + sovPrivateCompute(uint64(l))
	}
	return n
}

func sovPrivateCompute(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozPrivateCompute(x uint64) (n int) {
	return sovPrivateCompute(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *RemoteAttestationRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPrivateCompute
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RemoteAttestationRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RemoteAttestationRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SignPair", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPrivateCompute
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPrivateCompute
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPrivateCompute
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SignPair = append(m.SignPair, &SignInfo{})
			if err := m.SignPair[len(m.SignPair)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Payload", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPrivateCompute
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPrivateCompute
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPrivateCompute
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Payload == nil {
				m.Payload = &RemoteAttestationPayload{}
			}
			if err := m.Payload.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPrivateCompute(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthPrivateCompute
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RemoteAttestationPayload) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPrivateCompute
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RemoteAttestationPayload: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RemoteAttestationPayload: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Challenge", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPrivateCompute
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPrivateCompute
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPrivateCompute
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Challenge = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OrgId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPrivateCompute
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPrivateCompute
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPrivateCompute
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OrgId = append(m.OrgId, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPrivateCompute(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthPrivateCompute
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PrivateDeployRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPrivateCompute
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PrivateDeployRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PrivateDeployRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SignPair", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPrivateCompute
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPrivateCompute
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPrivateCompute
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SignPair = append(m.SignPair, &SignInfo{})
			if err := m.SignPair[len(m.SignPair)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Payload", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPrivateCompute
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPrivateCompute
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPrivateCompute
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Payload == nil {
				m.Payload = &PrivateDeployPayload{}
			}
			if err := m.Payload.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPrivateCompute(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthPrivateCompute
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PrivateDeployPayload) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPrivateCompute
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PrivateDeployPayload: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PrivateDeployPayload: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CodeBytes", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPrivateCompute
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPrivateCompute
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPrivateCompute
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CodeBytes = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PrivateRlpData", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPrivateCompute
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPrivateCompute
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPrivateCompute
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PrivateRlpData = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Passwd", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPrivateCompute
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPrivateCompute
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPrivateCompute
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Passwd = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SigAlgo", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPrivateCompute
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPrivateCompute
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPrivateCompute
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SigAlgo = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ContractName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPrivateCompute
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPrivateCompute
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPrivateCompute
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ContractName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ContractVersion", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPrivateCompute
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPrivateCompute
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPrivateCompute
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ContractVersion = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CodeHash", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPrivateCompute
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPrivateCompute
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPrivateCompute
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CodeHash = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OrgId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPrivateCompute
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPrivateCompute
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPrivateCompute
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OrgId = append(m.OrgId, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TimeStamp", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPrivateCompute
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPrivateCompute
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPrivateCompute
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TimeStamp = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPrivateCompute(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthPrivateCompute
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PrivateComputeRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPrivateCompute
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PrivateComputeRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PrivateComputeRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SignPair", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPrivateCompute
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPrivateCompute
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPrivateCompute
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SignPair = append(m.SignPair, &SignInfo{})
			if err := m.SignPair[len(m.SignPair)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Payload", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPrivateCompute
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPrivateCompute
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPrivateCompute
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Payload == nil {
				m.Payload = &PrivateComputePayload{}
			}
			if err := m.Payload.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPrivateCompute(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthPrivateCompute
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PrivateComputePayload) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPrivateCompute
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PrivateComputePayload: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PrivateComputePayload: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PrivateRlpData", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPrivateCompute
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPrivateCompute
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPrivateCompute
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PrivateRlpData = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Passwd", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPrivateCompute
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPrivateCompute
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPrivateCompute
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Passwd = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SigAlgo", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPrivateCompute
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPrivateCompute
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPrivateCompute
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SigAlgo = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ContractName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPrivateCompute
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPrivateCompute
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPrivateCompute
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ContractName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CodeHash", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPrivateCompute
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPrivateCompute
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPrivateCompute
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CodeHash = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OrgId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPrivateCompute
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPrivateCompute
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPrivateCompute
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OrgId = append(m.OrgId, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TimeStamp", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPrivateCompute
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPrivateCompute
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPrivateCompute
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TimeStamp = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPrivateCompute(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthPrivateCompute
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SignInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPrivateCompute
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SignInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SignInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClientSign", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPrivateCompute
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPrivateCompute
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPrivateCompute
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ClientSign = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Cert", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPrivateCompute
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPrivateCompute
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPrivateCompute
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Cert = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPrivateCompute(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthPrivateCompute
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipPrivateCompute(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowPrivateCompute
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowPrivateCompute
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowPrivateCompute
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthPrivateCompute
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupPrivateCompute
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthPrivateCompute
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthPrivateCompute        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowPrivateCompute          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupPrivateCompute = fmt.Errorf("proto: unexpected end of group")
)
