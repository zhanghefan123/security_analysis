// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: syscontract/contract_manage.proto

package syscontract

import (
	common "zhanghefan123/security/protobuf/pb-go/common"
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// methods of user management contract
type ContractManageFunction int32

const (
	// init contract
	ContractManageFunction_INIT_CONTRACT ContractManageFunction = 0
	// upgrade contract version
	ContractManageFunction_UPGRADE_CONTRACT ContractManageFunction = 1
	// freeze contract, cannot be invoked temporarily
	ContractManageFunction_FREEZE_CONTRACT ContractManageFunction = 2
	// unfreeze contract to normal status
	ContractManageFunction_UNFREEZE_CONTRACT ContractManageFunction = 3
	// revoke contract, cannot be invoked permanently
	ContractManageFunction_REVOKE_CONTRACT ContractManageFunction = 4
	// grant access to a native contract
	ContractManageFunction_GRANT_CONTRACT_ACCESS ContractManageFunction = 5
	// revoke access to a native contract
	ContractManageFunction_REVOKE_CONTRACT_ACCESS ContractManageFunction = 6
	// verify if has access to a certain native contract
	ContractManageFunction_VERIFY_CONTRACT_ACCESS ContractManageFunction = 7
	//initial new chain maker version native contract list
	ContractManageFunction_INIT_NEW_NATIVE_CONTRACT ContractManageFunction = 8
)

var ContractManageFunction_name = map[int32]string{
	0: "INIT_CONTRACT",
	1: "UPGRADE_CONTRACT",
	2: "FREEZE_CONTRACT",
	3: "UNFREEZE_CONTRACT",
	4: "REVOKE_CONTRACT",
	5: "GRANT_CONTRACT_ACCESS",
	6: "REVOKE_CONTRACT_ACCESS",
	7: "VERIFY_CONTRACT_ACCESS",
	8: "INIT_NEW_NATIVE_CONTRACT",
}

var ContractManageFunction_value = map[string]int32{
	"INIT_CONTRACT":            0,
	"UPGRADE_CONTRACT":         1,
	"FREEZE_CONTRACT":          2,
	"UNFREEZE_CONTRACT":        3,
	"REVOKE_CONTRACT":          4,
	"GRANT_CONTRACT_ACCESS":    5,
	"REVOKE_CONTRACT_ACCESS":   6,
	"VERIFY_CONTRACT_ACCESS":   7,
	"INIT_NEW_NATIVE_CONTRACT": 8,
}

func (x ContractManageFunction) String() string {
	return proto.EnumName(ContractManageFunction_name, int32(x))
}

func (ContractManageFunction) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_8fa11ee1c92ce416, []int{0}
}

// methods of contract query
type ContractQueryFunction int32

const (
	// get contract information
	ContractQueryFunction_GET_CONTRACT_INFO ContractQueryFunction = 0
	// get contract bytecode
	ContractQueryFunction_GET_CONTRACT_BYTECODE ContractQueryFunction = 1
	// get all installed contract
	ContractQueryFunction_GET_CONTRACT_LIST ContractQueryFunction = 2
	// get native contract list has access to
	ContractQueryFunction_GET_DISABLED_CONTRACT_LIST ContractQueryFunction = 3
)

var ContractQueryFunction_name = map[int32]string{
	0: "GET_CONTRACT_INFO",
	1: "GET_CONTRACT_BYTECODE",
	2: "GET_CONTRACT_LIST",
	3: "GET_DISABLED_CONTRACT_LIST",
}

var ContractQueryFunction_value = map[string]int32{
	"GET_CONTRACT_INFO":          0,
	"GET_CONTRACT_BYTECODE":      1,
	"GET_CONTRACT_LIST":          2,
	"GET_DISABLED_CONTRACT_LIST": 3,
}

func (x ContractQueryFunction) String() string {
	return proto.EnumName(ContractQueryFunction_name, int32(x))
}

func (ContractQueryFunction) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_8fa11ee1c92ce416, []int{1}
}

type InitContract_Parameter int32

const (
	InitContract_CONTRACT_NAME         InitContract_Parameter = 0
	InitContract_CONTRACT_RUNTIME_TYPE InitContract_Parameter = 1
	InitContract_CONTRACT_VERSION      InitContract_Parameter = 2
	InitContract_CONTRACT_BYTECODE     InitContract_Parameter = 3
)

var InitContract_Parameter_name = map[int32]string{
	0: "CONTRACT_NAME",
	1: "CONTRACT_RUNTIME_TYPE",
	2: "CONTRACT_VERSION",
	3: "CONTRACT_BYTECODE",
}

var InitContract_Parameter_value = map[string]int32{
	"CONTRACT_NAME":         0,
	"CONTRACT_RUNTIME_TYPE": 1,
	"CONTRACT_VERSION":      2,
	"CONTRACT_BYTECODE":     3,
}

func (x InitContract_Parameter) String() string {
	return proto.EnumName(InitContract_Parameter_name, int32(x))
}

func (InitContract_Parameter) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_8fa11ee1c92ce416, []int{0, 0}
}

type UpgradeContract_Parameter int32

const (
	UpgradeContract_CONTRACT_NAME         UpgradeContract_Parameter = 0
	UpgradeContract_CONTRACT_RUNTIME_TYPE UpgradeContract_Parameter = 1
	UpgradeContract_CONTRACT_VERSION      UpgradeContract_Parameter = 2
	UpgradeContract_CONTRACT_BYTECODE     UpgradeContract_Parameter = 3
)

var UpgradeContract_Parameter_name = map[int32]string{
	0: "CONTRACT_NAME",
	1: "CONTRACT_RUNTIME_TYPE",
	2: "CONTRACT_VERSION",
	3: "CONTRACT_BYTECODE",
}

var UpgradeContract_Parameter_value = map[string]int32{
	"CONTRACT_NAME":         0,
	"CONTRACT_RUNTIME_TYPE": 1,
	"CONTRACT_VERSION":      2,
	"CONTRACT_BYTECODE":     3,
}

func (x UpgradeContract_Parameter) String() string {
	return proto.EnumName(UpgradeContract_Parameter_name, int32(x))
}

func (UpgradeContract_Parameter) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_8fa11ee1c92ce416, []int{1, 0}
}

type FreezeContract_Parameter int32

const (
	FreezeContract_CONTRACT_NAME FreezeContract_Parameter = 0
)

var FreezeContract_Parameter_name = map[int32]string{
	0: "CONTRACT_NAME",
}

var FreezeContract_Parameter_value = map[string]int32{
	"CONTRACT_NAME": 0,
}

func (x FreezeContract_Parameter) String() string {
	return proto.EnumName(FreezeContract_Parameter_name, int32(x))
}

func (FreezeContract_Parameter) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_8fa11ee1c92ce416, []int{2, 0}
}

type UnfreezeContract_Parameter int32

const (
	UnfreezeContract_CONTRACT_NAME UnfreezeContract_Parameter = 0
)

var UnfreezeContract_Parameter_name = map[int32]string{
	0: "CONTRACT_NAME",
}

var UnfreezeContract_Parameter_value = map[string]int32{
	"CONTRACT_NAME": 0,
}

func (x UnfreezeContract_Parameter) String() string {
	return proto.EnumName(UnfreezeContract_Parameter_name, int32(x))
}

func (UnfreezeContract_Parameter) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_8fa11ee1c92ce416, []int{3, 0}
}

type RevokeContract_Parameter int32

const (
	RevokeContract_CONTRACT_NAME RevokeContract_Parameter = 0
)

var RevokeContract_Parameter_name = map[int32]string{
	0: "CONTRACT_NAME",
}

var RevokeContract_Parameter_value = map[string]int32{
	"CONTRACT_NAME": 0,
}

func (x RevokeContract_Parameter) String() string {
	return proto.EnumName(RevokeContract_Parameter_name, int32(x))
}

func (RevokeContract_Parameter) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_8fa11ee1c92ce416, []int{4, 0}
}

type GetContractInfo_Parameter int32

const (
	GetContractInfo_CONTRACT_NAME GetContractInfo_Parameter = 0
)

var GetContractInfo_Parameter_name = map[int32]string{
	0: "CONTRACT_NAME",
}

var GetContractInfo_Parameter_value = map[string]int32{
	"CONTRACT_NAME": 0,
}

func (x GetContractInfo_Parameter) String() string {
	return proto.EnumName(GetContractInfo_Parameter_name, int32(x))
}

func (GetContractInfo_Parameter) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_8fa11ee1c92ce416, []int{5, 0}
}

type ContractAccess_Parameter int32

const (
	ContractAccess_NATIVE_CONTRACT_NAME ContractAccess_Parameter = 0
)

var ContractAccess_Parameter_name = map[int32]string{
	0: "NATIVE_CONTRACT_NAME",
}

var ContractAccess_Parameter_value = map[string]int32{
	"NATIVE_CONTRACT_NAME": 0,
}

func (x ContractAccess_Parameter) String() string {
	return proto.EnumName(ContractAccess_Parameter_name, int32(x))
}

func (ContractAccess_Parameter) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_8fa11ee1c92ce416, []int{6, 0}
}

// init contract parameters
type InitContract struct {
}

func (m *InitContract) Reset()         { *m = InitContract{} }
func (m *InitContract) String() string { return proto.CompactTextString(m) }
func (*InitContract) ProtoMessage()    {}
func (*InitContract) Descriptor() ([]byte, []int) {
	return fileDescriptor_8fa11ee1c92ce416, []int{0}
}
func (m *InitContract) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *InitContract) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_InitContract.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *InitContract) XXX_Merge(src proto.Message) {
	xxx_messageInfo_InitContract.Merge(m, src)
}
func (m *InitContract) XXX_Size() int {
	return m.Size()
}
func (m *InitContract) XXX_DiscardUnknown() {
	xxx_messageInfo_InitContract.DiscardUnknown(m)
}

var xxx_messageInfo_InitContract proto.InternalMessageInfo

// upgrade contract parameters
type UpgradeContract struct {
}

func (m *UpgradeContract) Reset()         { *m = UpgradeContract{} }
func (m *UpgradeContract) String() string { return proto.CompactTextString(m) }
func (*UpgradeContract) ProtoMessage()    {}
func (*UpgradeContract) Descriptor() ([]byte, []int) {
	return fileDescriptor_8fa11ee1c92ce416, []int{1}
}
func (m *UpgradeContract) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UpgradeContract) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UpgradeContract.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UpgradeContract) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UpgradeContract.Merge(m, src)
}
func (m *UpgradeContract) XXX_Size() int {
	return m.Size()
}
func (m *UpgradeContract) XXX_DiscardUnknown() {
	xxx_messageInfo_UpgradeContract.DiscardUnknown(m)
}

var xxx_messageInfo_UpgradeContract proto.InternalMessageInfo

// freeze contract parameters
type FreezeContract struct {
}

func (m *FreezeContract) Reset()         { *m = FreezeContract{} }
func (m *FreezeContract) String() string { return proto.CompactTextString(m) }
func (*FreezeContract) ProtoMessage()    {}
func (*FreezeContract) Descriptor() ([]byte, []int) {
	return fileDescriptor_8fa11ee1c92ce416, []int{2}
}
func (m *FreezeContract) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *FreezeContract) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_FreezeContract.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *FreezeContract) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FreezeContract.Merge(m, src)
}
func (m *FreezeContract) XXX_Size() int {
	return m.Size()
}
func (m *FreezeContract) XXX_DiscardUnknown() {
	xxx_messageInfo_FreezeContract.DiscardUnknown(m)
}

var xxx_messageInfo_FreezeContract proto.InternalMessageInfo

// unfreeze contract parameters
type UnfreezeContract struct {
}

func (m *UnfreezeContract) Reset()         { *m = UnfreezeContract{} }
func (m *UnfreezeContract) String() string { return proto.CompactTextString(m) }
func (*UnfreezeContract) ProtoMessage()    {}
func (*UnfreezeContract) Descriptor() ([]byte, []int) {
	return fileDescriptor_8fa11ee1c92ce416, []int{3}
}
func (m *UnfreezeContract) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UnfreezeContract) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UnfreezeContract.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UnfreezeContract) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UnfreezeContract.Merge(m, src)
}
func (m *UnfreezeContract) XXX_Size() int {
	return m.Size()
}
func (m *UnfreezeContract) XXX_DiscardUnknown() {
	xxx_messageInfo_UnfreezeContract.DiscardUnknown(m)
}

var xxx_messageInfo_UnfreezeContract proto.InternalMessageInfo

// revoke contract parameters
type RevokeContract struct {
}

func (m *RevokeContract) Reset()         { *m = RevokeContract{} }
func (m *RevokeContract) String() string { return proto.CompactTextString(m) }
func (*RevokeContract) ProtoMessage()    {}
func (*RevokeContract) Descriptor() ([]byte, []int) {
	return fileDescriptor_8fa11ee1c92ce416, []int{4}
}
func (m *RevokeContract) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RevokeContract) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RevokeContract.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RevokeContract) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RevokeContract.Merge(m, src)
}
func (m *RevokeContract) XXX_Size() int {
	return m.Size()
}
func (m *RevokeContract) XXX_DiscardUnknown() {
	xxx_messageInfo_RevokeContract.DiscardUnknown(m)
}

var xxx_messageInfo_RevokeContract proto.InternalMessageInfo

// query contract parameters
type GetContractInfo struct {
}

func (m *GetContractInfo) Reset()         { *m = GetContractInfo{} }
func (m *GetContractInfo) String() string { return proto.CompactTextString(m) }
func (*GetContractInfo) ProtoMessage()    {}
func (*GetContractInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_8fa11ee1c92ce416, []int{5}
}
func (m *GetContractInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetContractInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetContractInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetContractInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetContractInfo.Merge(m, src)
}
func (m *GetContractInfo) XXX_Size() int {
	return m.Size()
}
func (m *GetContractInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_GetContractInfo.DiscardUnknown(m)
}

var xxx_messageInfo_GetContractInfo proto.InternalMessageInfo

type ContractAccess struct {
}

func (m *ContractAccess) Reset()         { *m = ContractAccess{} }
func (m *ContractAccess) String() string { return proto.CompactTextString(m) }
func (*ContractAccess) ProtoMessage()    {}
func (*ContractAccess) Descriptor() ([]byte, []int) {
	return fileDescriptor_8fa11ee1c92ce416, []int{6}
}
func (m *ContractAccess) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ContractAccess) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ContractAccess.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ContractAccess) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ContractAccess.Merge(m, src)
}
func (m *ContractAccess) XXX_Size() int {
	return m.Size()
}
func (m *ContractAccess) XXX_DiscardUnknown() {
	xxx_messageInfo_ContractAccess.DiscardUnknown(m)
}

var xxx_messageInfo_ContractAccess proto.InternalMessageInfo

type ContractInfo struct {
	ContractTransaction []*ContractTransaction `protobuf:"bytes,1,rep,name=contract_transaction,json=contractTransaction,proto3" json:"contract_transaction,omitempty"`
}

func (m *ContractInfo) Reset()         { *m = ContractInfo{} }
func (m *ContractInfo) String() string { return proto.CompactTextString(m) }
func (*ContractInfo) ProtoMessage()    {}
func (*ContractInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_8fa11ee1c92ce416, []int{7}
}
func (m *ContractInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ContractInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ContractInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ContractInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ContractInfo.Merge(m, src)
}
func (m *ContractInfo) XXX_Size() int {
	return m.Size()
}
func (m *ContractInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_ContractInfo.DiscardUnknown(m)
}

var xxx_messageInfo_ContractInfo proto.InternalMessageInfo

func (m *ContractInfo) GetContractTransaction() []*ContractTransaction {
	if m != nil {
		return m.ContractTransaction
	}
	return nil
}

type ContractTransaction struct {
	Contract *common.Contract `protobuf:"bytes,1,opt,name=contract,proto3" json:"contract,omitempty"`
	TxId     string           `protobuf:"bytes,2,opt,name=tx_id,json=txId,proto3" json:"tx_id,omitempty"`
}

func (m *ContractTransaction) Reset()         { *m = ContractTransaction{} }
func (m *ContractTransaction) String() string { return proto.CompactTextString(m) }
func (*ContractTransaction) ProtoMessage()    {}
func (*ContractTransaction) Descriptor() ([]byte, []int) {
	return fileDescriptor_8fa11ee1c92ce416, []int{8}
}
func (m *ContractTransaction) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ContractTransaction) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ContractTransaction.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ContractTransaction) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ContractTransaction.Merge(m, src)
}
func (m *ContractTransaction) XXX_Size() int {
	return m.Size()
}
func (m *ContractTransaction) XXX_DiscardUnknown() {
	xxx_messageInfo_ContractTransaction.DiscardUnknown(m)
}

var xxx_messageInfo_ContractTransaction proto.InternalMessageInfo

func (m *ContractTransaction) GetContract() *common.Contract {
	if m != nil {
		return m.Contract
	}
	return nil
}

func (m *ContractTransaction) GetTxId() string {
	if m != nil {
		return m.TxId
	}
	return ""
}

func init() {
	proto.RegisterEnum("syscontract.ContractManageFunction", ContractManageFunction_name, ContractManageFunction_value)
	proto.RegisterEnum("syscontract.ContractQueryFunction", ContractQueryFunction_name, ContractQueryFunction_value)
	proto.RegisterEnum("syscontract.InitContract_Parameter", InitContract_Parameter_name, InitContract_Parameter_value)
	proto.RegisterEnum("syscontract.UpgradeContract_Parameter", UpgradeContract_Parameter_name, UpgradeContract_Parameter_value)
	proto.RegisterEnum("syscontract.FreezeContract_Parameter", FreezeContract_Parameter_name, FreezeContract_Parameter_value)
	proto.RegisterEnum("syscontract.UnfreezeContract_Parameter", UnfreezeContract_Parameter_name, UnfreezeContract_Parameter_value)
	proto.RegisterEnum("syscontract.RevokeContract_Parameter", RevokeContract_Parameter_name, RevokeContract_Parameter_value)
	proto.RegisterEnum("syscontract.GetContractInfo_Parameter", GetContractInfo_Parameter_name, GetContractInfo_Parameter_value)
	proto.RegisterEnum("syscontract.ContractAccess_Parameter", ContractAccess_Parameter_name, ContractAccess_Parameter_value)
	proto.RegisterType((*InitContract)(nil), "syscontract.InitContract")
	proto.RegisterType((*UpgradeContract)(nil), "syscontract.UpgradeContract")
	proto.RegisterType((*FreezeContract)(nil), "syscontract.FreezeContract")
	proto.RegisterType((*UnfreezeContract)(nil), "syscontract.UnfreezeContract")
	proto.RegisterType((*RevokeContract)(nil), "syscontract.RevokeContract")
	proto.RegisterType((*GetContractInfo)(nil), "syscontract.GetContractInfo")
	proto.RegisterType((*ContractAccess)(nil), "syscontract.ContractAccess")
	proto.RegisterType((*ContractInfo)(nil), "syscontract.ContractInfo")
	proto.RegisterType((*ContractTransaction)(nil), "syscontract.ContractTransaction")
}

func init() { proto.RegisterFile("syscontract/contract_manage.proto", fileDescriptor_8fa11ee1c92ce416) }

var fileDescriptor_8fa11ee1c92ce416 = []byte{
	// 571 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xbc, 0x94, 0xcd, 0x6e, 0xda, 0x40,
	0x14, 0x85, 0x99, 0x90, 0xa4, 0xc9, 0xcd, 0x9f, 0x31, 0x10, 0x51, 0xd4, 0x5a, 0xd4, 0x52, 0x25,
	0x14, 0xb5, 0x26, 0xa5, 0x8b, 0xae, 0x8d, 0x19, 0xd0, 0xa8, 0xc1, 0xd0, 0xb1, 0xa1, 0x25, 0x1b,
	0xcb, 0x18, 0xe3, 0xa2, 0x08, 0x1b, 0x19, 0x07, 0x85, 0xae, 0xfa, 0x08, 0x7d, 0xac, 0x2e, 0xb3,
	0xec, 0xb2, 0x82, 0x47, 0xe8, 0x0b, 0x54, 0x86, 0x7a, 0x70, 0xa1, 0xea, 0xcf, 0xa6, 0x3b, 0xfb,
	0xdc, 0xef, 0xcc, 0x9d, 0xeb, 0x39, 0x63, 0x78, 0x32, 0x99, 0x4d, 0x2c, 0xcf, 0x0d, 0x7c, 0xd3,
	0x0a, 0x4a, 0xd1, 0x83, 0x31, 0x32, 0x5d, 0xd3, 0xb1, 0xa5, 0xb1, 0xef, 0x05, 0x1e, 0x7f, 0x14,
	0x43, 0xf2, 0x59, 0xcb, 0x1b, 0x8d, 0x3c, 0x97, 0xa1, 0x2b, 0x46, 0x9c, 0xc2, 0x31, 0x71, 0x87,
	0x81, 0xf2, 0x43, 0x15, 0x07, 0x70, 0xd8, 0x32, 0x7d, 0x73, 0x64, 0x07, 0xb6, 0xcf, 0xa7, 0xe0,
	0x44, 0x69, 0xaa, 0x3a, 0x95, 0x15, 0xdd, 0x50, 0xe5, 0x06, 0xe6, 0x12, 0xfc, 0x43, 0xc8, 0x32,
	0x89, 0xb6, 0x55, 0x9d, 0x34, 0xb0, 0xa1, 0x77, 0x5b, 0x98, 0x43, 0x7c, 0x06, 0x38, 0x56, 0xea,
	0x60, 0xaa, 0x91, 0xa6, 0xca, 0xed, 0xf0, 0x59, 0x48, 0x31, 0xb5, 0xd2, 0xd5, 0xb1, 0xd2, 0xac,
	0x62, 0x2e, 0x29, 0xce, 0xe0, 0xac, 0x3d, 0x76, 0x7c, 0xb3, 0x6f, 0xff, 0xf7, 0xd6, 0x97, 0x70,
	0x5a, 0xf3, 0x6d, 0xfb, 0xc3, 0xba, 0xb3, 0xf0, 0xfb, 0xce, 0x62, 0x19, 0xb8, 0xb6, 0x3b, 0xf8,
	0x37, 0xcf, 0x25, 0x9c, 0x52, 0x7b, 0xea, 0xdd, 0xfc, 0xbd, 0xe3, 0x05, 0x9c, 0xd5, 0x6d, 0x76,
	0x12, 0xc4, 0x1d, 0x78, 0x7f, 0xb4, 0xbc, 0x82, 0xd3, 0x88, 0x97, 0x2d, 0xcb, 0x9e, 0x4c, 0xc4,
	0xa7, 0x71, 0x47, 0x0e, 0x32, 0xaa, 0xac, 0x93, 0x0e, 0x36, 0x36, 0x8d, 0x16, 0x1c, 0xc7, 0x1b,
	0xf1, 0x1a, 0x64, 0x58, 0x86, 0x02, 0xdf, 0x74, 0x27, 0xa6, 0x15, 0x0c, 0x3d, 0x37, 0x87, 0x0a,
	0xc9, 0xe2, 0x51, 0xb9, 0x20, 0xc5, 0x92, 0x24, 0x45, 0x46, 0x7d, 0xcd, 0xd1, 0xb4, 0xb5, 0x2d,
	0x8a, 0xef, 0x20, 0xfd, 0x0b, 0x96, 0x7f, 0x06, 0x07, 0x11, 0x9d, 0x43, 0x05, 0x54, 0x3c, 0x2a,
	0x73, 0xd2, 0x2a, 0x9c, 0x6c, 0x69, 0xca, 0x08, 0x3e, 0x0d, 0x7b, 0xc1, 0x9d, 0x31, 0xec, 0xe7,
	0x76, 0x0a, 0xa8, 0x78, 0x48, 0x77, 0x83, 0x3b, 0xd2, 0xbf, 0xf8, 0x86, 0xe0, 0x3c, 0x62, 0x1b,
	0xcb, 0xc8, 0xd7, 0x6e, 0xdd, 0xd5, 0xea, 0x29, 0x38, 0x21, 0x2a, 0xd1, 0xd9, 0xc4, 0x5c, 0x22,
	0x4c, 0x47, 0xbb, 0x55, 0xa7, 0x72, 0x75, 0xfd, 0x1d, 0x38, 0xc4, 0xa7, 0xe1, 0xac, 0x46, 0x31,
	0xbe, 0x8e, 0x89, 0xcb, 0xc8, 0xb4, 0xd5, 0x4d, 0x39, 0x19, 0xb2, 0x14, 0x77, 0x9a, 0xaf, 0x63,
	0xe2, 0x6e, 0x98, 0xc7, 0x3a, 0x95, 0xd5, 0x75, 0x2b, 0x43, 0x56, 0x14, 0xac, 0x69, 0xdc, 0x1e,
	0x9f, 0x87, 0xf3, 0x0d, 0x3e, 0xaa, 0xed, 0x87, 0xb5, 0x0e, 0xa6, 0xa4, 0xd6, 0xdd, 0xaa, 0x3d,
	0xe0, 0x1f, 0x41, 0x6e, 0xb9, 0x79, 0x15, 0xbf, 0x35, 0x36, 0x4e, 0x8e, 0x3b, 0xb8, 0xf8, 0x88,
	0x20, 0x1b, 0x4d, 0xfd, 0xe6, 0xd6, 0xf6, 0x67, 0x6c, 0xe8, 0x2c, 0xa4, 0xea, 0x38, 0xb6, 0x11,
	0xa2, 0xd6, 0x9a, 0xab, 0x1b, 0xf3, 0x93, 0xcc, 0x2e, 0x01, 0xda, 0x72, 0x5c, 0x11, 0x2d, 0x9c,
	0x5f, 0x80, 0x7c, 0x28, 0x57, 0x89, 0x26, 0x57, 0xae, 0x70, 0x75, 0xa3, 0x9e, 0xac, 0x38, 0x9f,
	0xe7, 0x02, 0xba, 0x9f, 0x0b, 0xe8, 0xeb, 0x5c, 0x40, 0x9f, 0x16, 0x42, 0xe2, 0x7e, 0x21, 0x24,
	0xbe, 0x2c, 0x84, 0x04, 0x3c, 0xf6, 0x7c, 0x47, 0xb2, 0xde, 0x9b, 0x43, 0x77, 0x64, 0xde, 0xd8,
	0xbe, 0x34, 0xee, 0xc5, 0x43, 0x73, 0x1d, 0x2f, 0x79, 0xbe, 0x53, 0x5a, 0xbf, 0x96, 0xc6, 0xbd,
	0xe7, 0x8e, 0x57, 0x9a, 0x96, 0x4b, 0x31, 0xbe, 0xb7, 0xbf, 0xfc, 0x3d, 0xbd, 0xfc, 0x1e, 0x00,
	0x00, 0xff, 0xff, 0xed, 0x6c, 0xe3, 0xe4, 0xe7, 0x04, 0x00, 0x00,
}

func (m *InitContract) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *InitContract) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *InitContract) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *UpgradeContract) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpgradeContract) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UpgradeContract) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *FreezeContract) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *FreezeContract) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *FreezeContract) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *UnfreezeContract) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UnfreezeContract) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UnfreezeContract) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *RevokeContract) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RevokeContract) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RevokeContract) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *GetContractInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetContractInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetContractInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *ContractAccess) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ContractAccess) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ContractAccess) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *ContractInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ContractInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ContractInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ContractTransaction) > 0 {
		for iNdEx := len(m.ContractTransaction) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.ContractTransaction[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintContractManage(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *ContractTransaction) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ContractTransaction) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ContractTransaction) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.TxId) > 0 {
		i -= len(m.TxId)
		copy(dAtA[i:], m.TxId)
		i = encodeVarintContractManage(dAtA, i, uint64(len(m.TxId)))
		i--
		dAtA[i] = 0x12
	}
	if m.Contract != nil {
		{
			size, err := m.Contract.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintContractManage(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintContractManage(dAtA []byte, offset int, v uint64) int {
	offset -= sovContractManage(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *InitContract) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *UpgradeContract) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *FreezeContract) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *UnfreezeContract) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *RevokeContract) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *GetContractInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *ContractAccess) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *ContractInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.ContractTransaction) > 0 {
		for _, e := range m.ContractTransaction {
			l = e.Size()
			n += 1 + l + sovContractManage(uint64(l))
		}
	}
	return n
}

func (m *ContractTransaction) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Contract != nil {
		l = m.Contract.Size()
		n += 1 + l + sovContractManage(uint64(l))
	}
	l = len(m.TxId)
	if l > 0 {
		n += 1 + l + sovContractManage(uint64(l))
	}
	return n
}

func sovContractManage(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozContractManage(x uint64) (n int) {
	return sovContractManage(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *InitContract) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowContractManage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: InitContract: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: InitContract: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipContractManage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthContractManage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpgradeContract) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowContractManage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpgradeContract: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpgradeContract: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipContractManage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthContractManage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *FreezeContract) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowContractManage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: FreezeContract: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: FreezeContract: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipContractManage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthContractManage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UnfreezeContract) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowContractManage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UnfreezeContract: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UnfreezeContract: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipContractManage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthContractManage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RevokeContract) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowContractManage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RevokeContract: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RevokeContract: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipContractManage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthContractManage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetContractInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowContractManage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetContractInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetContractInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipContractManage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthContractManage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ContractAccess) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowContractManage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ContractAccess: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ContractAccess: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipContractManage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthContractManage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ContractInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowContractManage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ContractInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ContractInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ContractTransaction", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowContractManage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthContractManage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthContractManage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ContractTransaction = append(m.ContractTransaction, &ContractTransaction{})
			if err := m.ContractTransaction[len(m.ContractTransaction)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipContractManage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthContractManage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ContractTransaction) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowContractManage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ContractTransaction: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ContractTransaction: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Contract", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowContractManage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthContractManage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthContractManage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Contract == nil {
				m.Contract = &common.Contract{}
			}
			if err := m.Contract.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TxId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowContractManage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthContractManage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthContractManage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TxId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipContractManage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthContractManage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipContractManage(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowContractManage
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowContractManage
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowContractManage
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthContractManage
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupContractManage
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthContractManage
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthContractManage        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowContractManage          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupContractManage = fmt.Errorf("proto: unexpected end of group")
)
