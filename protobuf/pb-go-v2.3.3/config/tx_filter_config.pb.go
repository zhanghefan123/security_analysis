// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: config/tx_filter_config.proto

package config

import (
	common "zhanghefan123/security/protobuf/pb-go/common"
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type TxFilterType int32

const (
	TxFilterType_None              TxFilterType = 0
	TxFilterType_BirdsNest         TxFilterType = 1
	TxFilterType_Map               TxFilterType = 2
	TxFilterType_ShardingBirdsNest TxFilterType = 3
)

var TxFilterType_name = map[int32]string{
	0: "None",
	1: "BirdsNest",
	2: "Map",
	3: "ShardingBirdsNest",
}

var TxFilterType_value = map[string]int32{
	"None":              0,
	"BirdsNest":         1,
	"Map":               2,
	"ShardingBirdsNest": 3,
}

func (x TxFilterType) String() string {
	return proto.EnumName(TxFilterType_name, int32(x))
}

func (TxFilterType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_01ac7b3c16e927a4, []int{0}
}

// BirdsNest Bird's Nest
type TxFilterConfig struct {
	// Transaction filter type
	Type TxFilterType `protobuf:"varint,1,opt,name=type,proto3,enum=config.TxFilterType" json:"type,omitempty"`
	// Bird's nest configuration
	BirdsNest *common.BirdsNestConfig `protobuf:"bytes,2,opt,name=birds_nest,json=birdsNest,proto3" json:"birds_nest,omitempty"`
	// Sharding bird's nest configuration
	ShardingBirdsNest *common.ShardingBirdsNestConfig `protobuf:"bytes,3,opt,name=sharding_birds_nest,json=shardingBirdsNest,proto3" json:"sharding_birds_nest,omitempty"`
}

func (m *TxFilterConfig) Reset()         { *m = TxFilterConfig{} }
func (m *TxFilterConfig) String() string { return proto.CompactTextString(m) }
func (*TxFilterConfig) ProtoMessage()    {}
func (*TxFilterConfig) Descriptor() ([]byte, []int) {
	return fileDescriptor_01ac7b3c16e927a4, []int{0}
}
func (m *TxFilterConfig) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TxFilterConfig) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TxFilterConfig.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TxFilterConfig) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TxFilterConfig.Merge(m, src)
}
func (m *TxFilterConfig) XXX_Size() int {
	return m.Size()
}
func (m *TxFilterConfig) XXX_DiscardUnknown() {
	xxx_messageInfo_TxFilterConfig.DiscardUnknown(m)
}

var xxx_messageInfo_TxFilterConfig proto.InternalMessageInfo

func (m *TxFilterConfig) GetType() TxFilterType {
	if m != nil {
		return m.Type
	}
	return TxFilterType_None
}

func (m *TxFilterConfig) GetBirdsNest() *common.BirdsNestConfig {
	if m != nil {
		return m.BirdsNest
	}
	return nil
}

func (m *TxFilterConfig) GetShardingBirdsNest() *common.ShardingBirdsNestConfig {
	if m != nil {
		return m.ShardingBirdsNest
	}
	return nil
}

func init() {
	proto.RegisterEnum("config.TxFilterType", TxFilterType_name, TxFilterType_value)
	proto.RegisterType((*TxFilterConfig)(nil), "config.TxFilterConfig")
}

func init() { proto.RegisterFile("config/tx_filter_config.proto", fileDescriptor_01ac7b3c16e927a4) }

var fileDescriptor_01ac7b3c16e927a4 = []byte{
	// 287 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x92, 0x4d, 0xce, 0xcf, 0x4b,
	0xcb, 0x4c, 0xd7, 0x2f, 0xa9, 0x88, 0x4f, 0xcb, 0xcc, 0x29, 0x49, 0x2d, 0x8a, 0x87, 0x08, 0xe8,
	0x15, 0x14, 0xe5, 0x97, 0xe4, 0x0b, 0xb1, 0x41, 0x78, 0x52, 0x62, 0xc9, 0xf9, 0xb9, 0xb9, 0xf9,
	0x79, 0xfa, 0x49, 0x99, 0x45, 0x29, 0xc5, 0x79, 0xa9, 0xc5, 0x25, 0x10, 0x79, 0xa5, 0xc3, 0x8c,
	0x5c, 0x7c, 0x21, 0x15, 0x6e, 0x60, 0x9d, 0xce, 0x60, 0xa5, 0x42, 0x1a, 0x5c, 0x2c, 0x25, 0x95,
	0x05, 0xa9, 0x12, 0x8c, 0x0a, 0x8c, 0x1a, 0x7c, 0x46, 0x22, 0x7a, 0x50, 0xf3, 0x60, 0xaa, 0x42,
	0x2a, 0x0b, 0x52, 0x83, 0xc0, 0x2a, 0x84, 0xcc, 0xb8, 0xb8, 0xc0, 0xe6, 0xc5, 0x83, 0x0c, 0x94,
	0x60, 0x52, 0x60, 0xd4, 0xe0, 0x36, 0x12, 0xd7, 0x83, 0xd8, 0xa4, 0xe7, 0x04, 0x92, 0xf1, 0x4b,
	0x2d, 0x2e, 0x81, 0x18, 0x1b, 0xc4, 0x99, 0x04, 0x13, 0x10, 0xf2, 0xe7, 0x12, 0x2e, 0xce, 0x48,
	0x2c, 0x4a, 0xc9, 0xcc, 0x4b, 0x8f, 0x47, 0x32, 0x80, 0x19, 0x6c, 0x80, 0x3c, 0xcc, 0x80, 0x60,
	0xa8, 0x12, 0x74, 0x83, 0x04, 0x8b, 0xd1, 0x25, 0xb4, 0xdc, 0xb9, 0x78, 0x90, 0x9d, 0x27, 0xc4,
	0xc1, 0xc5, 0xe2, 0x97, 0x9f, 0x97, 0x2a, 0xc0, 0x20, 0xc4, 0xcb, 0xc5, 0x09, 0x57, 0x26, 0xc0,
	0x28, 0xc4, 0xce, 0xc5, 0xec, 0x9b, 0x58, 0x20, 0xc0, 0x24, 0x24, 0xca, 0x25, 0x88, 0x61, 0xbe,
	0x00, 0xb3, 0x93, 0xf3, 0x89, 0x47, 0x72, 0x8c, 0x17, 0x1e, 0xc9, 0x31, 0x3e, 0x78, 0x24, 0xc7,
	0x38, 0xe1, 0xb1, 0x1c, 0xc3, 0x85, 0xc7, 0x72, 0x0c, 0x37, 0x1e, 0xcb, 0x31, 0x44, 0x69, 0x26,
	0x67, 0x24, 0x66, 0xe6, 0xe5, 0x26, 0x66, 0xa7, 0x16, 0xe9, 0xe5, 0x17, 0xa5, 0xeb, 0x23, 0xb8,
	0xfa, 0x05, 0x49, 0xba, 0xe9, 0xf9, 0xfa, 0x65, 0x46, 0xfa, 0x90, 0x90, 0x4a, 0x62, 0x03, 0x07,
	0xad, 0x31, 0x20, 0x00, 0x00, 0xff, 0xff, 0x6f, 0x24, 0x98, 0x17, 0x9b, 0x01, 0x00, 0x00,
}

func (m *TxFilterConfig) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TxFilterConfig) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TxFilterConfig) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.ShardingBirdsNest != nil {
		{
			size, err := m.ShardingBirdsNest.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTxFilterConfig(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if m.BirdsNest != nil {
		{
			size, err := m.BirdsNest.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTxFilterConfig(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.Type != 0 {
		i = encodeVarintTxFilterConfig(dAtA, i, uint64(m.Type))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintTxFilterConfig(dAtA []byte, offset int, v uint64) int {
	offset -= sovTxFilterConfig(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *TxFilterConfig) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Type != 0 {
		n += 1 + sovTxFilterConfig(uint64(m.Type))
	}
	if m.BirdsNest != nil {
		l = m.BirdsNest.Size()
		n += 1 + l + sovTxFilterConfig(uint64(l))
	}
	if m.ShardingBirdsNest != nil {
		l = m.ShardingBirdsNest.Size()
		n += 1 + l + sovTxFilterConfig(uint64(l))
	}
	return n
}

func sovTxFilterConfig(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozTxFilterConfig(x uint64) (n int) {
	return sovTxFilterConfig(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *TxFilterConfig) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTxFilterConfig
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TxFilterConfig: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TxFilterConfig: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			m.Type = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTxFilterConfig
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Type |= TxFilterType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BirdsNest", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTxFilterConfig
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTxFilterConfig
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTxFilterConfig
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.BirdsNest == nil {
				m.BirdsNest = &common.BirdsNestConfig{}
			}
			if err := m.BirdsNest.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ShardingBirdsNest", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTxFilterConfig
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTxFilterConfig
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTxFilterConfig
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ShardingBirdsNest == nil {
				m.ShardingBirdsNest = &common.ShardingBirdsNestConfig{}
			}
			if err := m.ShardingBirdsNest.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTxFilterConfig(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTxFilterConfig
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipTxFilterConfig(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowTxFilterConfig
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTxFilterConfig
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTxFilterConfig
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthTxFilterConfig
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupTxFilterConfig
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthTxFilterConfig
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthTxFilterConfig        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowTxFilterConfig          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupTxFilterConfig = fmt.Errorf("proto: unexpected end of group")
)
