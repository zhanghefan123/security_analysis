// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: tee/enclave_outcall.proto

package tee

import (
	common "zhanghefan123/security/protobuf/pb-go/common"
	context "context"
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// out call get
type OutCallGetRequest struct {
	ContractName string `protobuf:"bytes,1,opt,name=contract_name,json=contractName,proto3" json:"contract_name,omitempty"`
	Key          string `protobuf:"bytes,2,opt,name=key,proto3" json:"key,omitempty"`
	Extra        []byte `protobuf:"bytes,3,opt,name=extra,proto3" json:"extra,omitempty"`
}

func (m *OutCallGetRequest) Reset()         { *m = OutCallGetRequest{} }
func (m *OutCallGetRequest) String() string { return proto.CompactTextString(m) }
func (*OutCallGetRequest) ProtoMessage()    {}
func (*OutCallGetRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_7ea2725619d6b92d, []int{0}
}
func (m *OutCallGetRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *OutCallGetRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_OutCallGetRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *OutCallGetRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_OutCallGetRequest.Merge(m, src)
}
func (m *OutCallGetRequest) XXX_Size() int {
	return m.Size()
}
func (m *OutCallGetRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_OutCallGetRequest.DiscardUnknown(m)
}

var xxx_messageInfo_OutCallGetRequest proto.InternalMessageInfo

func (m *OutCallGetRequest) GetContractName() string {
	if m != nil {
		return m.ContractName
	}
	return ""
}

func (m *OutCallGetRequest) GetKey() string {
	if m != nil {
		return m.Key
	}
	return ""
}

func (m *OutCallGetRequest) GetExtra() []byte {
	if m != nil {
		return m.Extra
	}
	return nil
}

// out call put
type OutCallPutRequest struct {
	ContractName string `protobuf:"bytes,1,opt,name=contract_name,json=contractName,proto3" json:"contract_name,omitempty"`
	Key          string `protobuf:"bytes,2,opt,name=key,proto3" json:"key,omitempty"`
	Value        []byte `protobuf:"bytes,3,opt,name=value,proto3" json:"value,omitempty"`
}

func (m *OutCallPutRequest) Reset()         { *m = OutCallPutRequest{} }
func (m *OutCallPutRequest) String() string { return proto.CompactTextString(m) }
func (*OutCallPutRequest) ProtoMessage()    {}
func (*OutCallPutRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_7ea2725619d6b92d, []int{1}
}
func (m *OutCallPutRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *OutCallPutRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_OutCallPutRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *OutCallPutRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_OutCallPutRequest.Merge(m, src)
}
func (m *OutCallPutRequest) XXX_Size() int {
	return m.Size()
}
func (m *OutCallPutRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_OutCallPutRequest.DiscardUnknown(m)
}

var xxx_messageInfo_OutCallPutRequest proto.InternalMessageInfo

func (m *OutCallPutRequest) GetContractName() string {
	if m != nil {
		return m.ContractName
	}
	return ""
}

func (m *OutCallPutRequest) GetKey() string {
	if m != nil {
		return m.Key
	}
	return ""
}

func (m *OutCallPutRequest) GetValue() []byte {
	if m != nil {
		return m.Value
	}
	return nil
}

func init() {
	proto.RegisterType((*OutCallGetRequest)(nil), "tee.OutCallGetRequest")
	proto.RegisterType((*OutCallPutRequest)(nil), "tee.OutCallPutRequest")
}

func init() { proto.RegisterFile("tee/enclave_outcall.proto", fileDescriptor_7ea2725619d6b92d) }

var fileDescriptor_7ea2725619d6b92d = []byte{
	// 296 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0x91, 0x31, 0x4f, 0xc3, 0x30,
	0x10, 0x85, 0x63, 0x2a, 0x90, 0xb0, 0x8a, 0x04, 0xa6, 0x54, 0xa5, 0x83, 0x55, 0xb5, 0x4b, 0x17,
	0x1c, 0x09, 0x76, 0x06, 0x2a, 0xc4, 0x06, 0x55, 0x60, 0x62, 0x29, 0x8e, 0x75, 0x0a, 0xa8, 0x4e,
	0x1c, 0xdc, 0x73, 0x04, 0xff, 0x82, 0x89, 0xdf, 0xc4, 0xd8, 0x91, 0x11, 0x25, 0x7f, 0x04, 0x35,
	0x69, 0x95, 0x08, 0xc4, 0xc6, 0xe6, 0x77, 0xa7, 0xe7, 0x4f, 0xef, 0x1d, 0x3d, 0x46, 0x00, 0x1f,
	0x12, 0xa5, 0x65, 0x06, 0x33, 0xe3, 0x50, 0x49, 0xad, 0x45, 0x6a, 0x0d, 0x1a, 0xd6, 0x42, 0x80,
	0xfe, 0xa1, 0x32, 0x71, 0x6c, 0x12, 0xdf, 0xc2, 0xc2, 0x69, 0xac, 0x36, 0xc3, 0x07, 0x7a, 0x70,
	0xe3, 0x70, 0x22, 0xb5, 0xbe, 0x02, 0x0c, 0xe0, 0xd9, 0xc1, 0x02, 0xd9, 0x88, 0xee, 0x29, 0x93,
	0xa0, 0x95, 0x0a, 0x67, 0x89, 0x8c, 0xa1, 0x47, 0x06, 0x64, 0xbc, 0x1b, 0xb4, 0x37, 0xc3, 0x6b,
	0x19, 0x03, 0xdb, 0xa7, 0xad, 0x39, 0xbc, 0xf6, 0xb6, 0xca, 0xd5, 0xea, 0xc9, 0x3a, 0x74, 0x1b,
	0x5e, 0xd0, 0xca, 0x5e, 0x6b, 0x40, 0xc6, 0xed, 0xa0, 0x12, 0x0d, 0xc2, 0xd4, 0xfd, 0x03, 0x21,
	0x93, 0xda, 0xc1, 0x86, 0x50, 0x8a, 0xd3, 0x77, 0x42, 0x3b, 0x97, 0x55, 0xee, 0x35, 0xe9, 0x16,
	0x6c, 0x06, 0x96, 0x9d, 0x53, 0x5a, 0x87, 0x63, 0x5d, 0x81, 0x00, 0xe2, 0x57, 0xda, 0x7e, 0x57,
	0x54, 0xc5, 0x88, 0xc9, 0x1a, 0x1e, 0x94, 0x05, 0x0d, 0xbd, 0x86, 0x7f, 0xea, 0x7e, 0xf8, 0xeb,
	0x2c, 0x7f, 0xfb, 0x2f, 0xee, 0x3e, 0x72, 0x4e, 0x96, 0x39, 0x27, 0x5f, 0x39, 0x27, 0x6f, 0x05,
	0xf7, 0x96, 0x05, 0xf7, 0x3e, 0x0b, 0xee, 0xd1, 0x23, 0x63, 0x23, 0xa1, 0x1e, 0xe5, 0x53, 0x12,
	0xcb, 0x39, 0x58, 0x91, 0x86, 0xab, 0xcf, 0xef, 0x47, 0x8d, 0x91, 0xb1, 0x91, 0x5f, 0x4b, 0x3f,
	0x0d, 0x4f, 0x22, 0xe3, 0x23, 0x40, 0xb8, 0x53, 0x5e, 0xee, 0xec, 0x3b, 0x00, 0x00, 0xff, 0xff,
	0x7a, 0x0b, 0x77, 0x8e, 0xf0, 0x01, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// EnclaveOutCallServerClient is the client API for EnclaveOutCallServer service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type EnclaveOutCallServerClient interface {
	// Enclave fetch data from blockchain
	OutCallGet(ctx context.Context, in *OutCallGetRequest, opts ...grpc.CallOption) (*common.ContractResult, error)
	OutCallPut(ctx context.Context, in *OutCallPutRequest, opts ...grpc.CallOption) (*common.ContractResult, error)
}

type enclaveOutCallServerClient struct {
	cc *grpc.ClientConn
}

func NewEnclaveOutCallServerClient(cc *grpc.ClientConn) EnclaveOutCallServerClient {
	return &enclaveOutCallServerClient{cc}
}

func (c *enclaveOutCallServerClient) OutCallGet(ctx context.Context, in *OutCallGetRequest, opts ...grpc.CallOption) (*common.ContractResult, error) {
	out := new(common.ContractResult)
	err := c.cc.Invoke(ctx, "/tee.EnclaveOutCallServer/OutCallGet", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *enclaveOutCallServerClient) OutCallPut(ctx context.Context, in *OutCallPutRequest, opts ...grpc.CallOption) (*common.ContractResult, error) {
	out := new(common.ContractResult)
	err := c.cc.Invoke(ctx, "/tee.EnclaveOutCallServer/OutCallPut", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// EnclaveOutCallServerServer is the server API for EnclaveOutCallServer service.
type EnclaveOutCallServerServer interface {
	// Enclave fetch data from blockchain
	OutCallGet(context.Context, *OutCallGetRequest) (*common.ContractResult, error)
	OutCallPut(context.Context, *OutCallPutRequest) (*common.ContractResult, error)
}

// UnimplementedEnclaveOutCallServerServer can be embedded to have forward compatible implementations.
type UnimplementedEnclaveOutCallServerServer struct {
}

func (*UnimplementedEnclaveOutCallServerServer) OutCallGet(ctx context.Context, req *OutCallGetRequest) (*common.ContractResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method OutCallGet not implemented")
}
func (*UnimplementedEnclaveOutCallServerServer) OutCallPut(ctx context.Context, req *OutCallPutRequest) (*common.ContractResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method OutCallPut not implemented")
}

func RegisterEnclaveOutCallServerServer(s *grpc.Server, srv EnclaveOutCallServerServer) {
	s.RegisterService(&_EnclaveOutCallServer_serviceDesc, srv)
}

func _EnclaveOutCallServer_OutCallGet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OutCallGetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EnclaveOutCallServerServer).OutCallGet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tee.EnclaveOutCallServer/OutCallGet",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EnclaveOutCallServerServer).OutCallGet(ctx, req.(*OutCallGetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EnclaveOutCallServer_OutCallPut_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OutCallPutRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EnclaveOutCallServerServer).OutCallPut(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tee.EnclaveOutCallServer/OutCallPut",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EnclaveOutCallServerServer).OutCallPut(ctx, req.(*OutCallPutRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _EnclaveOutCallServer_serviceDesc = grpc.ServiceDesc{
	ServiceName: "tee.EnclaveOutCallServer",
	HandlerType: (*EnclaveOutCallServerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "OutCallGet",
			Handler:    _EnclaveOutCallServer_OutCallGet_Handler,
		},
		{
			MethodName: "OutCallPut",
			Handler:    _EnclaveOutCallServer_OutCallPut_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "tee/enclave_outcall.proto",
}

func (m *OutCallGetRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *OutCallGetRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *OutCallGetRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Extra) > 0 {
		i -= len(m.Extra)
		copy(dAtA[i:], m.Extra)
		i = encodeVarintEnclaveOutcall(dAtA, i, uint64(len(m.Extra)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Key) > 0 {
		i -= len(m.Key)
		copy(dAtA[i:], m.Key)
		i = encodeVarintEnclaveOutcall(dAtA, i, uint64(len(m.Key)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.ContractName) > 0 {
		i -= len(m.ContractName)
		copy(dAtA[i:], m.ContractName)
		i = encodeVarintEnclaveOutcall(dAtA, i, uint64(len(m.ContractName)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *OutCallPutRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *OutCallPutRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *OutCallPutRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Value) > 0 {
		i -= len(m.Value)
		copy(dAtA[i:], m.Value)
		i = encodeVarintEnclaveOutcall(dAtA, i, uint64(len(m.Value)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Key) > 0 {
		i -= len(m.Key)
		copy(dAtA[i:], m.Key)
		i = encodeVarintEnclaveOutcall(dAtA, i, uint64(len(m.Key)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.ContractName) > 0 {
		i -= len(m.ContractName)
		copy(dAtA[i:], m.ContractName)
		i = encodeVarintEnclaveOutcall(dAtA, i, uint64(len(m.ContractName)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintEnclaveOutcall(dAtA []byte, offset int, v uint64) int {
	offset -= sovEnclaveOutcall(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *OutCallGetRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ContractName)
	if l > 0 {
		n += 1 + l + sovEnclaveOutcall(uint64(l))
	}
	l = len(m.Key)
	if l > 0 {
		n += 1 + l + sovEnclaveOutcall(uint64(l))
	}
	l = len(m.Extra)
	if l > 0 {
		n += 1 + l + sovEnclaveOutcall(uint64(l))
	}
	return n
}

func (m *OutCallPutRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ContractName)
	if l > 0 {
		n += 1 + l + sovEnclaveOutcall(uint64(l))
	}
	l = len(m.Key)
	if l > 0 {
		n += 1 + l + sovEnclaveOutcall(uint64(l))
	}
	l = len(m.Value)
	if l > 0 {
		n += 1 + l + sovEnclaveOutcall(uint64(l))
	}
	return n
}

func sovEnclaveOutcall(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozEnclaveOutcall(x uint64) (n int) {
	return sovEnclaveOutcall(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *OutCallGetRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEnclaveOutcall
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: OutCallGetRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: OutCallGetRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ContractName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEnclaveOutcall
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEnclaveOutcall
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEnclaveOutcall
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ContractName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Key", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEnclaveOutcall
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEnclaveOutcall
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEnclaveOutcall
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Key = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Extra", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEnclaveOutcall
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthEnclaveOutcall
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthEnclaveOutcall
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Extra = append(m.Extra[:0], dAtA[iNdEx:postIndex]...)
			if m.Extra == nil {
				m.Extra = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEnclaveOutcall(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthEnclaveOutcall
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *OutCallPutRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEnclaveOutcall
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: OutCallPutRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: OutCallPutRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ContractName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEnclaveOutcall
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEnclaveOutcall
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEnclaveOutcall
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ContractName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Key", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEnclaveOutcall
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEnclaveOutcall
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEnclaveOutcall
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Key = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Value", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEnclaveOutcall
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthEnclaveOutcall
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthEnclaveOutcall
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Value = append(m.Value[:0], dAtA[iNdEx:postIndex]...)
			if m.Value == nil {
				m.Value = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEnclaveOutcall(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthEnclaveOutcall
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipEnclaveOutcall(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowEnclaveOutcall
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowEnclaveOutcall
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowEnclaveOutcall
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthEnclaveOutcall
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupEnclaveOutcall
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthEnclaveOutcall
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthEnclaveOutcall        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowEnclaveOutcall          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupEnclaveOutcall = fmt.Errorf("proto: unexpected end of group")
)
