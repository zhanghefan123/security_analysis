// Code generated by MockGen. DO NOT EDIT.
// Source: tx_filiter_interface.go

// Package mock is a generated GoMock package.
package mock

import (
	reflect "reflect"

	birdsnest "zhanghefan123/security/common/birdsnest"
	txfilter "zhanghefan123/security/protobuf/pb-go/txfilter"
	gomock "github.com/golang/mock/gomock"
)

// MockTxFilter is a mock of TxFilter interface.
type MockTxFilter struct {
	ctrl     *gomock.Controller
	recorder *MockTxFilterMockRecorder
}

// MockTxFilterMockRecorder is the mock recorder for MockTxFilter.
type MockTxFilterMockRecorder struct {
	mock *MockTxFilter
}

// NewMockTxFilter creates a new mock instance.
func NewMockTxFilter(ctrl *gomock.Controller) *MockTxFilter {
	mock := &MockTxFilter{ctrl: ctrl}
	mock.recorder = &MockTxFilterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTxFilter) EXPECT() *MockTxFilterMockRecorder {
	return m.recorder
}

// Add mocks base method.
func (m *MockTxFilter) Add(txId string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Add", txId)
	ret0, _ := ret[0].(error)
	return ret0
}

// Add indicates an expected call of Add.
func (mr *MockTxFilterMockRecorder) Add(txId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Add", reflect.TypeOf((*MockTxFilter)(nil).Add), txId)
}

// Adds mocks base method.
func (m *MockTxFilter) Adds(txIds []string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Adds", txIds)
	ret0, _ := ret[0].(error)
	return ret0
}

// Adds indicates an expected call of Adds.
func (mr *MockTxFilterMockRecorder) Adds(txIds interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Adds", reflect.TypeOf((*MockTxFilter)(nil).Adds), txIds)
}

// AddsAndSetHeight mocks base method.
func (m *MockTxFilter) AddsAndSetHeight(txId []string, height uint64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddsAndSetHeight", txId, height)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddsAndSetHeight indicates an expected call of AddsAndSetHeight.
func (mr *MockTxFilterMockRecorder) AddsAndSetHeight(txId, height interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddsAndSetHeight", reflect.TypeOf((*MockTxFilter)(nil).AddsAndSetHeight), txId, height)
}

// Close mocks base method.
func (m *MockTxFilter) Close() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Close")
}

// Close indicates an expected call of Close.
func (mr *MockTxFilterMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockTxFilter)(nil).Close))
}

// GetHeight mocks base method.
func (m *MockTxFilter) GetHeight() uint64 {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetHeight")
	ret0, _ := ret[0].(uint64)
	return ret0
}

// GetHeight indicates an expected call of GetHeight.
func (mr *MockTxFilterMockRecorder) GetHeight() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetHeight", reflect.TypeOf((*MockTxFilter)(nil).GetHeight))
}

// IsExists mocks base method.
func (m *MockTxFilter) IsExists(txId string, ruleType ...birdsnest.RuleType) (bool, *txfilter.Stat, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{txId}
	for _, a := range ruleType {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "IsExists", varargs...)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(*txfilter.Stat)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// IsExists indicates an expected call of IsExists.
func (mr *MockTxFilterMockRecorder) IsExists(txId interface{}, ruleType ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{txId}, ruleType...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsExists", reflect.TypeOf((*MockTxFilter)(nil).IsExists), varargs...)
}

// IsExistsAndReturnHeight mocks base method.
func (m *MockTxFilter) IsExistsAndReturnHeight(txId string, ruleType ...birdsnest.RuleType) (bool, uint64, *txfilter.Stat, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{txId}
	for _, a := range ruleType {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "IsExistsAndReturnHeight", varargs...)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(uint64)
	ret2, _ := ret[2].(*txfilter.Stat)
	ret3, _ := ret[3].(error)
	return ret0, ret1, ret2, ret3
}

// IsExistsAndReturnHeight indicates an expected call of IsExistsAndReturnHeight.
func (mr *MockTxFilterMockRecorder) IsExistsAndReturnHeight(txId interface{}, ruleType ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{txId}, ruleType...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsExistsAndReturnHeight", reflect.TypeOf((*MockTxFilter)(nil).IsExistsAndReturnHeight), varargs...)
}

// SetHeight mocks base method.
func (m *MockTxFilter) SetHeight(height uint64) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetHeight", height)
}

// SetHeight indicates an expected call of SetHeight.
func (mr *MockTxFilterMockRecorder) SetHeight(height interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetHeight", reflect.TypeOf((*MockTxFilter)(nil).SetHeight), height)
}

// ValidateRule mocks base method.
func (m *MockTxFilter) ValidateRule(txId string, ruleType ...birdsnest.RuleType) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{txId}
	for _, a := range ruleType {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ValidateRule", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// ValidateRule indicates an expected call of ValidateRule.
func (mr *MockTxFilterMockRecorder) ValidateRule(txId interface{}, ruleType ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{txId}, ruleType...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ValidateRule", reflect.TypeOf((*MockTxFilter)(nil).ValidateRule), varargs...)
}
