// Code generated by MockGen. DO NOT EDIT.
// Source: consensus_interface.go

// Package mock is a generated GoMock package.
package mock

import (
	reflect "reflect"

	common "zhanghefan123/security/protobuf/pb-go/common"
	consensus "zhanghefan123/security/protobuf/pb-go/consensus"
	protocol "zhanghefan123/security/protocol"
	gomock "github.com/golang/mock/gomock"
)

// MockConsensusEngine is a mock of ConsensusEngine interface.
type MockConsensusEngine struct {
	ctrl     *gomock.Controller
	recorder *MockConsensusEngineMockRecorder
}

// MockConsensusEngineMockRecorder is the mock recorder for MockConsensusEngine.
type MockConsensusEngineMockRecorder struct {
	mock *MockConsensusEngine
}

// NewMockConsensusEngine creates a new mock instance.
func NewMockConsensusEngine(ctrl *gomock.Controller) *MockConsensusEngine {
	mock := &MockConsensusEngine{ctrl: ctrl}
	mock.recorder = &MockConsensusEngineMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockConsensusEngine) EXPECT() *MockConsensusEngineMockRecorder {
	return m.recorder
}

// Start mocks base method.
func (m *MockConsensusEngine) Start() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Start")
	ret0, _ := ret[0].(error)
	return ret0
}

// Start indicates an expected call of Start.
func (mr *MockConsensusEngineMockRecorder) Start() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Start", reflect.TypeOf((*MockConsensusEngine)(nil).Start))
}

// Stop mocks base method.
func (m *MockConsensusEngine) Stop() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Stop")
	ret0, _ := ret[0].(error)
	return ret0
}

// Stop indicates an expected call of Stop.
func (mr *MockConsensusEngineMockRecorder) Stop() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Stop", reflect.TypeOf((*MockConsensusEngine)(nil).Stop))
}

// MockConsensusState is a mock of ConsensusState interface.
type MockConsensusState struct {
	ctrl     *gomock.Controller
	recorder *MockConsensusStateMockRecorder
}

// MockConsensusStateMockRecorder is the mock recorder for MockConsensusState.
type MockConsensusStateMockRecorder struct {
	mock *MockConsensusState
}

// NewMockConsensusState creates a new mock instance.
func NewMockConsensusState(ctrl *gomock.Controller) *MockConsensusState {
	mock := &MockConsensusState{ctrl: ctrl}
	mock.recorder = &MockConsensusStateMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockConsensusState) EXPECT() *MockConsensusStateMockRecorder {
	return m.recorder
}

// GetConsensusStateJSON mocks base method.
func (m *MockConsensusState) GetConsensusStateJSON() ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetConsensusStateJSON")
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetConsensusStateJSON indicates an expected call of GetConsensusStateJSON.
func (mr *MockConsensusStateMockRecorder) GetConsensusStateJSON() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetConsensusStateJSON", reflect.TypeOf((*MockConsensusState)(nil).GetConsensusStateJSON))
}

// GetLastHeight mocks base method.
func (m *MockConsensusState) GetLastHeight() uint64 {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLastHeight")
	ret0, _ := ret[0].(uint64)
	return ret0
}

// GetLastHeight indicates an expected call of GetLastHeight.
func (mr *MockConsensusStateMockRecorder) GetLastHeight() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLastHeight", reflect.TypeOf((*MockConsensusState)(nil).GetLastHeight))
}

// GetValidators mocks base method.
func (m *MockConsensusState) GetValidators() ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetValidators")
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetValidators indicates an expected call of GetValidators.
func (mr *MockConsensusStateMockRecorder) GetValidators() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetValidators", reflect.TypeOf((*MockConsensusState)(nil).GetValidators))
}

// MockConsensusExtendEngine is a mock of ConsensusExtendEngine interface.
type MockConsensusExtendEngine struct {
	ctrl     *gomock.Controller
	recorder *MockConsensusExtendEngineMockRecorder
}

// MockConsensusExtendEngineMockRecorder is the mock recorder for MockConsensusExtendEngine.
type MockConsensusExtendEngineMockRecorder struct {
	mock *MockConsensusExtendEngine
}

// NewMockConsensusExtendEngine creates a new mock instance.
func NewMockConsensusExtendEngine(ctrl *gomock.Controller) *MockConsensusExtendEngine {
	mock := &MockConsensusExtendEngine{ctrl: ctrl}
	mock.recorder = &MockConsensusExtendEngineMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockConsensusExtendEngine) EXPECT() *MockConsensusExtendEngineMockRecorder {
	return m.recorder
}

// InitExtendHandler mocks base method.
func (m *MockConsensusExtendEngine) InitExtendHandler(handler protocol.ConsensusExtendHandler) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "InitExtendHandler", handler)
}

// InitExtendHandler indicates an expected call of InitExtendHandler.
func (mr *MockConsensusExtendEngineMockRecorder) InitExtendHandler(handler interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InitExtendHandler", reflect.TypeOf((*MockConsensusExtendEngine)(nil).InitExtendHandler), handler)
}

// Start mocks base method.
func (m *MockConsensusExtendEngine) Start() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Start")
	ret0, _ := ret[0].(error)
	return ret0
}

// Start indicates an expected call of Start.
func (mr *MockConsensusExtendEngineMockRecorder) Start() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Start", reflect.TypeOf((*MockConsensusExtendEngine)(nil).Start))
}

// Stop mocks base method.
func (m *MockConsensusExtendEngine) Stop() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Stop")
	ret0, _ := ret[0].(error)
	return ret0
}

// Stop indicates an expected call of Stop.
func (mr *MockConsensusExtendEngineMockRecorder) Stop() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Stop", reflect.TypeOf((*MockConsensusExtendEngine)(nil).Stop))
}

// MockConsensusExtendHandler is a mock of ConsensusExtendHandler interface.
type MockConsensusExtendHandler struct {
	ctrl     *gomock.Controller
	recorder *MockConsensusExtendHandlerMockRecorder
}

// MockConsensusExtendHandlerMockRecorder is the mock recorder for MockConsensusExtendHandler.
type MockConsensusExtendHandlerMockRecorder struct {
	mock *MockConsensusExtendHandler
}

// NewMockConsensusExtendHandler creates a new mock instance.
func NewMockConsensusExtendHandler(ctrl *gomock.Controller) *MockConsensusExtendHandler {
	mock := &MockConsensusExtendHandler{ctrl: ctrl}
	mock.recorder = &MockConsensusExtendHandlerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockConsensusExtendHandler) EXPECT() *MockConsensusExtendHandlerMockRecorder {
	return m.recorder
}

// CreateRWSet mocks base method.
func (m *MockConsensusExtendHandler) CreateRWSet(preBlkHash []byte, proposedBlock *consensus.ProposalBlock) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateRWSet", preBlkHash, proposedBlock)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateRWSet indicates an expected call of CreateRWSet.
func (mr *MockConsensusExtendHandlerMockRecorder) CreateRWSet(preBlkHash, proposedBlock interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateRWSet", reflect.TypeOf((*MockConsensusExtendHandler)(nil).CreateRWSet), preBlkHash, proposedBlock)
}

// GetValidators mocks base method.
func (m *MockConsensusExtendHandler) GetValidators() ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetValidators")
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetValidators indicates an expected call of GetValidators.
func (mr *MockConsensusExtendHandlerMockRecorder) GetValidators() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetValidators", reflect.TypeOf((*MockConsensusExtendHandler)(nil).GetValidators))
}

// VerifyConsensusArgs mocks base method.
func (m *MockConsensusExtendHandler) VerifyConsensusArgs(block *common.Block, blockTxRwSet map[string]*common.TxRWSet) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "VerifyConsensusArgs", block, blockTxRwSet)
	ret0, _ := ret[0].(error)
	return ret0
}

// VerifyConsensusArgs indicates an expected call of VerifyConsensusArgs.
func (mr *MockConsensusExtendHandlerMockRecorder) VerifyConsensusArgs(block, blockTxRwSet interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VerifyConsensusArgs", reflect.TypeOf((*MockConsensusExtendHandler)(nil).VerifyConsensusArgs), block, blockTxRwSet)
}
