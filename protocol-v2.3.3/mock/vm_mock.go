// Code generated by MockGen. DO NOT EDIT.
// Source: vm_interface.go

// Package mock is a generated GoMock package.
package mock

import (
	reflect "reflect"

	accesscontrol "zhanghefan123/security/protobuf/pb-go/accesscontrol"
	common "zhanghefan123/security/protobuf/pb-go/common"
	config "zhanghefan123/security/protobuf/pb-go/config"
	vm "zhanghefan123/security/protobuf/pb-go/vm"
	protocol "zhanghefan123/security/protocol"
	gomock "github.com/golang/mock/gomock"
)

// MockVmManager is a mock of VmManager interface.
type MockVmManager struct {
	ctrl     *gomock.Controller
	recorder *MockVmManagerMockRecorder
}

// MockVmManagerMockRecorder is the mock recorder for MockVmManager.
type MockVmManagerMockRecorder struct {
	mock *MockVmManager
}

// NewMockVmManager creates a new mock instance.
func NewMockVmManager(ctrl *gomock.Controller) *MockVmManager {
	mock := &MockVmManager{ctrl: ctrl}
	mock.recorder = &MockVmManagerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockVmManager) EXPECT() *MockVmManagerMockRecorder {
	return m.recorder
}

// AfterSchedule mocks base method.
func (m *MockVmManager) AfterSchedule(blockFingerprint string, blockHeight uint64) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "AfterSchedule", blockFingerprint, blockHeight)
}

// AfterSchedule indicates an expected call of AfterSchedule.
func (mr *MockVmManagerMockRecorder) AfterSchedule(blockFingerprint, blockHeight interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AfterSchedule", reflect.TypeOf((*MockVmManager)(nil).AfterSchedule), blockFingerprint, blockHeight)
}

// BeforeSchedule mocks base method.
func (m *MockVmManager) BeforeSchedule(blockFingerprint string, blockHeight uint64) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "BeforeSchedule", blockFingerprint, blockHeight)
}

// BeforeSchedule indicates an expected call of BeforeSchedule.
func (mr *MockVmManagerMockRecorder) BeforeSchedule(blockFingerprint, blockHeight interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BeforeSchedule", reflect.TypeOf((*MockVmManager)(nil).BeforeSchedule), blockFingerprint, blockHeight)
}

// GetAccessControl mocks base method.
func (m *MockVmManager) GetAccessControl() protocol.AccessControlProvider {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAccessControl")
	ret0, _ := ret[0].(protocol.AccessControlProvider)
	return ret0
}

// GetAccessControl indicates an expected call of GetAccessControl.
func (mr *MockVmManagerMockRecorder) GetAccessControl() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAccessControl", reflect.TypeOf((*MockVmManager)(nil).GetAccessControl))
}

// GetChainNodesInfoProvider mocks base method.
func (m *MockVmManager) GetChainNodesInfoProvider() protocol.ChainNodesInfoProvider {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetChainNodesInfoProvider")
	ret0, _ := ret[0].(protocol.ChainNodesInfoProvider)
	return ret0
}

// GetChainNodesInfoProvider indicates an expected call of GetChainNodesInfoProvider.
func (mr *MockVmManagerMockRecorder) GetChainNodesInfoProvider() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetChainNodesInfoProvider", reflect.TypeOf((*MockVmManager)(nil).GetChainNodesInfoProvider))
}

// RunContract mocks base method.
func (m *MockVmManager) RunContract(contract *common.Contract, method string, byteCode []byte, parameters map[string][]byte, txContext protocol.TxSimContext, gasUsed uint64, refTxType common.TxType) (*common.ContractResult, protocol.ExecOrderTxType, common.TxStatusCode) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RunContract", contract, method, byteCode, parameters, txContext, gasUsed, refTxType)
	ret0, _ := ret[0].(*common.ContractResult)
	ret1, _ := ret[1].(protocol.ExecOrderTxType)
	ret2, _ := ret[2].(common.TxStatusCode)
	return ret0, ret1, ret2
}

// RunContract indicates an expected call of RunContract.
func (mr *MockVmManagerMockRecorder) RunContract(contract, method, byteCode, parameters, txContext, gasUsed, refTxType interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RunContract", reflect.TypeOf((*MockVmManager)(nil).RunContract), contract, method, byteCode, parameters, txContext, gasUsed, refTxType)
}

// Start mocks base method.
func (m *MockVmManager) Start() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Start")
	ret0, _ := ret[0].(error)
	return ret0
}

// Start indicates an expected call of Start.
func (mr *MockVmManagerMockRecorder) Start() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Start", reflect.TypeOf((*MockVmManager)(nil).Start))
}

// Stop mocks base method.
func (m *MockVmManager) Stop() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Stop")
	ret0, _ := ret[0].(error)
	return ret0
}

// Stop indicates an expected call of Stop.
func (mr *MockVmManagerMockRecorder) Stop() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Stop", reflect.TypeOf((*MockVmManager)(nil).Stop))
}

// MockRuntimeInstance is a mock of RuntimeInstance interface.
type MockRuntimeInstance struct {
	ctrl     *gomock.Controller
	recorder *MockRuntimeInstanceMockRecorder
}

// MockRuntimeInstanceMockRecorder is the mock recorder for MockRuntimeInstance.
type MockRuntimeInstanceMockRecorder struct {
	mock *MockRuntimeInstance
}

// NewMockRuntimeInstance creates a new mock instance.
func NewMockRuntimeInstance(ctrl *gomock.Controller) *MockRuntimeInstance {
	mock := &MockRuntimeInstance{ctrl: ctrl}
	mock.recorder = &MockRuntimeInstanceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRuntimeInstance) EXPECT() *MockRuntimeInstanceMockRecorder {
	return m.recorder
}

// Invoke mocks base method.
func (m *MockRuntimeInstance) Invoke(contractId *common.Contract, method string, byteCode []byte, parameters map[string][]byte, txContext protocol.TxSimContext, gasUsed uint64) (*common.ContractResult, protocol.ExecOrderTxType) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Invoke", contractId, method, byteCode, parameters, txContext, gasUsed)
	ret0, _ := ret[0].(*common.ContractResult)
	ret1, _ := ret[1].(protocol.ExecOrderTxType)
	return ret0, ret1
}

// Invoke indicates an expected call of Invoke.
func (mr *MockRuntimeInstanceMockRecorder) Invoke(contractId, method, byteCode, parameters, txContext, gasUsed interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Invoke", reflect.TypeOf((*MockRuntimeInstance)(nil).Invoke), contractId, method, byteCode, parameters, txContext, gasUsed)
}

// MockVmInstancesManager is a mock of VmInstancesManager interface.
type MockVmInstancesManager struct {
	ctrl     *gomock.Controller
	recorder *MockVmInstancesManagerMockRecorder
}

// MockVmInstancesManagerMockRecorder is the mock recorder for MockVmInstancesManager.
type MockVmInstancesManagerMockRecorder struct {
	mock *MockVmInstancesManager
}

// NewMockVmInstancesManager creates a new mock instance.
func NewMockVmInstancesManager(ctrl *gomock.Controller) *MockVmInstancesManager {
	mock := &MockVmInstancesManager{ctrl: ctrl}
	mock.recorder = &MockVmInstancesManagerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockVmInstancesManager) EXPECT() *MockVmInstancesManagerMockRecorder {
	return m.recorder
}

// AfterSchedule mocks base method.
func (m *MockVmInstancesManager) AfterSchedule(blockFingerprint string, blockHeight uint64) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "AfterSchedule", blockFingerprint, blockHeight)
}

// AfterSchedule indicates an expected call of AfterSchedule.
func (mr *MockVmInstancesManagerMockRecorder) AfterSchedule(blockFingerprint, blockHeight interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AfterSchedule", reflect.TypeOf((*MockVmInstancesManager)(nil).AfterSchedule), blockFingerprint, blockHeight)
}

// BeforeSchedule mocks base method.
func (m *MockVmInstancesManager) BeforeSchedule(blockFingerprint string, blockHeight uint64) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "BeforeSchedule", blockFingerprint, blockHeight)
}

// BeforeSchedule indicates an expected call of BeforeSchedule.
func (mr *MockVmInstancesManagerMockRecorder) BeforeSchedule(blockFingerprint, blockHeight interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BeforeSchedule", reflect.TypeOf((*MockVmInstancesManager)(nil).BeforeSchedule), blockFingerprint, blockHeight)
}

// NewRuntimeInstance mocks base method.
func (m *MockVmInstancesManager) NewRuntimeInstance(txSimContext protocol.TxSimContext, chainId, method, codePath string, contract *common.Contract, byteCode []byte, log protocol.Logger) (protocol.RuntimeInstance, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NewRuntimeInstance", txSimContext, chainId, method, codePath, contract, byteCode, log)
	ret0, _ := ret[0].(protocol.RuntimeInstance)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// NewRuntimeInstance indicates an expected call of NewRuntimeInstance.
func (mr *MockVmInstancesManagerMockRecorder) NewRuntimeInstance(txSimContext, chainId, method, codePath, contract, byteCode, log interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewRuntimeInstance", reflect.TypeOf((*MockVmInstancesManager)(nil).NewRuntimeInstance), txSimContext, chainId, method, codePath, contract, byteCode, log)
}

// StartVM mocks base method.
func (m *MockVmInstancesManager) StartVM() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StartVM")
	ret0, _ := ret[0].(error)
	return ret0
}

// StartVM indicates an expected call of StartVM.
func (mr *MockVmInstancesManagerMockRecorder) StartVM() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StartVM", reflect.TypeOf((*MockVmInstancesManager)(nil).StartVM))
}

// StopVM mocks base method.
func (m *MockVmInstancesManager) StopVM() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StopVM")
	ret0, _ := ret[0].(error)
	return ret0
}

// StopVM indicates an expected call of StopVM.
func (mr *MockVmInstancesManagerMockRecorder) StopVM() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StopVM", reflect.TypeOf((*MockVmInstancesManager)(nil).StopVM))
}

// MockContractWacsiCommon is a mock of ContractWacsiCommon interface.
type MockContractWacsiCommon struct {
	ctrl     *gomock.Controller
	recorder *MockContractWacsiCommonMockRecorder
}

// MockContractWacsiCommonMockRecorder is the mock recorder for MockContractWacsiCommon.
type MockContractWacsiCommonMockRecorder struct {
	mock *MockContractWacsiCommon
}

// NewMockContractWacsiCommon creates a new mock instance.
func NewMockContractWacsiCommon(ctrl *gomock.Controller) *MockContractWacsiCommon {
	mock := &MockContractWacsiCommon{ctrl: ctrl}
	mock.recorder = &MockContractWacsiCommonMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockContractWacsiCommon) EXPECT() *MockContractWacsiCommonMockRecorder {
	return m.recorder
}

// CallContract mocks base method.
func (m *MockContractWacsiCommon) CallContract() int32 {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CallContract")
	ret0, _ := ret[0].(int32)
	return ret0
}

// CallContract indicates an expected call of CallContract.
func (mr *MockContractWacsiCommonMockRecorder) CallContract() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CallContract", reflect.TypeOf((*MockContractWacsiCommon)(nil).CallContract))
}

// ErrorResult mocks base method.
func (m *MockContractWacsiCommon) ErrorResult() int32 {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ErrorResult")
	ret0, _ := ret[0].(int32)
	return ret0
}

// ErrorResult indicates an expected call of ErrorResult.
func (mr *MockContractWacsiCommonMockRecorder) ErrorResult() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ErrorResult", reflect.TypeOf((*MockContractWacsiCommon)(nil).ErrorResult))
}

// LogMessage mocks base method.
func (m *MockContractWacsiCommon) LogMessage() int32 {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LogMessage")
	ret0, _ := ret[0].(int32)
	return ret0
}

// LogMessage indicates an expected call of LogMessage.
func (mr *MockContractWacsiCommonMockRecorder) LogMessage() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LogMessage", reflect.TypeOf((*MockContractWacsiCommon)(nil).LogMessage))
}

// SuccessResult mocks base method.
func (m *MockContractWacsiCommon) SuccessResult() int32 {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SuccessResult")
	ret0, _ := ret[0].(int32)
	return ret0
}

// SuccessResult indicates an expected call of SuccessResult.
func (mr *MockContractWacsiCommonMockRecorder) SuccessResult() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SuccessResult", reflect.TypeOf((*MockContractWacsiCommon)(nil).SuccessResult))
}

// MockContractWacsiKV is a mock of ContractWacsiKV interface.
type MockContractWacsiKV struct {
	ctrl     *gomock.Controller
	recorder *MockContractWacsiKVMockRecorder
}

// MockContractWacsiKVMockRecorder is the mock recorder for MockContractWacsiKV.
type MockContractWacsiKVMockRecorder struct {
	mock *MockContractWacsiKV
}

// NewMockContractWacsiKV creates a new mock instance.
func NewMockContractWacsiKV(ctrl *gomock.Controller) *MockContractWacsiKV {
	mock := &MockContractWacsiKV{ctrl: ctrl}
	mock.recorder = &MockContractWacsiKVMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockContractWacsiKV) EXPECT() *MockContractWacsiKVMockRecorder {
	return m.recorder
}

// CallContract mocks base method.
func (m *MockContractWacsiKV) CallContract() int32 {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CallContract")
	ret0, _ := ret[0].(int32)
	return ret0
}

// CallContract indicates an expected call of CallContract.
func (mr *MockContractWacsiKVMockRecorder) CallContract() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CallContract", reflect.TypeOf((*MockContractWacsiKV)(nil).CallContract))
}

// DeleteState mocks base method.
func (m *MockContractWacsiKV) DeleteState() int32 {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteState")
	ret0, _ := ret[0].(int32)
	return ret0
}

// DeleteState indicates an expected call of DeleteState.
func (mr *MockContractWacsiKVMockRecorder) DeleteState() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteState", reflect.TypeOf((*MockContractWacsiKV)(nil).DeleteState))
}

// ErrorResult mocks base method.
func (m *MockContractWacsiKV) ErrorResult() int32 {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ErrorResult")
	ret0, _ := ret[0].(int32)
	return ret0
}

// ErrorResult indicates an expected call of ErrorResult.
func (mr *MockContractWacsiKVMockRecorder) ErrorResult() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ErrorResult", reflect.TypeOf((*MockContractWacsiKV)(nil).ErrorResult))
}

// GetState mocks base method.
func (m *MockContractWacsiKV) GetState() int32 {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetState")
	ret0, _ := ret[0].(int32)
	return ret0
}

// GetState indicates an expected call of GetState.
func (mr *MockContractWacsiKVMockRecorder) GetState() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetState", reflect.TypeOf((*MockContractWacsiKV)(nil).GetState))
}

// KvIterator mocks base method.
func (m *MockContractWacsiKV) KvIterator() int32 {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "KvIterator")
	ret0, _ := ret[0].(int32)
	return ret0
}

// KvIterator indicates an expected call of KvIterator.
func (mr *MockContractWacsiKVMockRecorder) KvIterator() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "KvIterator", reflect.TypeOf((*MockContractWacsiKV)(nil).KvIterator))
}

// KvIteratorClose mocks base method.
func (m *MockContractWacsiKV) KvIteratorClose() int32 {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "KvIteratorClose")
	ret0, _ := ret[0].(int32)
	return ret0
}

// KvIteratorClose indicates an expected call of KvIteratorClose.
func (mr *MockContractWacsiKVMockRecorder) KvIteratorClose() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "KvIteratorClose", reflect.TypeOf((*MockContractWacsiKV)(nil).KvIteratorClose))
}

// KvIteratorHasNext mocks base method.
func (m *MockContractWacsiKV) KvIteratorHasNext() int32 {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "KvIteratorHasNext")
	ret0, _ := ret[0].(int32)
	return ret0
}

// KvIteratorHasNext indicates an expected call of KvIteratorHasNext.
func (mr *MockContractWacsiKVMockRecorder) KvIteratorHasNext() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "KvIteratorHasNext", reflect.TypeOf((*MockContractWacsiKV)(nil).KvIteratorHasNext))
}

// KvIteratorNext mocks base method.
func (m *MockContractWacsiKV) KvIteratorNext() int32 {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "KvIteratorNext")
	ret0, _ := ret[0].(int32)
	return ret0
}

// KvIteratorNext indicates an expected call of KvIteratorNext.
func (mr *MockContractWacsiKVMockRecorder) KvIteratorNext() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "KvIteratorNext", reflect.TypeOf((*MockContractWacsiKV)(nil).KvIteratorNext))
}

// KvPreIterator mocks base method.
func (m *MockContractWacsiKV) KvPreIterator() int32 {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "KvPreIterator")
	ret0, _ := ret[0].(int32)
	return ret0
}

// KvPreIterator indicates an expected call of KvPreIterator.
func (mr *MockContractWacsiKVMockRecorder) KvPreIterator() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "KvPreIterator", reflect.TypeOf((*MockContractWacsiKV)(nil).KvPreIterator))
}

// LogMessage mocks base method.
func (m *MockContractWacsiKV) LogMessage() int32 {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LogMessage")
	ret0, _ := ret[0].(int32)
	return ret0
}

// LogMessage indicates an expected call of LogMessage.
func (mr *MockContractWacsiKVMockRecorder) LogMessage() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LogMessage", reflect.TypeOf((*MockContractWacsiKV)(nil).LogMessage))
}

// PutState mocks base method.
func (m *MockContractWacsiKV) PutState() int32 {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PutState")
	ret0, _ := ret[0].(int32)
	return ret0
}

// PutState indicates an expected call of PutState.
func (mr *MockContractWacsiKVMockRecorder) PutState() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PutState", reflect.TypeOf((*MockContractWacsiKV)(nil).PutState))
}

// SuccessResult mocks base method.
func (m *MockContractWacsiKV) SuccessResult() int32 {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SuccessResult")
	ret0, _ := ret[0].(int32)
	return ret0
}

// SuccessResult indicates an expected call of SuccessResult.
func (mr *MockContractWacsiKVMockRecorder) SuccessResult() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SuccessResult", reflect.TypeOf((*MockContractWacsiKV)(nil).SuccessResult))
}

// MockContractWacsiSQL is a mock of ContractWacsiSQL interface.
type MockContractWacsiSQL struct {
	ctrl     *gomock.Controller
	recorder *MockContractWacsiSQLMockRecorder
}

// MockContractWacsiSQLMockRecorder is the mock recorder for MockContractWacsiSQL.
type MockContractWacsiSQLMockRecorder struct {
	mock *MockContractWacsiSQL
}

// NewMockContractWacsiSQL creates a new mock instance.
func NewMockContractWacsiSQL(ctrl *gomock.Controller) *MockContractWacsiSQL {
	mock := &MockContractWacsiSQL{ctrl: ctrl}
	mock.recorder = &MockContractWacsiSQLMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockContractWacsiSQL) EXPECT() *MockContractWacsiSQLMockRecorder {
	return m.recorder
}

// CallContract mocks base method.
func (m *MockContractWacsiSQL) CallContract() int32 {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CallContract")
	ret0, _ := ret[0].(int32)
	return ret0
}

// CallContract indicates an expected call of CallContract.
func (mr *MockContractWacsiSQLMockRecorder) CallContract() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CallContract", reflect.TypeOf((*MockContractWacsiSQL)(nil).CallContract))
}

// ErrorResult mocks base method.
func (m *MockContractWacsiSQL) ErrorResult() int32 {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ErrorResult")
	ret0, _ := ret[0].(int32)
	return ret0
}

// ErrorResult indicates an expected call of ErrorResult.
func (mr *MockContractWacsiSQLMockRecorder) ErrorResult() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ErrorResult", reflect.TypeOf((*MockContractWacsiSQL)(nil).ErrorResult))
}

// ExecuteDDL mocks base method.
func (m *MockContractWacsiSQL) ExecuteDDL() int32 {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ExecuteDDL")
	ret0, _ := ret[0].(int32)
	return ret0
}

// ExecuteDDL indicates an expected call of ExecuteDDL.
func (mr *MockContractWacsiSQLMockRecorder) ExecuteDDL() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExecuteDDL", reflect.TypeOf((*MockContractWacsiSQL)(nil).ExecuteDDL))
}

// ExecuteQuery mocks base method.
func (m *MockContractWacsiSQL) ExecuteQuery() int32 {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ExecuteQuery")
	ret0, _ := ret[0].(int32)
	return ret0
}

// ExecuteQuery indicates an expected call of ExecuteQuery.
func (mr *MockContractWacsiSQLMockRecorder) ExecuteQuery() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExecuteQuery", reflect.TypeOf((*MockContractWacsiSQL)(nil).ExecuteQuery))
}

// ExecuteQueryOne mocks base method.
func (m *MockContractWacsiSQL) ExecuteQueryOne() int32 {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ExecuteQueryOne")
	ret0, _ := ret[0].(int32)
	return ret0
}

// ExecuteQueryOne indicates an expected call of ExecuteQueryOne.
func (mr *MockContractWacsiSQLMockRecorder) ExecuteQueryOne() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExecuteQueryOne", reflect.TypeOf((*MockContractWacsiSQL)(nil).ExecuteQueryOne))
}

// ExecuteUpdate mocks base method.
func (m *MockContractWacsiSQL) ExecuteUpdate() int32 {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ExecuteUpdate")
	ret0, _ := ret[0].(int32)
	return ret0
}

// ExecuteUpdate indicates an expected call of ExecuteUpdate.
func (mr *MockContractWacsiSQLMockRecorder) ExecuteUpdate() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExecuteUpdate", reflect.TypeOf((*MockContractWacsiSQL)(nil).ExecuteUpdate))
}

// LogMessage mocks base method.
func (m *MockContractWacsiSQL) LogMessage() int32 {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LogMessage")
	ret0, _ := ret[0].(int32)
	return ret0
}

// LogMessage indicates an expected call of LogMessage.
func (mr *MockContractWacsiSQLMockRecorder) LogMessage() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LogMessage", reflect.TypeOf((*MockContractWacsiSQL)(nil).LogMessage))
}

// RSClose mocks base method.
func (m *MockContractWacsiSQL) RSClose() int32 {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RSClose")
	ret0, _ := ret[0].(int32)
	return ret0
}

// RSClose indicates an expected call of RSClose.
func (mr *MockContractWacsiSQLMockRecorder) RSClose() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RSClose", reflect.TypeOf((*MockContractWacsiSQL)(nil).RSClose))
}

// RSHasNext mocks base method.
func (m *MockContractWacsiSQL) RSHasNext() int32 {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RSHasNext")
	ret0, _ := ret[0].(int32)
	return ret0
}

// RSHasNext indicates an expected call of RSHasNext.
func (mr *MockContractWacsiSQLMockRecorder) RSHasNext() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RSHasNext", reflect.TypeOf((*MockContractWacsiSQL)(nil).RSHasNext))
}

// RSNext mocks base method.
func (m *MockContractWacsiSQL) RSNext() int32 {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RSNext")
	ret0, _ := ret[0].(int32)
	return ret0
}

// RSNext indicates an expected call of RSNext.
func (mr *MockContractWacsiSQLMockRecorder) RSNext() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RSNext", reflect.TypeOf((*MockContractWacsiSQL)(nil).RSNext))
}

// SuccessResult mocks base method.
func (m *MockContractWacsiSQL) SuccessResult() int32 {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SuccessResult")
	ret0, _ := ret[0].(int32)
	return ret0
}

// SuccessResult indicates an expected call of SuccessResult.
func (mr *MockContractWacsiSQLMockRecorder) SuccessResult() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SuccessResult", reflect.TypeOf((*MockContractWacsiSQL)(nil).SuccessResult))
}

// MockWacsi is a mock of Wacsi interface.
type MockWacsi struct {
	ctrl     *gomock.Controller
	recorder *MockWacsiMockRecorder
}

// MockWacsiMockRecorder is the mock recorder for MockWacsi.
type MockWacsiMockRecorder struct {
	mock *MockWacsi
}

// NewMockWacsi creates a new mock instance.
func NewMockWacsi(ctrl *gomock.Controller) *MockWacsi {
	mock := &MockWacsi{ctrl: ctrl}
	mock.recorder = &MockWacsiMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockWacsi) EXPECT() *MockWacsiMockRecorder {
	return m.recorder
}

// BulletProofsOperation mocks base method.
func (m *MockWacsi) BulletProofsOperation(requestBody, memory, data []byte, isLen bool) ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BulletProofsOperation", requestBody, memory, data, isLen)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BulletProofsOperation indicates an expected call of BulletProofsOperation.
func (mr *MockWacsiMockRecorder) BulletProofsOperation(requestBody, memory, data, isLen interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BulletProofsOperation", reflect.TypeOf((*MockWacsi)(nil).BulletProofsOperation), requestBody, memory, data, isLen)
}

// CallContract mocks base method.
func (m *MockWacsi) CallContract(caller *common.Contract, requestBody []byte, txSimContext protocol.TxSimContext, memory, data []byte, gasUsed uint64, isLen bool) (*common.ContractResult, uint64, protocol.ExecOrderTxType, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CallContract", caller, requestBody, txSimContext, memory, data, gasUsed, isLen)
	ret0, _ := ret[0].(*common.ContractResult)
	ret1, _ := ret[1].(uint64)
	ret2, _ := ret[2].(protocol.ExecOrderTxType)
	ret3, _ := ret[3].(error)
	return ret0, ret1, ret2, ret3
}

// CallContract indicates an expected call of CallContract.
func (mr *MockWacsiMockRecorder) CallContract(caller, requestBody, txSimContext, memory, data, gasUsed, isLen interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CallContract", reflect.TypeOf((*MockWacsi)(nil).CallContract), caller, requestBody, txSimContext, memory, data, gasUsed, isLen)
}

// DeleteState mocks base method.
func (m *MockWacsi) DeleteState(requestBody []byte, contractName string, txSimContext protocol.TxSimContext) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteState", requestBody, contractName, txSimContext)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteState indicates an expected call of DeleteState.
func (mr *MockWacsiMockRecorder) DeleteState(requestBody, contractName, txSimContext interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteState", reflect.TypeOf((*MockWacsi)(nil).DeleteState), requestBody, contractName, txSimContext)
}

// EmitEvent mocks base method.
func (m *MockWacsi) EmitEvent(requestBody []byte, txSimContext protocol.TxSimContext, contractId *common.Contract, log protocol.Logger) (*common.ContractEvent, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EmitEvent", requestBody, txSimContext, contractId, log)
	ret0, _ := ret[0].(*common.ContractEvent)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// EmitEvent indicates an expected call of EmitEvent.
func (mr *MockWacsiMockRecorder) EmitEvent(requestBody, txSimContext, contractId, log interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EmitEvent", reflect.TypeOf((*MockWacsi)(nil).EmitEvent), requestBody, txSimContext, contractId, log)
}

// ErrorResult mocks base method.
func (m *MockWacsi) ErrorResult(contractResult *common.ContractResult, data []byte) int32 {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ErrorResult", contractResult, data)
	ret0, _ := ret[0].(int32)
	return ret0
}

// ErrorResult indicates an expected call of ErrorResult.
func (mr *MockWacsiMockRecorder) ErrorResult(contractResult, data interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ErrorResult", reflect.TypeOf((*MockWacsi)(nil).ErrorResult), contractResult, data)
}

// ExecuteDDL mocks base method.
func (m *MockWacsi) ExecuteDDL(requestBody []byte, contractName string, txSimContext protocol.TxSimContext, memory []byte, method string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ExecuteDDL", requestBody, contractName, txSimContext, memory, method)
	ret0, _ := ret[0].(error)
	return ret0
}

// ExecuteDDL indicates an expected call of ExecuteDDL.
func (mr *MockWacsiMockRecorder) ExecuteDDL(requestBody, contractName, txSimContext, memory, method interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExecuteDDL", reflect.TypeOf((*MockWacsi)(nil).ExecuteDDL), requestBody, contractName, txSimContext, memory, method)
}

// ExecuteQuery mocks base method.
func (m *MockWacsi) ExecuteQuery(requestBody []byte, contractName string, txSimContext protocol.TxSimContext, memory []byte, chainId string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ExecuteQuery", requestBody, contractName, txSimContext, memory, chainId)
	ret0, _ := ret[0].(error)
	return ret0
}

// ExecuteQuery indicates an expected call of ExecuteQuery.
func (mr *MockWacsiMockRecorder) ExecuteQuery(requestBody, contractName, txSimContext, memory, chainId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExecuteQuery", reflect.TypeOf((*MockWacsi)(nil).ExecuteQuery), requestBody, contractName, txSimContext, memory, chainId)
}

// ExecuteQueryOne mocks base method.
func (m *MockWacsi) ExecuteQueryOne(requestBody []byte, contractName string, txSimContext protocol.TxSimContext, memory, data []byte, chainId string, isLen bool) ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ExecuteQueryOne", requestBody, contractName, txSimContext, memory, data, chainId, isLen)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ExecuteQueryOne indicates an expected call of ExecuteQueryOne.
func (mr *MockWacsiMockRecorder) ExecuteQueryOne(requestBody, contractName, txSimContext, memory, data, chainId, isLen interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExecuteQueryOne", reflect.TypeOf((*MockWacsi)(nil).ExecuteQueryOne), requestBody, contractName, txSimContext, memory, data, chainId, isLen)
}

// ExecuteUpdate mocks base method.
func (m *MockWacsi) ExecuteUpdate(requestBody []byte, contractName, method string, txSimContext protocol.TxSimContext, memory []byte, chainId string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ExecuteUpdate", requestBody, contractName, method, txSimContext, memory, chainId)
	ret0, _ := ret[0].(error)
	return ret0
}

// ExecuteUpdate indicates an expected call of ExecuteUpdate.
func (mr *MockWacsiMockRecorder) ExecuteUpdate(requestBody, contractName, method, txSimContext, memory, chainId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExecuteUpdate", reflect.TypeOf((*MockWacsi)(nil).ExecuteUpdate), requestBody, contractName, method, txSimContext, memory, chainId)
}

// GetState mocks base method.
func (m *MockWacsi) GetState(requestBody []byte, contractName string, txSimContext protocol.TxSimContext, memory, data []byte, isLen bool) ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetState", requestBody, contractName, txSimContext, memory, data, isLen)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetState indicates an expected call of GetState.
func (mr *MockWacsiMockRecorder) GetState(requestBody, contractName, txSimContext, memory, data, isLen interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetState", reflect.TypeOf((*MockWacsi)(nil).GetState), requestBody, contractName, txSimContext, memory, data, isLen)
}

// KvIterator mocks base method.
func (m *MockWacsi) KvIterator(requestBody []byte, contractName string, txSimContext protocol.TxSimContext, memory []byte) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "KvIterator", requestBody, contractName, txSimContext, memory)
	ret0, _ := ret[0].(error)
	return ret0
}

// KvIterator indicates an expected call of KvIterator.
func (mr *MockWacsiMockRecorder) KvIterator(requestBody, contractName, txSimContext, memory interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "KvIterator", reflect.TypeOf((*MockWacsi)(nil).KvIterator), requestBody, contractName, txSimContext, memory)
}

// KvIteratorClose mocks base method.
func (m *MockWacsi) KvIteratorClose(requestBody []byte, contractName string, txSimContext protocol.TxSimContext, memory []byte) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "KvIteratorClose", requestBody, contractName, txSimContext, memory)
	ret0, _ := ret[0].(error)
	return ret0
}

// KvIteratorClose indicates an expected call of KvIteratorClose.
func (mr *MockWacsiMockRecorder) KvIteratorClose(requestBody, contractName, txSimContext, memory interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "KvIteratorClose", reflect.TypeOf((*MockWacsi)(nil).KvIteratorClose), requestBody, contractName, txSimContext, memory)
}

// KvIteratorHasNext mocks base method.
func (m *MockWacsi) KvIteratorHasNext(requestBody []byte, txSimContext protocol.TxSimContext, memory []byte) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "KvIteratorHasNext", requestBody, txSimContext, memory)
	ret0, _ := ret[0].(error)
	return ret0
}

// KvIteratorHasNext indicates an expected call of KvIteratorHasNext.
func (mr *MockWacsiMockRecorder) KvIteratorHasNext(requestBody, txSimContext, memory interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "KvIteratorHasNext", reflect.TypeOf((*MockWacsi)(nil).KvIteratorHasNext), requestBody, txSimContext, memory)
}

// KvIteratorNext mocks base method.
func (m *MockWacsi) KvIteratorNext(requestBody []byte, txSimContext protocol.TxSimContext, memory, data []byte, contractName string, isLen bool) ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "KvIteratorNext", requestBody, txSimContext, memory, data, contractName, isLen)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// KvIteratorNext indicates an expected call of KvIteratorNext.
func (mr *MockWacsiMockRecorder) KvIteratorNext(requestBody, txSimContext, memory, data, contractName, isLen interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "KvIteratorNext", reflect.TypeOf((*MockWacsi)(nil).KvIteratorNext), requestBody, txSimContext, memory, data, contractName, isLen)
}

// KvPreIterator mocks base method.
func (m *MockWacsi) KvPreIterator(requestBody []byte, contractName string, txSimContext protocol.TxSimContext, memory []byte) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "KvPreIterator", requestBody, contractName, txSimContext, memory)
	ret0, _ := ret[0].(error)
	return ret0
}

// KvPreIterator indicates an expected call of KvPreIterator.
func (mr *MockWacsiMockRecorder) KvPreIterator(requestBody, contractName, txSimContext, memory interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "KvPreIterator", reflect.TypeOf((*MockWacsi)(nil).KvPreIterator), requestBody, contractName, txSimContext, memory)
}

// PaillierOperation mocks base method.
func (m *MockWacsi) PaillierOperation(requestBody, memory, data []byte, isLen bool) ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PaillierOperation", requestBody, memory, data, isLen)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PaillierOperation indicates an expected call of PaillierOperation.
func (mr *MockWacsiMockRecorder) PaillierOperation(requestBody, memory, data, isLen interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PaillierOperation", reflect.TypeOf((*MockWacsi)(nil).PaillierOperation), requestBody, memory, data, isLen)
}

// PutState mocks base method.
func (m *MockWacsi) PutState(requestBody []byte, contractName string, txSimContext protocol.TxSimContext) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PutState", requestBody, contractName, txSimContext)
	ret0, _ := ret[0].(error)
	return ret0
}

// PutState indicates an expected call of PutState.
func (mr *MockWacsiMockRecorder) PutState(requestBody, contractName, txSimContext interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PutState", reflect.TypeOf((*MockWacsi)(nil).PutState), requestBody, contractName, txSimContext)
}

// RSClose mocks base method.
func (m *MockWacsi) RSClose(requestBody []byte, txSimContext protocol.TxSimContext, memory []byte) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RSClose", requestBody, txSimContext, memory)
	ret0, _ := ret[0].(error)
	return ret0
}

// RSClose indicates an expected call of RSClose.
func (mr *MockWacsiMockRecorder) RSClose(requestBody, txSimContext, memory interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RSClose", reflect.TypeOf((*MockWacsi)(nil).RSClose), requestBody, txSimContext, memory)
}

// RSHasNext mocks base method.
func (m *MockWacsi) RSHasNext(requestBody []byte, txSimContext protocol.TxSimContext, memory []byte) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RSHasNext", requestBody, txSimContext, memory)
	ret0, _ := ret[0].(error)
	return ret0
}

// RSHasNext indicates an expected call of RSHasNext.
func (mr *MockWacsiMockRecorder) RSHasNext(requestBody, txSimContext, memory interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RSHasNext", reflect.TypeOf((*MockWacsi)(nil).RSHasNext), requestBody, txSimContext, memory)
}

// RSNext mocks base method.
func (m *MockWacsi) RSNext(requestBody []byte, txSimContext protocol.TxSimContext, memory, data []byte, isLen bool) ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RSNext", requestBody, txSimContext, memory, data, isLen)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RSNext indicates an expected call of RSNext.
func (mr *MockWacsiMockRecorder) RSNext(requestBody, txSimContext, memory, data, isLen interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RSNext", reflect.TypeOf((*MockWacsi)(nil).RSNext), requestBody, txSimContext, memory, data, isLen)
}

// SuccessResult mocks base method.
func (m *MockWacsi) SuccessResult(contractResult *common.ContractResult, data []byte) int32 {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SuccessResult", contractResult, data)
	ret0, _ := ret[0].(int32)
	return ret0
}

// SuccessResult indicates an expected call of SuccessResult.
func (mr *MockWacsiMockRecorder) SuccessResult(contractResult, data interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SuccessResult", reflect.TypeOf((*MockWacsi)(nil).SuccessResult), contractResult, data)
}

// MockWacsiWithGas is a mock of WacsiWithGas interface.
type MockWacsiWithGas struct {
	ctrl     *gomock.Controller
	recorder *MockWacsiWithGasMockRecorder
}

// MockWacsiWithGasMockRecorder is the mock recorder for MockWacsiWithGas.
type MockWacsiWithGasMockRecorder struct {
	mock *MockWacsiWithGas
}

// NewMockWacsiWithGas creates a new mock instance.
func NewMockWacsiWithGas(ctrl *gomock.Controller) *MockWacsiWithGas {
	mock := &MockWacsiWithGas{ctrl: ctrl}
	mock.recorder = &MockWacsiWithGasMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockWacsiWithGas) EXPECT() *MockWacsiWithGasMockRecorder {
	return m.recorder
}

// BulletProofsOperation mocks base method.
func (m *MockWacsiWithGas) BulletProofsOperation(requestBody []byte, txSimContext protocol.TxSimContext, memory, data []byte, isLen bool) ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BulletProofsOperation", requestBody, txSimContext, memory, data, isLen)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BulletProofsOperation indicates an expected call of BulletProofsOperation.
func (mr *MockWacsiWithGasMockRecorder) BulletProofsOperation(requestBody, txSimContext, memory, data, isLen interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BulletProofsOperation", reflect.TypeOf((*MockWacsiWithGas)(nil).BulletProofsOperation), requestBody, txSimContext, memory, data, isLen)
}

// CallContract mocks base method.
func (m *MockWacsiWithGas) CallContract(caller *common.Contract, requestBody []byte, txSimContext protocol.TxSimContext, memory, data []byte, gasUsed uint64, isLen bool) (*common.ContractResult, uint64, protocol.ExecOrderTxType, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CallContract", caller, requestBody, txSimContext, memory, data, gasUsed, isLen)
	ret0, _ := ret[0].(*common.ContractResult)
	ret1, _ := ret[1].(uint64)
	ret2, _ := ret[2].(protocol.ExecOrderTxType)
	ret3, _ := ret[3].(error)
	return ret0, ret1, ret2, ret3
}

// CallContract indicates an expected call of CallContract.
func (mr *MockWacsiWithGasMockRecorder) CallContract(caller, requestBody, txSimContext, memory, data, gasUsed, isLen interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CallContract", reflect.TypeOf((*MockWacsiWithGas)(nil).CallContract), caller, requestBody, txSimContext, memory, data, gasUsed, isLen)
}

// DeleteState mocks base method.
func (m *MockWacsiWithGas) DeleteState(requestBody []byte, contractName string, txSimContext protocol.TxSimContext) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteState", requestBody, contractName, txSimContext)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteState indicates an expected call of DeleteState.
func (mr *MockWacsiWithGasMockRecorder) DeleteState(requestBody, contractName, txSimContext interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteState", reflect.TypeOf((*MockWacsiWithGas)(nil).DeleteState), requestBody, contractName, txSimContext)
}

// EmitEvent mocks base method.
func (m *MockWacsiWithGas) EmitEvent(requestBody []byte, txSimContext protocol.TxSimContext, contractId *common.Contract, log protocol.Logger) (*common.ContractEvent, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EmitEvent", requestBody, txSimContext, contractId, log)
	ret0, _ := ret[0].(*common.ContractEvent)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// EmitEvent indicates an expected call of EmitEvent.
func (mr *MockWacsiWithGasMockRecorder) EmitEvent(requestBody, txSimContext, contractId, log interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EmitEvent", reflect.TypeOf((*MockWacsiWithGas)(nil).EmitEvent), requestBody, txSimContext, contractId, log)
}

// ErrorResult mocks base method.
func (m *MockWacsiWithGas) ErrorResult(contractResult *common.ContractResult, txSimContext protocol.TxSimContext, data []byte) int32 {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ErrorResult", contractResult, txSimContext, data)
	ret0, _ := ret[0].(int32)
	return ret0
}

// ErrorResult indicates an expected call of ErrorResult.
func (mr *MockWacsiWithGasMockRecorder) ErrorResult(contractResult, txSimContext, data interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ErrorResult", reflect.TypeOf((*MockWacsiWithGas)(nil).ErrorResult), contractResult, txSimContext, data)
}

// ExecuteDDL mocks base method.
func (m *MockWacsiWithGas) ExecuteDDL(requestBody []byte, contractName string, txSimContext protocol.TxSimContext, memory []byte, method string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ExecuteDDL", requestBody, contractName, txSimContext, memory, method)
	ret0, _ := ret[0].(error)
	return ret0
}

// ExecuteDDL indicates an expected call of ExecuteDDL.
func (mr *MockWacsiWithGasMockRecorder) ExecuteDDL(requestBody, contractName, txSimContext, memory, method interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExecuteDDL", reflect.TypeOf((*MockWacsiWithGas)(nil).ExecuteDDL), requestBody, contractName, txSimContext, memory, method)
}

// ExecuteQuery mocks base method.
func (m *MockWacsiWithGas) ExecuteQuery(requestBody []byte, contractName string, txSimContext protocol.TxSimContext, memory []byte, chainId string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ExecuteQuery", requestBody, contractName, txSimContext, memory, chainId)
	ret0, _ := ret[0].(error)
	return ret0
}

// ExecuteQuery indicates an expected call of ExecuteQuery.
func (mr *MockWacsiWithGasMockRecorder) ExecuteQuery(requestBody, contractName, txSimContext, memory, chainId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExecuteQuery", reflect.TypeOf((*MockWacsiWithGas)(nil).ExecuteQuery), requestBody, contractName, txSimContext, memory, chainId)
}

// ExecuteQueryOne mocks base method.
func (m *MockWacsiWithGas) ExecuteQueryOne(requestBody []byte, contractName string, txSimContext protocol.TxSimContext, memory, data []byte, chainId string, isLen bool) ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ExecuteQueryOne", requestBody, contractName, txSimContext, memory, data, chainId, isLen)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ExecuteQueryOne indicates an expected call of ExecuteQueryOne.
func (mr *MockWacsiWithGasMockRecorder) ExecuteQueryOne(requestBody, contractName, txSimContext, memory, data, chainId, isLen interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExecuteQueryOne", reflect.TypeOf((*MockWacsiWithGas)(nil).ExecuteQueryOne), requestBody, contractName, txSimContext, memory, data, chainId, isLen)
}

// ExecuteUpdate mocks base method.
func (m *MockWacsiWithGas) ExecuteUpdate(requestBody []byte, contractName, method string, txSimContext protocol.TxSimContext, memory []byte, chainId string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ExecuteUpdate", requestBody, contractName, method, txSimContext, memory, chainId)
	ret0, _ := ret[0].(error)
	return ret0
}

// ExecuteUpdate indicates an expected call of ExecuteUpdate.
func (mr *MockWacsiWithGasMockRecorder) ExecuteUpdate(requestBody, contractName, method, txSimContext, memory, chainId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExecuteUpdate", reflect.TypeOf((*MockWacsiWithGas)(nil).ExecuteUpdate), requestBody, contractName, method, txSimContext, memory, chainId)
}

// GetState mocks base method.
func (m *MockWacsiWithGas) GetState(requestBody []byte, contractName string, txSimContext protocol.TxSimContext, memory, data []byte, isLen bool) ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetState", requestBody, contractName, txSimContext, memory, data, isLen)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetState indicates an expected call of GetState.
func (mr *MockWacsiWithGasMockRecorder) GetState(requestBody, contractName, txSimContext, memory, data, isLen interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetState", reflect.TypeOf((*MockWacsiWithGas)(nil).GetState), requestBody, contractName, txSimContext, memory, data, isLen)
}

// KvIterator mocks base method.
func (m *MockWacsiWithGas) KvIterator(requestBody []byte, contractName string, txSimContext protocol.TxSimContext, memory []byte) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "KvIterator", requestBody, contractName, txSimContext, memory)
	ret0, _ := ret[0].(error)
	return ret0
}

// KvIterator indicates an expected call of KvIterator.
func (mr *MockWacsiWithGasMockRecorder) KvIterator(requestBody, contractName, txSimContext, memory interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "KvIterator", reflect.TypeOf((*MockWacsiWithGas)(nil).KvIterator), requestBody, contractName, txSimContext, memory)
}

// KvIteratorClose mocks base method.
func (m *MockWacsiWithGas) KvIteratorClose(requestBody []byte, contractName string, txSimContext protocol.TxSimContext, memory []byte) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "KvIteratorClose", requestBody, contractName, txSimContext, memory)
	ret0, _ := ret[0].(error)
	return ret0
}

// KvIteratorClose indicates an expected call of KvIteratorClose.
func (mr *MockWacsiWithGasMockRecorder) KvIteratorClose(requestBody, contractName, txSimContext, memory interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "KvIteratorClose", reflect.TypeOf((*MockWacsiWithGas)(nil).KvIteratorClose), requestBody, contractName, txSimContext, memory)
}

// KvIteratorHasNext mocks base method.
func (m *MockWacsiWithGas) KvIteratorHasNext(requestBody []byte, txSimContext protocol.TxSimContext, memory []byte) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "KvIteratorHasNext", requestBody, txSimContext, memory)
	ret0, _ := ret[0].(error)
	return ret0
}

// KvIteratorHasNext indicates an expected call of KvIteratorHasNext.
func (mr *MockWacsiWithGasMockRecorder) KvIteratorHasNext(requestBody, txSimContext, memory interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "KvIteratorHasNext", reflect.TypeOf((*MockWacsiWithGas)(nil).KvIteratorHasNext), requestBody, txSimContext, memory)
}

// KvIteratorNext mocks base method.
func (m *MockWacsiWithGas) KvIteratorNext(requestBody []byte, txSimContext protocol.TxSimContext, memory, data []byte, contractName string, isLen bool) ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "KvIteratorNext", requestBody, txSimContext, memory, data, contractName, isLen)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// KvIteratorNext indicates an expected call of KvIteratorNext.
func (mr *MockWacsiWithGasMockRecorder) KvIteratorNext(requestBody, txSimContext, memory, data, contractName, isLen interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "KvIteratorNext", reflect.TypeOf((*MockWacsiWithGas)(nil).KvIteratorNext), requestBody, txSimContext, memory, data, contractName, isLen)
}

// KvPreIterator mocks base method.
func (m *MockWacsiWithGas) KvPreIterator(requestBody []byte, contractName string, txSimContext protocol.TxSimContext, memory []byte) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "KvPreIterator", requestBody, contractName, txSimContext, memory)
	ret0, _ := ret[0].(error)
	return ret0
}

// KvPreIterator indicates an expected call of KvPreIterator.
func (mr *MockWacsiWithGasMockRecorder) KvPreIterator(requestBody, contractName, txSimContext, memory interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "KvPreIterator", reflect.TypeOf((*MockWacsiWithGas)(nil).KvPreIterator), requestBody, contractName, txSimContext, memory)
}

// LogMessage mocks base method.
func (m *MockWacsiWithGas) LogMessage(requestBody []byte, txSimContext protocol.TxSimContext) int32 {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LogMessage", requestBody, txSimContext)
	ret0, _ := ret[0].(int32)
	return ret0
}

// LogMessage indicates an expected call of LogMessage.
func (mr *MockWacsiWithGasMockRecorder) LogMessage(requestBody, txSimContext interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LogMessage", reflect.TypeOf((*MockWacsiWithGas)(nil).LogMessage), requestBody, txSimContext)
}

// PaillierOperation mocks base method.
func (m *MockWacsiWithGas) PaillierOperation(requestBody []byte, txSimContext protocol.TxSimContext, memory, data []byte, isLen bool) ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PaillierOperation", requestBody, txSimContext, memory, data, isLen)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PaillierOperation indicates an expected call of PaillierOperation.
func (mr *MockWacsiWithGasMockRecorder) PaillierOperation(requestBody, txSimContext, memory, data, isLen interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PaillierOperation", reflect.TypeOf((*MockWacsiWithGas)(nil).PaillierOperation), requestBody, txSimContext, memory, data, isLen)
}

// PutState mocks base method.
func (m *MockWacsiWithGas) PutState(requestBody []byte, contractName string, txSimContext protocol.TxSimContext) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PutState", requestBody, contractName, txSimContext)
	ret0, _ := ret[0].(error)
	return ret0
}

// PutState indicates an expected call of PutState.
func (mr *MockWacsiWithGasMockRecorder) PutState(requestBody, contractName, txSimContext interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PutState", reflect.TypeOf((*MockWacsiWithGas)(nil).PutState), requestBody, contractName, txSimContext)
}

// RSClose mocks base method.
func (m *MockWacsiWithGas) RSClose(requestBody []byte, txSimContext protocol.TxSimContext, memory []byte) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RSClose", requestBody, txSimContext, memory)
	ret0, _ := ret[0].(error)
	return ret0
}

// RSClose indicates an expected call of RSClose.
func (mr *MockWacsiWithGasMockRecorder) RSClose(requestBody, txSimContext, memory interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RSClose", reflect.TypeOf((*MockWacsiWithGas)(nil).RSClose), requestBody, txSimContext, memory)
}

// RSHasNext mocks base method.
func (m *MockWacsiWithGas) RSHasNext(requestBody []byte, txSimContext protocol.TxSimContext, memory []byte) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RSHasNext", requestBody, txSimContext, memory)
	ret0, _ := ret[0].(error)
	return ret0
}

// RSHasNext indicates an expected call of RSHasNext.
func (mr *MockWacsiWithGasMockRecorder) RSHasNext(requestBody, txSimContext, memory interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RSHasNext", reflect.TypeOf((*MockWacsiWithGas)(nil).RSHasNext), requestBody, txSimContext, memory)
}

// RSNext mocks base method.
func (m *MockWacsiWithGas) RSNext(requestBody []byte, txSimContext protocol.TxSimContext, memory, data []byte, isLen bool) ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RSNext", requestBody, txSimContext, memory, data, isLen)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RSNext indicates an expected call of RSNext.
func (mr *MockWacsiWithGasMockRecorder) RSNext(requestBody, txSimContext, memory, data, isLen interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RSNext", reflect.TypeOf((*MockWacsiWithGas)(nil).RSNext), requestBody, txSimContext, memory, data, isLen)
}

// SuccessResult mocks base method.
func (m *MockWacsiWithGas) SuccessResult(contractResult *common.ContractResult, txSimContext protocol.TxSimContext, data []byte) int32 {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SuccessResult", contractResult, txSimContext, data)
	ret0, _ := ret[0].(int32)
	return ret0
}

// SuccessResult indicates an expected call of SuccessResult.
func (mr *MockWacsiWithGasMockRecorder) SuccessResult(contractResult, txSimContext, data interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SuccessResult", reflect.TypeOf((*MockWacsiWithGas)(nil).SuccessResult), contractResult, txSimContext, data)
}

// MockTxSimContext is a mock of TxSimContext interface.
type MockTxSimContext struct {
	ctrl     *gomock.Controller
	recorder *MockTxSimContextMockRecorder
}

// MockTxSimContextMockRecorder is the mock recorder for MockTxSimContext.
type MockTxSimContextMockRecorder struct {
	mock *MockTxSimContext
}

// NewMockTxSimContext creates a new mock instance.
func NewMockTxSimContext(ctrl *gomock.Controller) *MockTxSimContext {
	mock := &MockTxSimContext{ctrl: ctrl}
	mock.recorder = &MockTxSimContextMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTxSimContext) EXPECT() *MockTxSimContextMockRecorder {
	return m.recorder
}

// CallContract mocks base method.
func (m *MockTxSimContext) CallContract(caller, contract *common.Contract, method string, byteCode []byte, parameter map[string][]byte, gasUsed uint64, refTxType common.TxType) (*common.ContractResult, protocol.ExecOrderTxType, common.TxStatusCode) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CallContract", caller, contract, method, byteCode, parameter, gasUsed, refTxType)
	ret0, _ := ret[0].(*common.ContractResult)
	ret1, _ := ret[1].(protocol.ExecOrderTxType)
	ret2, _ := ret[2].(common.TxStatusCode)
	return ret0, ret1, ret2
}

// CallContract indicates an expected call of CallContract.
func (mr *MockTxSimContextMockRecorder) CallContract(caller, contract, method, byteCode, parameter, gasUsed, refTxType interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CallContract", reflect.TypeOf((*MockTxSimContext)(nil).CallContract), caller, contract, method, byteCode, parameter, gasUsed, refTxType)
}

// Del mocks base method.
func (m *MockTxSimContext) Del(name string, key []byte) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Del", name, key)
	ret0, _ := ret[0].(error)
	return ret0
}

// Del indicates an expected call of Del.
func (mr *MockTxSimContextMockRecorder) Del(name, key interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Del", reflect.TypeOf((*MockTxSimContext)(nil).Del), name, key)
}

// Get mocks base method.
func (m *MockTxSimContext) Get(contractName string, key []byte) ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", contractName, key)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockTxSimContextMockRecorder) Get(contractName, key interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockTxSimContext)(nil).Get), contractName, key)
}

// GetAccessControl mocks base method.
func (m *MockTxSimContext) GetAccessControl() (protocol.AccessControlProvider, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAccessControl")
	ret0, _ := ret[0].(protocol.AccessControlProvider)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAccessControl indicates an expected call of GetAccessControl.
func (mr *MockTxSimContextMockRecorder) GetAccessControl() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAccessControl", reflect.TypeOf((*MockTxSimContext)(nil).GetAccessControl))
}

// GetBlockFingerprint mocks base method.
func (m *MockTxSimContext) GetBlockFingerprint() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBlockFingerprint")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetBlockFingerprint indicates an expected call of GetBlockFingerprint.
func (mr *MockTxSimContextMockRecorder) GetBlockFingerprint() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBlockFingerprint", reflect.TypeOf((*MockTxSimContext)(nil).GetBlockFingerprint))
}

// GetBlockHeight mocks base method.
func (m *MockTxSimContext) GetBlockHeight() uint64 {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBlockHeight")
	ret0, _ := ret[0].(uint64)
	return ret0
}

// GetBlockHeight indicates an expected call of GetBlockHeight.
func (mr *MockTxSimContextMockRecorder) GetBlockHeight() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBlockHeight", reflect.TypeOf((*MockTxSimContext)(nil).GetBlockHeight))
}

// GetBlockProposer mocks base method.
func (m *MockTxSimContext) GetBlockProposer() *accesscontrol.Member {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBlockProposer")
	ret0, _ := ret[0].(*accesscontrol.Member)
	return ret0
}

// GetBlockProposer indicates an expected call of GetBlockProposer.
func (mr *MockTxSimContextMockRecorder) GetBlockProposer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBlockProposer", reflect.TypeOf((*MockTxSimContext)(nil).GetBlockProposer))
}

// GetBlockTimestamp mocks base method.
func (m *MockTxSimContext) GetBlockTimestamp() int64 {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBlockTimestamp")
	ret0, _ := ret[0].(int64)
	return ret0
}

// GetBlockTimestamp indicates an expected call of GetBlockTimestamp.
func (mr *MockTxSimContextMockRecorder) GetBlockTimestamp() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBlockTimestamp", reflect.TypeOf((*MockTxSimContext)(nil).GetBlockTimestamp))
}

// GetBlockVersion mocks base method.
func (m *MockTxSimContext) GetBlockVersion() uint32 {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBlockVersion")
	ret0, _ := ret[0].(uint32)
	return ret0
}

// GetBlockVersion indicates an expected call of GetBlockVersion.
func (mr *MockTxSimContextMockRecorder) GetBlockVersion() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBlockVersion", reflect.TypeOf((*MockTxSimContext)(nil).GetBlockVersion))
}

// GetBlockchainStore mocks base method.
func (m *MockTxSimContext) GetBlockchainStore() protocol.BlockchainStore {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBlockchainStore")
	ret0, _ := ret[0].(protocol.BlockchainStore)
	return ret0
}

// GetBlockchainStore indicates an expected call of GetBlockchainStore.
func (mr *MockTxSimContextMockRecorder) GetBlockchainStore() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBlockchainStore", reflect.TypeOf((*MockTxSimContext)(nil).GetBlockchainStore))
}

// GetChainNodesInfoProvider mocks base method.
func (m *MockTxSimContext) GetChainNodesInfoProvider() (protocol.ChainNodesInfoProvider, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetChainNodesInfoProvider")
	ret0, _ := ret[0].(protocol.ChainNodesInfoProvider)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetChainNodesInfoProvider indicates an expected call of GetChainNodesInfoProvider.
func (mr *MockTxSimContextMockRecorder) GetChainNodesInfoProvider() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetChainNodesInfoProvider", reflect.TypeOf((*MockTxSimContext)(nil).GetChainNodesInfoProvider))
}

// GetContractByName mocks base method.
func (m *MockTxSimContext) GetContractByName(name string) (*common.Contract, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetContractByName", name)
	ret0, _ := ret[0].(*common.Contract)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetContractByName indicates an expected call of GetContractByName.
func (mr *MockTxSimContextMockRecorder) GetContractByName(name interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetContractByName", reflect.TypeOf((*MockTxSimContext)(nil).GetContractByName), name)
}

// GetContractBytecode mocks base method.
func (m *MockTxSimContext) GetContractBytecode(name string) ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetContractBytecode", name)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetContractBytecode indicates an expected call of GetContractBytecode.
func (mr *MockTxSimContextMockRecorder) GetContractBytecode(name interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetContractBytecode", reflect.TypeOf((*MockTxSimContext)(nil).GetContractBytecode), name)
}

// GetCreator mocks base method.
func (m *MockTxSimContext) GetCreator(namespace string) *accesscontrol.Member {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCreator", namespace)
	ret0, _ := ret[0].(*accesscontrol.Member)
	return ret0
}

// GetCreator indicates an expected call of GetCreator.
func (mr *MockTxSimContextMockRecorder) GetCreator(namespace interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCreator", reflect.TypeOf((*MockTxSimContext)(nil).GetCreator), namespace)
}

// GetCrossInfo mocks base method.
func (m *MockTxSimContext) GetCrossInfo() uint64 {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCrossInfo")
	ret0, _ := ret[0].(uint64)
	return ret0
}

// GetCrossInfo indicates an expected call of GetCrossInfo.
func (mr *MockTxSimContextMockRecorder) GetCrossInfo() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCrossInfo", reflect.TypeOf((*MockTxSimContext)(nil).GetCrossInfo))
}

// GetCurrentResult mocks base method.
func (m *MockTxSimContext) GetCurrentResult() []byte {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCurrentResult")
	ret0, _ := ret[0].([]byte)
	return ret0
}

// GetCurrentResult indicates an expected call of GetCurrentResult.
func (mr *MockTxSimContextMockRecorder) GetCurrentResult() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCurrentResult", reflect.TypeOf((*MockTxSimContext)(nil).GetCurrentResult))
}

// GetDepth mocks base method.
func (m *MockTxSimContext) GetDepth() int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDepth")
	ret0, _ := ret[0].(int)
	return ret0
}

// GetDepth indicates an expected call of GetDepth.
func (mr *MockTxSimContextMockRecorder) GetDepth() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDepth", reflect.TypeOf((*MockTxSimContext)(nil).GetDepth))
}

// GetGasRemaining mocks base method.
func (m *MockTxSimContext) GetGasRemaining() uint64 {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetGasRemaining")
	ret0, _ := ret[0].(uint64)
	return ret0
}

// GetGasRemaining indicates an expected call of GetGasRemaining.
func (mr *MockTxSimContextMockRecorder) GetGasRemaining() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetGasRemaining", reflect.TypeOf((*MockTxSimContext)(nil).GetGasRemaining))
}

// GetHistoryIterForKey mocks base method.
func (m *MockTxSimContext) GetHistoryIterForKey(contractName string, key []byte) (protocol.KeyHistoryIterator, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetHistoryIterForKey", contractName, key)
	ret0, _ := ret[0].(protocol.KeyHistoryIterator)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetHistoryIterForKey indicates an expected call of GetHistoryIterForKey.
func (mr *MockTxSimContextMockRecorder) GetHistoryIterForKey(contractName, key interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetHistoryIterForKey", reflect.TypeOf((*MockTxSimContext)(nil).GetHistoryIterForKey), contractName, key)
}

// GetIterHandle mocks base method.
func (m *MockTxSimContext) GetIterHandle(index int32) (interface{}, bool) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetIterHandle", index)
	ret0, _ := ret[0].(interface{})
	ret1, _ := ret[1].(bool)
	return ret0, ret1
}

// GetIterHandle indicates an expected call of GetIterHandle.
func (mr *MockTxSimContextMockRecorder) GetIterHandle(index interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetIterHandle", reflect.TypeOf((*MockTxSimContext)(nil).GetIterHandle), index)
}

// GetKeys mocks base method.
func (m *MockTxSimContext) GetKeys(keys []*vm.BatchKey) ([]*vm.BatchKey, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetKeys", keys)
	ret0, _ := ret[0].([]*vm.BatchKey)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetKeys indicates an expected call of GetKeys.
func (mr *MockTxSimContextMockRecorder) GetKeys(keys interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetKeys", reflect.TypeOf((*MockTxSimContext)(nil).GetKeys), keys)
}

// GetLastChainConfig mocks base method.
func (m *MockTxSimContext) GetLastChainConfig() *config.ChainConfig {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLastChainConfig")
	ret0, _ := ret[0].(*config.ChainConfig)
	return ret0
}

// GetLastChainConfig indicates an expected call of GetLastChainConfig.
func (mr *MockTxSimContextMockRecorder) GetLastChainConfig() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLastChainConfig", reflect.TypeOf((*MockTxSimContext)(nil).GetLastChainConfig))
}

// GetNoRecord mocks base method.
func (m *MockTxSimContext) GetNoRecord(contractName string, key []byte) ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetNoRecord", contractName, key)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetNoRecord indicates an expected call of GetNoRecord.
func (mr *MockTxSimContextMockRecorder) GetNoRecord(contractName, key interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNoRecord", reflect.TypeOf((*MockTxSimContext)(nil).GetNoRecord), contractName, key)
}

// GetSender mocks base method.
func (m *MockTxSimContext) GetSender() *accesscontrol.Member {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSender")
	ret0, _ := ret[0].(*accesscontrol.Member)
	return ret0
}

// GetSender indicates an expected call of GetSender.
func (mr *MockTxSimContextMockRecorder) GetSender() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSender", reflect.TypeOf((*MockTxSimContext)(nil).GetSender))
}

// GetSnapshot mocks base method.
func (m *MockTxSimContext) GetSnapshot() protocol.Snapshot {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSnapshot")
	ret0, _ := ret[0].(protocol.Snapshot)
	return ret0
}

// GetSnapshot indicates an expected call of GetSnapshot.
func (mr *MockTxSimContextMockRecorder) GetSnapshot() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSnapshot", reflect.TypeOf((*MockTxSimContext)(nil).GetSnapshot))
}

// GetStrAddrFromPbMember mocks base method.
func (m *MockTxSimContext) GetStrAddrFromPbMember(pbMember *accesscontrol.Member) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetStrAddrFromPbMember", pbMember)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetStrAddrFromPbMember indicates an expected call of GetStrAddrFromPbMember.
func (mr *MockTxSimContextMockRecorder) GetStrAddrFromPbMember(pbMember interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetStrAddrFromPbMember", reflect.TypeOf((*MockTxSimContext)(nil).GetStrAddrFromPbMember), pbMember)
}

// GetTx mocks base method.
func (m *MockTxSimContext) GetTx() *common.Transaction {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTx")
	ret0, _ := ret[0].(*common.Transaction)
	return ret0
}

// GetTx indicates an expected call of GetTx.
func (mr *MockTxSimContextMockRecorder) GetTx() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTx", reflect.TypeOf((*MockTxSimContext)(nil).GetTx))
}

// GetTxExecSeq mocks base method.
func (m *MockTxSimContext) GetTxExecSeq() int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTxExecSeq")
	ret0, _ := ret[0].(int)
	return ret0
}

// GetTxExecSeq indicates an expected call of GetTxExecSeq.
func (mr *MockTxSimContextMockRecorder) GetTxExecSeq() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTxExecSeq", reflect.TypeOf((*MockTxSimContext)(nil).GetTxExecSeq))
}

// GetTxRWMapByContractName mocks base method.
func (m *MockTxSimContext) GetTxRWMapByContractName(contractName string) (map[string]*common.TxRead, map[string]*common.TxWrite) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTxRWMapByContractName", contractName)
	ret0, _ := ret[0].(map[string]*common.TxRead)
	ret1, _ := ret[1].(map[string]*common.TxWrite)
	return ret0, ret1
}

// GetTxRWMapByContractName indicates an expected call of GetTxRWMapByContractName.
func (mr *MockTxSimContextMockRecorder) GetTxRWMapByContractName(contractName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTxRWMapByContractName", reflect.TypeOf((*MockTxSimContext)(nil).GetTxRWMapByContractName), contractName)
}

// GetTxRWSet mocks base method.
func (m *MockTxSimContext) GetTxRWSet(runVmSuccess bool) *common.TxRWSet {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTxRWSet", runVmSuccess)
	ret0, _ := ret[0].(*common.TxRWSet)
	return ret0
}

// GetTxRWSet indicates an expected call of GetTxRWSet.
func (mr *MockTxSimContextMockRecorder) GetTxRWSet(runVmSuccess interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTxRWSet", reflect.TypeOf((*MockTxSimContext)(nil).GetTxRWSet), runVmSuccess)
}

// GetTxResult mocks base method.
func (m *MockTxSimContext) GetTxResult() *common.Result {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTxResult")
	ret0, _ := ret[0].(*common.Result)
	return ret0
}

// GetTxResult indicates an expected call of GetTxResult.
func (mr *MockTxSimContextMockRecorder) GetTxResult() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTxResult", reflect.TypeOf((*MockTxSimContext)(nil).GetTxResult))
}

// HasUsed mocks base method.
func (m *MockTxSimContext) HasUsed(runtimeType common.RuntimeType) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HasUsed", runtimeType)
	ret0, _ := ret[0].(bool)
	return ret0
}

// HasUsed indicates an expected call of HasUsed.
func (mr *MockTxSimContextMockRecorder) HasUsed(runtimeType interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HasUsed", reflect.TypeOf((*MockTxSimContext)(nil).HasUsed), runtimeType)
}

// Put mocks base method.
func (m *MockTxSimContext) Put(name string, key, value []byte) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Put", name, key, value)
	ret0, _ := ret[0].(error)
	return ret0
}

// Put indicates an expected call of Put.
func (mr *MockTxSimContextMockRecorder) Put(name, key, value interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Put", reflect.TypeOf((*MockTxSimContext)(nil).Put), name, key, value)
}

// PutIntoReadSet mocks base method.
func (m *MockTxSimContext) PutIntoReadSet(contractName string, key, value []byte) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "PutIntoReadSet", contractName, key, value)
}

// PutIntoReadSet indicates an expected call of PutIntoReadSet.
func (mr *MockTxSimContextMockRecorder) PutIntoReadSet(contractName, key, value interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PutIntoReadSet", reflect.TypeOf((*MockTxSimContext)(nil).PutIntoReadSet), contractName, key, value)
}

// PutRecord mocks base method.
func (m *MockTxSimContext) PutRecord(contractName string, value []byte, sqlType protocol.SqlType) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "PutRecord", contractName, value, sqlType)
}

// PutRecord indicates an expected call of PutRecord.
func (mr *MockTxSimContextMockRecorder) PutRecord(contractName, value, sqlType interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PutRecord", reflect.TypeOf((*MockTxSimContext)(nil).PutRecord), contractName, value, sqlType)
}

// RecordRuntimeTypeIntoCrossInfo mocks base method.
func (m *MockTxSimContext) RecordRuntimeTypeIntoCrossInfo(runtimeType common.RuntimeType) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "RecordRuntimeTypeIntoCrossInfo", runtimeType)
}

// RecordRuntimeTypeIntoCrossInfo indicates an expected call of RecordRuntimeTypeIntoCrossInfo.
func (mr *MockTxSimContextMockRecorder) RecordRuntimeTypeIntoCrossInfo(runtimeType interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RecordRuntimeTypeIntoCrossInfo", reflect.TypeOf((*MockTxSimContext)(nil).RecordRuntimeTypeIntoCrossInfo), runtimeType)
}

// RemoveRuntimeTypeFromCrossInfo mocks base method.
func (m *MockTxSimContext) RemoveRuntimeTypeFromCrossInfo() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "RemoveRuntimeTypeFromCrossInfo")
}

// RemoveRuntimeTypeFromCrossInfo indicates an expected call of RemoveRuntimeTypeFromCrossInfo.
func (mr *MockTxSimContextMockRecorder) RemoveRuntimeTypeFromCrossInfo() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveRuntimeTypeFromCrossInfo", reflect.TypeOf((*MockTxSimContext)(nil).RemoveRuntimeTypeFromCrossInfo))
}

// Select mocks base method.
func (m *MockTxSimContext) Select(name string, startKey, limit []byte) (protocol.StateIterator, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Select", name, startKey, limit)
	ret0, _ := ret[0].(protocol.StateIterator)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Select indicates an expected call of Select.
func (mr *MockTxSimContextMockRecorder) Select(name, startKey, limit interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Select", reflect.TypeOf((*MockTxSimContext)(nil).Select), name, startKey, limit)
}

// SetIterHandle mocks base method.
func (m *MockTxSimContext) SetIterHandle(index int32, iter interface{}) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetIterHandle", index, iter)
}

// SetIterHandle indicates an expected call of SetIterHandle.
func (mr *MockTxSimContextMockRecorder) SetIterHandle(index, iter interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetIterHandle", reflect.TypeOf((*MockTxSimContext)(nil).SetIterHandle), index, iter)
}

// SetTxExecSeq mocks base method.
func (m *MockTxSimContext) SetTxExecSeq(arg0 int) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetTxExecSeq", arg0)
}

// SetTxExecSeq indicates an expected call of SetTxExecSeq.
func (mr *MockTxSimContextMockRecorder) SetTxExecSeq(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetTxExecSeq", reflect.TypeOf((*MockTxSimContext)(nil).SetTxExecSeq), arg0)
}

// SetTxResult mocks base method.
func (m *MockTxSimContext) SetTxResult(arg0 *common.Result) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetTxResult", arg0)
}

// SetTxResult indicates an expected call of SetTxResult.
func (mr *MockTxSimContextMockRecorder) SetTxResult(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetTxResult", reflect.TypeOf((*MockTxSimContext)(nil).SetTxResult), arg0)
}

// SubtractGas mocks base method.
func (m *MockTxSimContext) SubtractGas(gasUsed uint64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SubtractGas", gasUsed)
	ret0, _ := ret[0].(error)
	return ret0
}

// SubtractGas indicates an expected call of SubtractGas.
func (mr *MockTxSimContextMockRecorder) SubtractGas(gasUsed interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SubtractGas", reflect.TypeOf((*MockTxSimContext)(nil).SubtractGas), gasUsed)
}
