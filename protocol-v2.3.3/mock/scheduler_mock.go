// Code generated by MockGen. DO NOT EDIT.
// Source: scheduler_interface.go

// Package mock is a generated GoMock package.
package mock

import (
	reflect "reflect"

	common "zhanghefan123/security/protobuf/pb-go/common"
	protocol "zhanghefan123/security/protocol"
	gomock "github.com/golang/mock/gomock"
)

// MockTxScheduler is a mock of TxScheduler interface.
type MockTxScheduler struct {
	ctrl     *gomock.Controller
	recorder *MockTxSchedulerMockRecorder
}

// MockTxSchedulerMockRecorder is the mock recorder for MockTxScheduler.
type MockTxSchedulerMockRecorder struct {
	mock *MockTxScheduler
}

// NewMockTxScheduler creates a new mock instance.
func NewMockTxScheduler(ctrl *gomock.Controller) *MockTxScheduler {
	mock := &MockTxScheduler{ctrl: ctrl}
	mock.recorder = &MockTxSchedulerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTxScheduler) EXPECT() *MockTxSchedulerMockRecorder {
	return m.recorder
}

// Halt mocks base method.
func (m *MockTxScheduler) Halt() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Halt")
}

// Halt indicates an expected call of Halt.
func (mr *MockTxSchedulerMockRecorder) Halt() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Halt", reflect.TypeOf((*MockTxScheduler)(nil).Halt))
}

// Schedule mocks base method.
func (m *MockTxScheduler) Schedule(block *common.Block, txBatch []*common.Transaction, snapshot protocol.Snapshot) (map[string]*common.TxRWSet, map[string][]*common.ContractEvent, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Schedule", block, txBatch, snapshot)
	ret0, _ := ret[0].(map[string]*common.TxRWSet)
	ret1, _ := ret[1].(map[string][]*common.ContractEvent)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// Schedule indicates an expected call of Schedule.
func (mr *MockTxSchedulerMockRecorder) Schedule(block, txBatch, snapshot interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Schedule", reflect.TypeOf((*MockTxScheduler)(nil).Schedule), block, txBatch, snapshot)
}

// SimulateWithDag mocks base method.
func (m *MockTxScheduler) SimulateWithDag(block *common.Block, snapshot protocol.Snapshot) (map[string]*common.TxRWSet, map[string]*common.Result, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SimulateWithDag", block, snapshot)
	ret0, _ := ret[0].(map[string]*common.TxRWSet)
	ret1, _ := ret[1].(map[string]*common.Result)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// SimulateWithDag indicates an expected call of SimulateWithDag.
func (mr *MockTxSchedulerMockRecorder) SimulateWithDag(block, snapshot interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SimulateWithDag", reflect.TypeOf((*MockTxScheduler)(nil).SimulateWithDag), block, snapshot)
}
