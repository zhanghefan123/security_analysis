// Code generated by MockGen. DO NOT EDIT.
// Source: access_control_interface.go

// Package mock is a generated GoMock package.
package mock

import (
	reflect "reflect"

	crypto "zhanghefan123/security/common/crypto"
	accesscontrol "zhanghefan123/security/protobuf/pb-go/accesscontrol"
	common "zhanghefan123/security/protobuf/pb-go/common"
	config "zhanghefan123/security/protobuf/pb-go/config"
	protocol "zhanghefan123/security/protocol"
	gomock "github.com/golang/mock/gomock"
)

// MockPrincipal is a mock of Principal interface.
type MockPrincipal struct {
	ctrl     *gomock.Controller
	recorder *MockPrincipalMockRecorder
}

// MockPrincipalMockRecorder is the mock recorder for MockPrincipal.
type MockPrincipalMockRecorder struct {
	mock *MockPrincipal
}

// NewMockPrincipal creates a new mock instance.
func NewMockPrincipal(ctrl *gomock.Controller) *MockPrincipal {
	mock := &MockPrincipal{ctrl: ctrl}
	mock.recorder = &MockPrincipalMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPrincipal) EXPECT() *MockPrincipalMockRecorder {
	return m.recorder
}

// GetEndorsement mocks base method.
func (m *MockPrincipal) GetEndorsement() []*common.EndorsementEntry {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetEndorsement")
	ret0, _ := ret[0].([]*common.EndorsementEntry)
	return ret0
}

// GetEndorsement indicates an expected call of GetEndorsement.
func (mr *MockPrincipalMockRecorder) GetEndorsement() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEndorsement", reflect.TypeOf((*MockPrincipal)(nil).GetEndorsement))
}

// GetMessage mocks base method.
func (m *MockPrincipal) GetMessage() []byte {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMessage")
	ret0, _ := ret[0].([]byte)
	return ret0
}

// GetMessage indicates an expected call of GetMessage.
func (mr *MockPrincipalMockRecorder) GetMessage() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMessage", reflect.TypeOf((*MockPrincipal)(nil).GetMessage))
}

// GetResourceName mocks base method.
func (m *MockPrincipal) GetResourceName() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetResourceName")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetResourceName indicates an expected call of GetResourceName.
func (mr *MockPrincipalMockRecorder) GetResourceName() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetResourceName", reflect.TypeOf((*MockPrincipal)(nil).GetResourceName))
}

// GetTargetOrgId mocks base method.
func (m *MockPrincipal) GetTargetOrgId() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTargetOrgId")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetTargetOrgId indicates an expected call of GetTargetOrgId.
func (mr *MockPrincipalMockRecorder) GetTargetOrgId() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTargetOrgId", reflect.TypeOf((*MockPrincipal)(nil).GetTargetOrgId))
}

// MockAccessControlProvider is a mock of AccessControlProvider interface.
type MockAccessControlProvider struct {
	ctrl     *gomock.Controller
	recorder *MockAccessControlProviderMockRecorder
}

// MockAccessControlProviderMockRecorder is the mock recorder for MockAccessControlProvider.
type MockAccessControlProviderMockRecorder struct {
	mock *MockAccessControlProvider
}

// NewMockAccessControlProvider creates a new mock instance.
func NewMockAccessControlProvider(ctrl *gomock.Controller) *MockAccessControlProvider {
	mock := &MockAccessControlProvider{ctrl: ctrl}
	mock.recorder = &MockAccessControlProviderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAccessControlProvider) EXPECT() *MockAccessControlProviderMockRecorder {
	return m.recorder
}

// CreatePrincipal mocks base method.
func (m *MockAccessControlProvider) CreatePrincipal(resourceName string, endorsements []*common.EndorsementEntry, message []byte) (protocol.Principal, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreatePrincipal", resourceName, endorsements, message)
	ret0, _ := ret[0].(protocol.Principal)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreatePrincipal indicates an expected call of CreatePrincipal.
func (mr *MockAccessControlProviderMockRecorder) CreatePrincipal(resourceName, endorsements, message interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreatePrincipal", reflect.TypeOf((*MockAccessControlProvider)(nil).CreatePrincipal), resourceName, endorsements, message)
}

// CreatePrincipalForTargetOrg mocks base method.
func (m *MockAccessControlProvider) CreatePrincipalForTargetOrg(resourceName string, endorsements []*common.EndorsementEntry, message []byte, targetOrgId string) (protocol.Principal, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreatePrincipalForTargetOrg", resourceName, endorsements, message, targetOrgId)
	ret0, _ := ret[0].(protocol.Principal)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreatePrincipalForTargetOrg indicates an expected call of CreatePrincipalForTargetOrg.
func (mr *MockAccessControlProviderMockRecorder) CreatePrincipalForTargetOrg(resourceName, endorsements, message, targetOrgId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreatePrincipalForTargetOrg", reflect.TypeOf((*MockAccessControlProvider)(nil).CreatePrincipalForTargetOrg), resourceName, endorsements, message, targetOrgId)
}

// GetAllPolicy mocks base method.
func (m *MockAccessControlProvider) GetAllPolicy() (map[string]*accesscontrol.Policy, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllPolicy")
	ret0, _ := ret[0].(map[string]*accesscontrol.Policy)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllPolicy indicates an expected call of GetAllPolicy.
func (mr *MockAccessControlProviderMockRecorder) GetAllPolicy() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllPolicy", reflect.TypeOf((*MockAccessControlProvider)(nil).GetAllPolicy))
}

// GetHashAlg mocks base method.
func (m *MockAccessControlProvider) GetHashAlg() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetHashAlg")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetHashAlg indicates an expected call of GetHashAlg.
func (mr *MockAccessControlProviderMockRecorder) GetHashAlg() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetHashAlg", reflect.TypeOf((*MockAccessControlProvider)(nil).GetHashAlg))
}

// GetMemberStatus mocks base method.
func (m *MockAccessControlProvider) GetMemberStatus(member *accesscontrol.Member) (accesscontrol.MemberStatus, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMemberStatus", member)
	ret0, _ := ret[0].(accesscontrol.MemberStatus)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMemberStatus indicates an expected call of GetMemberStatus.
func (mr *MockAccessControlProviderMockRecorder) GetMemberStatus(member interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMemberStatus", reflect.TypeOf((*MockAccessControlProvider)(nil).GetMemberStatus), member)
}

// GetValidEndorsements mocks base method.
func (m *MockAccessControlProvider) GetValidEndorsements(principal protocol.Principal) ([]*common.EndorsementEntry, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetValidEndorsements", principal)
	ret0, _ := ret[0].([]*common.EndorsementEntry)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetValidEndorsements indicates an expected call of GetValidEndorsements.
func (mr *MockAccessControlProviderMockRecorder) GetValidEndorsements(principal interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetValidEndorsements", reflect.TypeOf((*MockAccessControlProvider)(nil).GetValidEndorsements), principal)
}

// LookUpExceptionalPolicy mocks base method.
func (m *MockAccessControlProvider) LookUpExceptionalPolicy(resourceName string) (*accesscontrol.Policy, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LookUpExceptionalPolicy", resourceName)
	ret0, _ := ret[0].(*accesscontrol.Policy)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// LookUpExceptionalPolicy indicates an expected call of LookUpExceptionalPolicy.
func (mr *MockAccessControlProviderMockRecorder) LookUpExceptionalPolicy(resourceName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LookUpExceptionalPolicy", reflect.TypeOf((*MockAccessControlProvider)(nil).LookUpExceptionalPolicy), resourceName)
}

// LookUpPolicy mocks base method.
func (m *MockAccessControlProvider) LookUpPolicy(resourceName string) (*accesscontrol.Policy, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LookUpPolicy", resourceName)
	ret0, _ := ret[0].(*accesscontrol.Policy)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// LookUpPolicy indicates an expected call of LookUpPolicy.
func (mr *MockAccessControlProviderMockRecorder) LookUpPolicy(resourceName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LookUpPolicy", reflect.TypeOf((*MockAccessControlProvider)(nil).LookUpPolicy), resourceName)
}

// NewMember mocks base method.
func (m *MockAccessControlProvider) NewMember(member *accesscontrol.Member) (protocol.Member, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NewMember", member)
	ret0, _ := ret[0].(protocol.Member)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// NewMember indicates an expected call of NewMember.
func (mr *MockAccessControlProviderMockRecorder) NewMember(member interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewMember", reflect.TypeOf((*MockAccessControlProvider)(nil).NewMember), member)
}

// RefineEndorsements mocks base method.
func (m *MockAccessControlProvider) RefineEndorsements(endorsements []*common.EndorsementEntry, msg []byte) []*common.EndorsementEntry {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RefineEndorsements", endorsements, msg)
	ret0, _ := ret[0].([]*common.EndorsementEntry)
	return ret0
}

// RefineEndorsements indicates an expected call of RefineEndorsements.
func (mr *MockAccessControlProviderMockRecorder) RefineEndorsements(endorsements, msg interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RefineEndorsements", reflect.TypeOf((*MockAccessControlProvider)(nil).RefineEndorsements), endorsements, msg)
}

// ValidateResourcePolicy mocks base method.
func (m *MockAccessControlProvider) ValidateResourcePolicy(resourcePolicy *config.ResourcePolicy) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ValidateResourcePolicy", resourcePolicy)
	ret0, _ := ret[0].(bool)
	return ret0
}

// ValidateResourcePolicy indicates an expected call of ValidateResourcePolicy.
func (mr *MockAccessControlProviderMockRecorder) ValidateResourcePolicy(resourcePolicy interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ValidateResourcePolicy", reflect.TypeOf((*MockAccessControlProvider)(nil).ValidateResourcePolicy), resourcePolicy)
}

// VerifyPrincipal mocks base method.
func (m *MockAccessControlProvider) VerifyPrincipal(principal protocol.Principal) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "VerifyPrincipal", principal)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// VerifyPrincipal indicates an expected call of VerifyPrincipal.
func (mr *MockAccessControlProviderMockRecorder) VerifyPrincipal(principal interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VerifyPrincipal", reflect.TypeOf((*MockAccessControlProvider)(nil).VerifyPrincipal), principal)
}

// VerifyRelatedMaterial mocks base method.
func (m *MockAccessControlProvider) VerifyRelatedMaterial(verifyType accesscontrol.VerifyType, data []byte) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "VerifyRelatedMaterial", verifyType, data)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// VerifyRelatedMaterial indicates an expected call of VerifyRelatedMaterial.
func (mr *MockAccessControlProviderMockRecorder) VerifyRelatedMaterial(verifyType, data interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VerifyRelatedMaterial", reflect.TypeOf((*MockAccessControlProvider)(nil).VerifyRelatedMaterial), verifyType, data)
}

// MockMember is a mock of Member interface.
type MockMember struct {
	ctrl     *gomock.Controller
	recorder *MockMemberMockRecorder
}

// MockMemberMockRecorder is the mock recorder for MockMember.
type MockMemberMockRecorder struct {
	mock *MockMember
}

// NewMockMember creates a new mock instance.
func NewMockMember(ctrl *gomock.Controller) *MockMember {
	mock := &MockMember{ctrl: ctrl}
	mock.recorder = &MockMemberMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMember) EXPECT() *MockMemberMockRecorder {
	return m.recorder
}

// GetMember mocks base method.
func (m *MockMember) GetMember() (*accesscontrol.Member, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMember")
	ret0, _ := ret[0].(*accesscontrol.Member)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMember indicates an expected call of GetMember.
func (mr *MockMemberMockRecorder) GetMember() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMember", reflect.TypeOf((*MockMember)(nil).GetMember))
}

// GetMemberId mocks base method.
func (m *MockMember) GetMemberId() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMemberId")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetMemberId indicates an expected call of GetMemberId.
func (mr *MockMemberMockRecorder) GetMemberId() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMemberId", reflect.TypeOf((*MockMember)(nil).GetMemberId))
}

// GetOrgId mocks base method.
func (m *MockMember) GetOrgId() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOrgId")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetOrgId indicates an expected call of GetOrgId.
func (mr *MockMemberMockRecorder) GetOrgId() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOrgId", reflect.TypeOf((*MockMember)(nil).GetOrgId))
}

// GetPk mocks base method.
func (m *MockMember) GetPk() crypto.PublicKey {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPk")
	ret0, _ := ret[0].(crypto.PublicKey)
	return ret0
}

// GetPk indicates an expected call of GetPk.
func (mr *MockMemberMockRecorder) GetPk() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPk", reflect.TypeOf((*MockMember)(nil).GetPk))
}

// GetRole mocks base method.
func (m *MockMember) GetRole() protocol.Role {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRole")
	ret0, _ := ret[0].(protocol.Role)
	return ret0
}

// GetRole indicates an expected call of GetRole.
func (mr *MockMemberMockRecorder) GetRole() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRole", reflect.TypeOf((*MockMember)(nil).GetRole))
}

// GetUid mocks base method.
func (m *MockMember) GetUid() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUid")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetUid indicates an expected call of GetUid.
func (mr *MockMemberMockRecorder) GetUid() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUid", reflect.TypeOf((*MockMember)(nil).GetUid))
}

// Verify mocks base method.
func (m *MockMember) Verify(hashType string, msg, sig []byte) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Verify", hashType, msg, sig)
	ret0, _ := ret[0].(error)
	return ret0
}

// Verify indicates an expected call of Verify.
func (mr *MockMemberMockRecorder) Verify(hashType, msg, sig interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Verify", reflect.TypeOf((*MockMember)(nil).Verify), hashType, msg, sig)
}

// MockSigningMember is a mock of SigningMember interface.
type MockSigningMember struct {
	ctrl     *gomock.Controller
	recorder *MockSigningMemberMockRecorder
}

// MockSigningMemberMockRecorder is the mock recorder for MockSigningMember.
type MockSigningMemberMockRecorder struct {
	mock *MockSigningMember
}

// NewMockSigningMember creates a new mock instance.
func NewMockSigningMember(ctrl *gomock.Controller) *MockSigningMember {
	mock := &MockSigningMember{ctrl: ctrl}
	mock.recorder = &MockSigningMemberMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSigningMember) EXPECT() *MockSigningMemberMockRecorder {
	return m.recorder
}

// GetMember mocks base method.
func (m *MockSigningMember) GetMember() (*accesscontrol.Member, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMember")
	ret0, _ := ret[0].(*accesscontrol.Member)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMember indicates an expected call of GetMember.
func (mr *MockSigningMemberMockRecorder) GetMember() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMember", reflect.TypeOf((*MockSigningMember)(nil).GetMember))
}

// GetMemberId mocks base method.
func (m *MockSigningMember) GetMemberId() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMemberId")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetMemberId indicates an expected call of GetMemberId.
func (mr *MockSigningMemberMockRecorder) GetMemberId() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMemberId", reflect.TypeOf((*MockSigningMember)(nil).GetMemberId))
}

// GetOrgId mocks base method.
func (m *MockSigningMember) GetOrgId() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOrgId")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetOrgId indicates an expected call of GetOrgId.
func (mr *MockSigningMemberMockRecorder) GetOrgId() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOrgId", reflect.TypeOf((*MockSigningMember)(nil).GetOrgId))
}

// GetPk mocks base method.
func (m *MockSigningMember) GetPk() crypto.PublicKey {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPk")
	ret0, _ := ret[0].(crypto.PublicKey)
	return ret0
}

// GetPk indicates an expected call of GetPk.
func (mr *MockSigningMemberMockRecorder) GetPk() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPk", reflect.TypeOf((*MockSigningMember)(nil).GetPk))
}

// GetRole mocks base method.
func (m *MockSigningMember) GetRole() protocol.Role {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRole")
	ret0, _ := ret[0].(protocol.Role)
	return ret0
}

// GetRole indicates an expected call of GetRole.
func (mr *MockSigningMemberMockRecorder) GetRole() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRole", reflect.TypeOf((*MockSigningMember)(nil).GetRole))
}

// GetUid mocks base method.
func (m *MockSigningMember) GetUid() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUid")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetUid indicates an expected call of GetUid.
func (mr *MockSigningMemberMockRecorder) GetUid() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUid", reflect.TypeOf((*MockSigningMember)(nil).GetUid))
}

// Sign mocks base method.
func (m *MockSigningMember) Sign(hashType string, msg []byte) ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Sign", hashType, msg)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Sign indicates an expected call of Sign.
func (mr *MockSigningMemberMockRecorder) Sign(hashType, msg interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Sign", reflect.TypeOf((*MockSigningMember)(nil).Sign), hashType, msg)
}

// Verify mocks base method.
func (m *MockSigningMember) Verify(hashType string, msg, sig []byte) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Verify", hashType, msg, sig)
	ret0, _ := ret[0].(error)
	return ret0
}

// Verify indicates an expected call of Verify.
func (mr *MockSigningMemberMockRecorder) Verify(hashType, msg, sig interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Verify", reflect.TypeOf((*MockSigningMember)(nil).Verify), hashType, msg, sig)
}
