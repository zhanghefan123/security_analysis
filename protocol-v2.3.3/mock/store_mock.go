// Code generated by MockGen. DO NOT EDIT.
// Source: store_interface.go

// Package mock is a generated GoMock package.
package mock

import (
	reflect "reflect"

	accesscontrol "zhanghefan123/security/protobuf/pb-go/accesscontrol"
	common "zhanghefan123/security/protobuf/pb-go/common"
	config "zhanghefan123/security/protobuf/pb-go/config"
	store "zhanghefan123/security/protobuf/pb-go/store"
	protocol "zhanghefan123/security/protocol"
	gomock "github.com/golang/mock/gomock"
)

// MockIterator is a mock of Iterator interface.
type MockIterator struct {
	ctrl     *gomock.Controller
	recorder *MockIteratorMockRecorder
}

// MockIteratorMockRecorder is the mock recorder for MockIterator.
type MockIteratorMockRecorder struct {
	mock *MockIterator
}

// NewMockIterator creates a new mock instance.
func NewMockIterator(ctrl *gomock.Controller) *MockIterator {
	mock := &MockIterator{ctrl: ctrl}
	mock.recorder = &MockIteratorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIterator) EXPECT() *MockIteratorMockRecorder {
	return m.recorder
}

// Error mocks base method.
func (m *MockIterator) Error() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Error")
	ret0, _ := ret[0].(error)
	return ret0
}

// Error indicates an expected call of Error.
func (mr *MockIteratorMockRecorder) Error() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Error", reflect.TypeOf((*MockIterator)(nil).Error))
}

// First mocks base method.
func (m *MockIterator) First() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "First")
	ret0, _ := ret[0].(bool)
	return ret0
}

// First indicates an expected call of First.
func (mr *MockIteratorMockRecorder) First() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "First", reflect.TypeOf((*MockIterator)(nil).First))
}

// Key mocks base method.
func (m *MockIterator) Key() []byte {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Key")
	ret0, _ := ret[0].([]byte)
	return ret0
}

// Key indicates an expected call of Key.
func (mr *MockIteratorMockRecorder) Key() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Key", reflect.TypeOf((*MockIterator)(nil).Key))
}

// Next mocks base method.
func (m *MockIterator) Next() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Next")
	ret0, _ := ret[0].(bool)
	return ret0
}

// Next indicates an expected call of Next.
func (mr *MockIteratorMockRecorder) Next() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Next", reflect.TypeOf((*MockIterator)(nil).Next))
}

// Release mocks base method.
func (m *MockIterator) Release() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Release")
}

// Release indicates an expected call of Release.
func (mr *MockIteratorMockRecorder) Release() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Release", reflect.TypeOf((*MockIterator)(nil).Release))
}

// Value mocks base method.
func (m *MockIterator) Value() []byte {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Value")
	ret0, _ := ret[0].([]byte)
	return ret0
}

// Value indicates an expected call of Value.
func (mr *MockIteratorMockRecorder) Value() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Value", reflect.TypeOf((*MockIterator)(nil).Value))
}

// MockStateIterator is a mock of StateIterator interface.
type MockStateIterator struct {
	ctrl     *gomock.Controller
	recorder *MockStateIteratorMockRecorder
}

// MockStateIteratorMockRecorder is the mock recorder for MockStateIterator.
type MockStateIteratorMockRecorder struct {
	mock *MockStateIterator
}

// NewMockStateIterator creates a new mock instance.
func NewMockStateIterator(ctrl *gomock.Controller) *MockStateIterator {
	mock := &MockStateIterator{ctrl: ctrl}
	mock.recorder = &MockStateIteratorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockStateIterator) EXPECT() *MockStateIteratorMockRecorder {
	return m.recorder
}

// Next mocks base method.
func (m *MockStateIterator) Next() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Next")
	ret0, _ := ret[0].(bool)
	return ret0
}

// Next indicates an expected call of Next.
func (mr *MockStateIteratorMockRecorder) Next() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Next", reflect.TypeOf((*MockStateIterator)(nil).Next))
}

// Release mocks base method.
func (m *MockStateIterator) Release() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Release")
}

// Release indicates an expected call of Release.
func (mr *MockStateIteratorMockRecorder) Release() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Release", reflect.TypeOf((*MockStateIterator)(nil).Release))
}

// Value mocks base method.
func (m *MockStateIterator) Value() (*store.KV, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Value")
	ret0, _ := ret[0].(*store.KV)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Value indicates an expected call of Value.
func (mr *MockStateIteratorMockRecorder) Value() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Value", reflect.TypeOf((*MockStateIterator)(nil).Value))
}

// MockKeyHistoryIterator is a mock of KeyHistoryIterator interface.
type MockKeyHistoryIterator struct {
	ctrl     *gomock.Controller
	recorder *MockKeyHistoryIteratorMockRecorder
}

// MockKeyHistoryIteratorMockRecorder is the mock recorder for MockKeyHistoryIterator.
type MockKeyHistoryIteratorMockRecorder struct {
	mock *MockKeyHistoryIterator
}

// NewMockKeyHistoryIterator creates a new mock instance.
func NewMockKeyHistoryIterator(ctrl *gomock.Controller) *MockKeyHistoryIterator {
	mock := &MockKeyHistoryIterator{ctrl: ctrl}
	mock.recorder = &MockKeyHistoryIteratorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockKeyHistoryIterator) EXPECT() *MockKeyHistoryIteratorMockRecorder {
	return m.recorder
}

// Next mocks base method.
func (m *MockKeyHistoryIterator) Next() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Next")
	ret0, _ := ret[0].(bool)
	return ret0
}

// Next indicates an expected call of Next.
func (mr *MockKeyHistoryIteratorMockRecorder) Next() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Next", reflect.TypeOf((*MockKeyHistoryIterator)(nil).Next))
}

// Release mocks base method.
func (m *MockKeyHistoryIterator) Release() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Release")
}

// Release indicates an expected call of Release.
func (mr *MockKeyHistoryIteratorMockRecorder) Release() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Release", reflect.TypeOf((*MockKeyHistoryIterator)(nil).Release))
}

// Value mocks base method.
func (m *MockKeyHistoryIterator) Value() (*store.KeyModification, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Value")
	ret0, _ := ret[0].(*store.KeyModification)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Value indicates an expected call of Value.
func (mr *MockKeyHistoryIteratorMockRecorder) Value() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Value", reflect.TypeOf((*MockKeyHistoryIterator)(nil).Value))
}

// MockTxHistoryIterator is a mock of TxHistoryIterator interface.
type MockTxHistoryIterator struct {
	ctrl     *gomock.Controller
	recorder *MockTxHistoryIteratorMockRecorder
}

// MockTxHistoryIteratorMockRecorder is the mock recorder for MockTxHistoryIterator.
type MockTxHistoryIteratorMockRecorder struct {
	mock *MockTxHistoryIterator
}

// NewMockTxHistoryIterator creates a new mock instance.
func NewMockTxHistoryIterator(ctrl *gomock.Controller) *MockTxHistoryIterator {
	mock := &MockTxHistoryIterator{ctrl: ctrl}
	mock.recorder = &MockTxHistoryIteratorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTxHistoryIterator) EXPECT() *MockTxHistoryIteratorMockRecorder {
	return m.recorder
}

// Next mocks base method.
func (m *MockTxHistoryIterator) Next() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Next")
	ret0, _ := ret[0].(bool)
	return ret0
}

// Next indicates an expected call of Next.
func (mr *MockTxHistoryIteratorMockRecorder) Next() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Next", reflect.TypeOf((*MockTxHistoryIterator)(nil).Next))
}

// Release mocks base method.
func (m *MockTxHistoryIterator) Release() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Release")
}

// Release indicates an expected call of Release.
func (mr *MockTxHistoryIteratorMockRecorder) Release() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Release", reflect.TypeOf((*MockTxHistoryIterator)(nil).Release))
}

// Value mocks base method.
func (m *MockTxHistoryIterator) Value() (*store.TxHistory, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Value")
	ret0, _ := ret[0].(*store.TxHistory)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Value indicates an expected call of Value.
func (mr *MockTxHistoryIteratorMockRecorder) Value() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Value", reflect.TypeOf((*MockTxHistoryIterator)(nil).Value))
}

// MockBlockchainStore is a mock of BlockchainStore interface.
type MockBlockchainStore struct {
	ctrl     *gomock.Controller
	recorder *MockBlockchainStoreMockRecorder
}

// MockBlockchainStoreMockRecorder is the mock recorder for MockBlockchainStore.
type MockBlockchainStoreMockRecorder struct {
	mock *MockBlockchainStore
}

// NewMockBlockchainStore creates a new mock instance.
func NewMockBlockchainStore(ctrl *gomock.Controller) *MockBlockchainStore {
	mock := &MockBlockchainStore{ctrl: ctrl}
	mock.recorder = &MockBlockchainStoreMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockBlockchainStore) EXPECT() *MockBlockchainStoreMockRecorder {
	return m.recorder
}

// ArchiveBlock mocks base method.
func (m *MockBlockchainStore) ArchiveBlock(archiveHeight uint64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ArchiveBlock", archiveHeight)
	ret0, _ := ret[0].(error)
	return ret0
}

// ArchiveBlock indicates an expected call of ArchiveBlock.
func (mr *MockBlockchainStoreMockRecorder) ArchiveBlock(archiveHeight interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ArchiveBlock", reflect.TypeOf((*MockBlockchainStore)(nil).ArchiveBlock), archiveHeight)
}

// BeginDbTransaction mocks base method.
func (m *MockBlockchainStore) BeginDbTransaction(txName string) (protocol.SqlDBTransaction, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BeginDbTransaction", txName)
	ret0, _ := ret[0].(protocol.SqlDBTransaction)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BeginDbTransaction indicates an expected call of BeginDbTransaction.
func (mr *MockBlockchainStoreMockRecorder) BeginDbTransaction(txName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BeginDbTransaction", reflect.TypeOf((*MockBlockchainStore)(nil).BeginDbTransaction), txName)
}

// BlockExists mocks base method.
func (m *MockBlockchainStore) BlockExists(blockHash []byte) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BlockExists", blockHash)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BlockExists indicates an expected call of BlockExists.
func (mr *MockBlockchainStoreMockRecorder) BlockExists(blockHash interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BlockExists", reflect.TypeOf((*MockBlockchainStore)(nil).BlockExists), blockHash)
}

// Close mocks base method.
func (m *MockBlockchainStore) Close() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Close")
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close.
func (mr *MockBlockchainStoreMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockBlockchainStore)(nil).Close))
}

// CommitDbTransaction mocks base method.
func (m *MockBlockchainStore) CommitDbTransaction(txName string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CommitDbTransaction", txName)
	ret0, _ := ret[0].(error)
	return ret0
}

// CommitDbTransaction indicates an expected call of CommitDbTransaction.
func (mr *MockBlockchainStoreMockRecorder) CommitDbTransaction(txName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CommitDbTransaction", reflect.TypeOf((*MockBlockchainStore)(nil).CommitDbTransaction), txName)
}

// CreateDatabase mocks base method.
func (m *MockBlockchainStore) CreateDatabase(contractName string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateDatabase", contractName)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateDatabase indicates an expected call of CreateDatabase.
func (mr *MockBlockchainStoreMockRecorder) CreateDatabase(contractName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateDatabase", reflect.TypeOf((*MockBlockchainStore)(nil).CreateDatabase), contractName)
}

// DropDatabase mocks base method.
func (m *MockBlockchainStore) DropDatabase(contractName string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DropDatabase", contractName)
	ret0, _ := ret[0].(error)
	return ret0
}

// DropDatabase indicates an expected call of DropDatabase.
func (mr *MockBlockchainStoreMockRecorder) DropDatabase(contractName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DropDatabase", reflect.TypeOf((*MockBlockchainStore)(nil).DropDatabase), contractName)
}

// ExecDdlSql mocks base method.
func (m *MockBlockchainStore) ExecDdlSql(contractName, sql, version string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ExecDdlSql", contractName, sql, version)
	ret0, _ := ret[0].(error)
	return ret0
}

// ExecDdlSql indicates an expected call of ExecDdlSql.
func (mr *MockBlockchainStoreMockRecorder) ExecDdlSql(contractName, sql, version interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExecDdlSql", reflect.TypeOf((*MockBlockchainStore)(nil).ExecDdlSql), contractName, sql, version)
}

// GetAccountTxHistory mocks base method.
func (m *MockBlockchainStore) GetAccountTxHistory(accountId []byte) (protocol.TxHistoryIterator, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAccountTxHistory", accountId)
	ret0, _ := ret[0].(protocol.TxHistoryIterator)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAccountTxHistory indicates an expected call of GetAccountTxHistory.
func (mr *MockBlockchainStoreMockRecorder) GetAccountTxHistory(accountId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAccountTxHistory", reflect.TypeOf((*MockBlockchainStore)(nil).GetAccountTxHistory), accountId)
}

// GetArchiveStatus mocks base method.
func (m *MockBlockchainStore) GetArchiveStatus() (*store.ArchiveStatus, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetArchiveStatus")
	ret0, _ := ret[0].(*store.ArchiveStatus)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetArchiveStatus indicates an expected call of GetArchiveStatus.
func (mr *MockBlockchainStoreMockRecorder) GetArchiveStatus() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetArchiveStatus", reflect.TypeOf((*MockBlockchainStore)(nil).GetArchiveStatus))
}

// GetArchivedPivot mocks base method.
func (m *MockBlockchainStore) GetArchivedPivot() uint64 {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetArchivedPivot")
	ret0, _ := ret[0].(uint64)
	return ret0
}

// GetArchivedPivot indicates an expected call of GetArchivedPivot.
func (mr *MockBlockchainStoreMockRecorder) GetArchivedPivot() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetArchivedPivot", reflect.TypeOf((*MockBlockchainStore)(nil).GetArchivedPivot))
}

// GetBlock mocks base method.
func (m *MockBlockchainStore) GetBlock(height uint64) (*common.Block, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBlock", height)
	ret0, _ := ret[0].(*common.Block)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBlock indicates an expected call of GetBlock.
func (mr *MockBlockchainStoreMockRecorder) GetBlock(height interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBlock", reflect.TypeOf((*MockBlockchainStore)(nil).GetBlock), height)
}

// GetBlockByHash mocks base method.
func (m *MockBlockchainStore) GetBlockByHash(blockHash []byte) (*common.Block, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBlockByHash", blockHash)
	ret0, _ := ret[0].(*common.Block)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBlockByHash indicates an expected call of GetBlockByHash.
func (mr *MockBlockchainStoreMockRecorder) GetBlockByHash(blockHash interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBlockByHash", reflect.TypeOf((*MockBlockchainStore)(nil).GetBlockByHash), blockHash)
}

// GetBlockByTx mocks base method.
func (m *MockBlockchainStore) GetBlockByTx(txId string) (*common.Block, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBlockByTx", txId)
	ret0, _ := ret[0].(*common.Block)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBlockByTx indicates an expected call of GetBlockByTx.
func (mr *MockBlockchainStoreMockRecorder) GetBlockByTx(txId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBlockByTx", reflect.TypeOf((*MockBlockchainStore)(nil).GetBlockByTx), txId)
}

// GetBlockHeaderByHeight mocks base method.
func (m *MockBlockchainStore) GetBlockHeaderByHeight(height uint64) (*common.BlockHeader, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBlockHeaderByHeight", height)
	ret0, _ := ret[0].(*common.BlockHeader)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBlockHeaderByHeight indicates an expected call of GetBlockHeaderByHeight.
func (mr *MockBlockchainStoreMockRecorder) GetBlockHeaderByHeight(height interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBlockHeaderByHeight", reflect.TypeOf((*MockBlockchainStore)(nil).GetBlockHeaderByHeight), height)
}

// GetBlockWithRWSets mocks base method.
func (m *MockBlockchainStore) GetBlockWithRWSets(height uint64) (*store.BlockWithRWSet, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBlockWithRWSets", height)
	ret0, _ := ret[0].(*store.BlockWithRWSet)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBlockWithRWSets indicates an expected call of GetBlockWithRWSets.
func (mr *MockBlockchainStoreMockRecorder) GetBlockWithRWSets(height interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBlockWithRWSets", reflect.TypeOf((*MockBlockchainStore)(nil).GetBlockWithRWSets), height)
}

// GetContractByName mocks base method.
func (m *MockBlockchainStore) GetContractByName(name string) (*common.Contract, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetContractByName", name)
	ret0, _ := ret[0].(*common.Contract)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetContractByName indicates an expected call of GetContractByName.
func (mr *MockBlockchainStoreMockRecorder) GetContractByName(name interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetContractByName", reflect.TypeOf((*MockBlockchainStore)(nil).GetContractByName), name)
}

// GetContractBytecode mocks base method.
func (m *MockBlockchainStore) GetContractBytecode(name string) ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetContractBytecode", name)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetContractBytecode indicates an expected call of GetContractBytecode.
func (mr *MockBlockchainStoreMockRecorder) GetContractBytecode(name interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetContractBytecode", reflect.TypeOf((*MockBlockchainStore)(nil).GetContractBytecode), name)
}

// GetContractDbName mocks base method.
func (m *MockBlockchainStore) GetContractDbName(contractName string) string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetContractDbName", contractName)
	ret0, _ := ret[0].(string)
	return ret0
}

// GetContractDbName indicates an expected call of GetContractDbName.
func (mr *MockBlockchainStoreMockRecorder) GetContractDbName(contractName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetContractDbName", reflect.TypeOf((*MockBlockchainStore)(nil).GetContractDbName), contractName)
}

// GetContractTxHistory mocks base method.
func (m *MockBlockchainStore) GetContractTxHistory(contractName string) (protocol.TxHistoryIterator, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetContractTxHistory", contractName)
	ret0, _ := ret[0].(protocol.TxHistoryIterator)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetContractTxHistory indicates an expected call of GetContractTxHistory.
func (mr *MockBlockchainStoreMockRecorder) GetContractTxHistory(contractName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetContractTxHistory", reflect.TypeOf((*MockBlockchainStore)(nil).GetContractTxHistory), contractName)
}

// GetDBHandle mocks base method.
func (m *MockBlockchainStore) GetDBHandle(dbName string) protocol.DBHandle {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDBHandle", dbName)
	ret0, _ := ret[0].(protocol.DBHandle)
	return ret0
}

// GetDBHandle indicates an expected call of GetDBHandle.
func (mr *MockBlockchainStoreMockRecorder) GetDBHandle(dbName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDBHandle", reflect.TypeOf((*MockBlockchainStore)(nil).GetDBHandle), dbName)
}

// GetDbTransaction mocks base method.
func (m *MockBlockchainStore) GetDbTransaction(txName string) (protocol.SqlDBTransaction, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDbTransaction", txName)
	ret0, _ := ret[0].(protocol.SqlDBTransaction)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDbTransaction indicates an expected call of GetDbTransaction.
func (mr *MockBlockchainStoreMockRecorder) GetDbTransaction(txName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDbTransaction", reflect.TypeOf((*MockBlockchainStore)(nil).GetDbTransaction), txName)
}

// GetHeightByHash mocks base method.
func (m *MockBlockchainStore) GetHeightByHash(blockHash []byte) (uint64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetHeightByHash", blockHash)
	ret0, _ := ret[0].(uint64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetHeightByHash indicates an expected call of GetHeightByHash.
func (mr *MockBlockchainStoreMockRecorder) GetHeightByHash(blockHash interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetHeightByHash", reflect.TypeOf((*MockBlockchainStore)(nil).GetHeightByHash), blockHash)
}

// GetHistoryForKey mocks base method.
func (m *MockBlockchainStore) GetHistoryForKey(contractName string, key []byte) (protocol.KeyHistoryIterator, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetHistoryForKey", contractName, key)
	ret0, _ := ret[0].(protocol.KeyHistoryIterator)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetHistoryForKey indicates an expected call of GetHistoryForKey.
func (mr *MockBlockchainStoreMockRecorder) GetHistoryForKey(contractName, key interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetHistoryForKey", reflect.TypeOf((*MockBlockchainStore)(nil).GetHistoryForKey), contractName, key)
}

// GetLastBlock mocks base method.
func (m *MockBlockchainStore) GetLastBlock() (*common.Block, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLastBlock")
	ret0, _ := ret[0].(*common.Block)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetLastBlock indicates an expected call of GetLastBlock.
func (mr *MockBlockchainStoreMockRecorder) GetLastBlock() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLastBlock", reflect.TypeOf((*MockBlockchainStore)(nil).GetLastBlock))
}

// GetLastChainConfig mocks base method.
func (m *MockBlockchainStore) GetLastChainConfig() (*config.ChainConfig, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLastChainConfig")
	ret0, _ := ret[0].(*config.ChainConfig)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetLastChainConfig indicates an expected call of GetLastChainConfig.
func (mr *MockBlockchainStoreMockRecorder) GetLastChainConfig() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLastChainConfig", reflect.TypeOf((*MockBlockchainStore)(nil).GetLastChainConfig))
}

// GetLastConfigBlock mocks base method.
func (m *MockBlockchainStore) GetLastConfigBlock() (*common.Block, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLastConfigBlock")
	ret0, _ := ret[0].(*common.Block)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetLastConfigBlock indicates an expected call of GetLastConfigBlock.
func (mr *MockBlockchainStoreMockRecorder) GetLastConfigBlock() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLastConfigBlock", reflect.TypeOf((*MockBlockchainStore)(nil).GetLastConfigBlock))
}

// GetLastHeight mocks base method.
func (m *MockBlockchainStore) GetLastHeight() (uint64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLastHeight")
	ret0, _ := ret[0].(uint64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetLastHeight indicates an expected call of GetLastHeight.
func (mr *MockBlockchainStoreMockRecorder) GetLastHeight() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLastHeight", reflect.TypeOf((*MockBlockchainStore)(nil).GetLastHeight))
}

// GetMemberExtraData mocks base method.
func (m *MockBlockchainStore) GetMemberExtraData(member *accesscontrol.Member) (*accesscontrol.MemberExtraData, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMemberExtraData", member)
	ret0, _ := ret[0].(*accesscontrol.MemberExtraData)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMemberExtraData indicates an expected call of GetMemberExtraData.
func (mr *MockBlockchainStoreMockRecorder) GetMemberExtraData(member interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMemberExtraData", reflect.TypeOf((*MockBlockchainStore)(nil).GetMemberExtraData), member)
}

// GetTx mocks base method.
func (m *MockBlockchainStore) GetTx(txId string) (*common.Transaction, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTx", txId)
	ret0, _ := ret[0].(*common.Transaction)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTx indicates an expected call of GetTx.
func (mr *MockBlockchainStoreMockRecorder) GetTx(txId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTx", reflect.TypeOf((*MockBlockchainStore)(nil).GetTx), txId)
}

// GetTxConfirmedTime mocks base method.
func (m *MockBlockchainStore) GetTxConfirmedTime(txId string) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTxConfirmedTime", txId)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTxConfirmedTime indicates an expected call of GetTxConfirmedTime.
func (mr *MockBlockchainStoreMockRecorder) GetTxConfirmedTime(txId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTxConfirmedTime", reflect.TypeOf((*MockBlockchainStore)(nil).GetTxConfirmedTime), txId)
}

// GetTxHeight mocks base method.
func (m *MockBlockchainStore) GetTxHeight(txId string) (uint64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTxHeight", txId)
	ret0, _ := ret[0].(uint64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTxHeight indicates an expected call of GetTxHeight.
func (mr *MockBlockchainStoreMockRecorder) GetTxHeight(txId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTxHeight", reflect.TypeOf((*MockBlockchainStore)(nil).GetTxHeight), txId)
}

// GetTxInfoOnly mocks base method.
func (m *MockBlockchainStore) GetTxInfoOnly(txId string) (*common.TransactionInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTxInfoOnly", txId)
	ret0, _ := ret[0].(*common.TransactionInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTxInfoOnly indicates an expected call of GetTxInfoOnly.
func (mr *MockBlockchainStoreMockRecorder) GetTxInfoOnly(txId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTxInfoOnly", reflect.TypeOf((*MockBlockchainStore)(nil).GetTxInfoOnly), txId)
}

// GetTxInfoWithRWSet mocks base method.
func (m *MockBlockchainStore) GetTxInfoWithRWSet(txId string) (*common.TransactionInfoWithRWSet, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTxInfoWithRWSet", txId)
	ret0, _ := ret[0].(*common.TransactionInfoWithRWSet)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTxInfoWithRWSet indicates an expected call of GetTxInfoWithRWSet.
func (mr *MockBlockchainStoreMockRecorder) GetTxInfoWithRWSet(txId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTxInfoWithRWSet", reflect.TypeOf((*MockBlockchainStore)(nil).GetTxInfoWithRWSet), txId)
}

// GetTxRWSet mocks base method.
func (m *MockBlockchainStore) GetTxRWSet(txId string) (*common.TxRWSet, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTxRWSet", txId)
	ret0, _ := ret[0].(*common.TxRWSet)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTxRWSet indicates an expected call of GetTxRWSet.
func (mr *MockBlockchainStoreMockRecorder) GetTxRWSet(txId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTxRWSet", reflect.TypeOf((*MockBlockchainStore)(nil).GetTxRWSet), txId)
}

// GetTxRWSetsByHeight mocks base method.
func (m *MockBlockchainStore) GetTxRWSetsByHeight(height uint64) ([]*common.TxRWSet, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTxRWSetsByHeight", height)
	ret0, _ := ret[0].([]*common.TxRWSet)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTxRWSetsByHeight indicates an expected call of GetTxRWSetsByHeight.
func (mr *MockBlockchainStoreMockRecorder) GetTxRWSetsByHeight(height interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTxRWSetsByHeight", reflect.TypeOf((*MockBlockchainStore)(nil).GetTxRWSetsByHeight), height)
}

// GetTxWithInfo mocks base method.
func (m *MockBlockchainStore) GetTxWithInfo(txId string) (*common.TransactionInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTxWithInfo", txId)
	ret0, _ := ret[0].(*common.TransactionInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTxWithInfo indicates an expected call of GetTxWithInfo.
func (mr *MockBlockchainStoreMockRecorder) GetTxWithInfo(txId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTxWithInfo", reflect.TypeOf((*MockBlockchainStore)(nil).GetTxWithInfo), txId)
}

// GetTxWithRWSet mocks base method.
func (m *MockBlockchainStore) GetTxWithRWSet(txId string) (*common.TransactionWithRWSet, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTxWithRWSet", txId)
	ret0, _ := ret[0].(*common.TransactionWithRWSet)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTxWithRWSet indicates an expected call of GetTxWithRWSet.
func (mr *MockBlockchainStoreMockRecorder) GetTxWithRWSet(txId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTxWithRWSet", reflect.TypeOf((*MockBlockchainStore)(nil).GetTxWithRWSet), txId)
}

// InitGenesis mocks base method.
func (m *MockBlockchainStore) InitGenesis(genesisBlock *store.BlockWithRWSet) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InitGenesis", genesisBlock)
	ret0, _ := ret[0].(error)
	return ret0
}

// InitGenesis indicates an expected call of InitGenesis.
func (mr *MockBlockchainStoreMockRecorder) InitGenesis(genesisBlock interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InitGenesis", reflect.TypeOf((*MockBlockchainStore)(nil).InitGenesis), genesisBlock)
}

// PutBlock mocks base method.
func (m *MockBlockchainStore) PutBlock(block *common.Block, txRWSets []*common.TxRWSet) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PutBlock", block, txRWSets)
	ret0, _ := ret[0].(error)
	return ret0
}

// PutBlock indicates an expected call of PutBlock.
func (mr *MockBlockchainStoreMockRecorder) PutBlock(block, txRWSets interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PutBlock", reflect.TypeOf((*MockBlockchainStore)(nil).PutBlock), block, txRWSets)
}

// QueryMulti mocks base method.
func (m *MockBlockchainStore) QueryMulti(contractName, sql string, values ...interface{}) (protocol.SqlRows, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{contractName, sql}
	for _, a := range values {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "QueryMulti", varargs...)
	ret0, _ := ret[0].(protocol.SqlRows)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// QueryMulti indicates an expected call of QueryMulti.
func (mr *MockBlockchainStoreMockRecorder) QueryMulti(contractName, sql interface{}, values ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{contractName, sql}, values...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueryMulti", reflect.TypeOf((*MockBlockchainStore)(nil).QueryMulti), varargs...)
}

// QuerySingle mocks base method.
func (m *MockBlockchainStore) QuerySingle(contractName, sql string, values ...interface{}) (protocol.SqlRow, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{contractName, sql}
	for _, a := range values {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "QuerySingle", varargs...)
	ret0, _ := ret[0].(protocol.SqlRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// QuerySingle indicates an expected call of QuerySingle.
func (mr *MockBlockchainStoreMockRecorder) QuerySingle(contractName, sql interface{}, values ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{contractName, sql}, values...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QuerySingle", reflect.TypeOf((*MockBlockchainStore)(nil).QuerySingle), varargs...)
}

// ReadObject mocks base method.
func (m *MockBlockchainStore) ReadObject(contractName string, key []byte) ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReadObject", contractName, key)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReadObject indicates an expected call of ReadObject.
func (mr *MockBlockchainStoreMockRecorder) ReadObject(contractName, key interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadObject", reflect.TypeOf((*MockBlockchainStore)(nil).ReadObject), contractName, key)
}

// ReadObjects mocks base method.
func (m *MockBlockchainStore) ReadObjects(contractName string, keys [][]byte) ([][]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReadObjects", contractName, keys)
	ret0, _ := ret[0].([][]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReadObjects indicates an expected call of ReadObjects.
func (mr *MockBlockchainStoreMockRecorder) ReadObjects(contractName, keys interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadObjects", reflect.TypeOf((*MockBlockchainStore)(nil).ReadObjects), contractName, keys)
}

// RestoreBlocks mocks base method.
func (m *MockBlockchainStore) RestoreBlocks(serializedBlocks [][]byte) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RestoreBlocks", serializedBlocks)
	ret0, _ := ret[0].(error)
	return ret0
}

// RestoreBlocks indicates an expected call of RestoreBlocks.
func (mr *MockBlockchainStoreMockRecorder) RestoreBlocks(serializedBlocks interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RestoreBlocks", reflect.TypeOf((*MockBlockchainStore)(nil).RestoreBlocks), serializedBlocks)
}

// RollbackDbTransaction mocks base method.
func (m *MockBlockchainStore) RollbackDbTransaction(txName string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RollbackDbTransaction", txName)
	ret0, _ := ret[0].(error)
	return ret0
}

// RollbackDbTransaction indicates an expected call of RollbackDbTransaction.
func (mr *MockBlockchainStoreMockRecorder) RollbackDbTransaction(txName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RollbackDbTransaction", reflect.TypeOf((*MockBlockchainStore)(nil).RollbackDbTransaction), txName)
}

// SelectObject mocks base method.
func (m *MockBlockchainStore) SelectObject(contractName string, startKey, limit []byte) (protocol.StateIterator, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SelectObject", contractName, startKey, limit)
	ret0, _ := ret[0].(protocol.StateIterator)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SelectObject indicates an expected call of SelectObject.
func (mr *MockBlockchainStoreMockRecorder) SelectObject(contractName, startKey, limit interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SelectObject", reflect.TypeOf((*MockBlockchainStore)(nil).SelectObject), contractName, startKey, limit)
}

// TxExists mocks base method.
func (m *MockBlockchainStore) TxExists(txId string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TxExists", txId)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TxExists indicates an expected call of TxExists.
func (mr *MockBlockchainStoreMockRecorder) TxExists(txId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TxExists", reflect.TypeOf((*MockBlockchainStore)(nil).TxExists), txId)
}

// TxExistsInFullDB mocks base method.
func (m *MockBlockchainStore) TxExistsInFullDB(txId string) (bool, uint64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TxExistsInFullDB", txId)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(uint64)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// TxExistsInFullDB indicates an expected call of TxExistsInFullDB.
func (mr *MockBlockchainStoreMockRecorder) TxExistsInFullDB(txId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TxExistsInFullDB", reflect.TypeOf((*MockBlockchainStore)(nil).TxExistsInFullDB), txId)
}

// TxExistsInIncrementDB mocks base method.
func (m *MockBlockchainStore) TxExistsInIncrementDB(txId string, startHeight uint64) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TxExistsInIncrementDB", txId, startHeight)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TxExistsInIncrementDB indicates an expected call of TxExistsInIncrementDB.
func (mr *MockBlockchainStoreMockRecorder) TxExistsInIncrementDB(txId, startHeight interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TxExistsInIncrementDB", reflect.TypeOf((*MockBlockchainStore)(nil).TxExistsInIncrementDB), txId, startHeight)
}

// TxExistsInIncrementDBState mocks base method.
func (m *MockBlockchainStore) TxExistsInIncrementDBState(txId string, startHeight uint64) (bool, bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TxExistsInIncrementDBState", txId, startHeight)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(bool)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// TxExistsInIncrementDBState indicates an expected call of TxExistsInIncrementDBState.
func (mr *MockBlockchainStoreMockRecorder) TxExistsInIncrementDBState(txId, startHeight interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TxExistsInIncrementDBState", reflect.TypeOf((*MockBlockchainStore)(nil).TxExistsInIncrementDBState), txId, startHeight)
}

// MockStateSqlOperation is a mock of StateSqlOperation interface.
type MockStateSqlOperation struct {
	ctrl     *gomock.Controller
	recorder *MockStateSqlOperationMockRecorder
}

// MockStateSqlOperationMockRecorder is the mock recorder for MockStateSqlOperation.
type MockStateSqlOperationMockRecorder struct {
	mock *MockStateSqlOperation
}

// NewMockStateSqlOperation creates a new mock instance.
func NewMockStateSqlOperation(ctrl *gomock.Controller) *MockStateSqlOperation {
	mock := &MockStateSqlOperation{ctrl: ctrl}
	mock.recorder = &MockStateSqlOperationMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockStateSqlOperation) EXPECT() *MockStateSqlOperationMockRecorder {
	return m.recorder
}

// BeginDbTransaction mocks base method.
func (m *MockStateSqlOperation) BeginDbTransaction(txName string) (protocol.SqlDBTransaction, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BeginDbTransaction", txName)
	ret0, _ := ret[0].(protocol.SqlDBTransaction)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BeginDbTransaction indicates an expected call of BeginDbTransaction.
func (mr *MockStateSqlOperationMockRecorder) BeginDbTransaction(txName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BeginDbTransaction", reflect.TypeOf((*MockStateSqlOperation)(nil).BeginDbTransaction), txName)
}

// CommitDbTransaction mocks base method.
func (m *MockStateSqlOperation) CommitDbTransaction(txName string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CommitDbTransaction", txName)
	ret0, _ := ret[0].(error)
	return ret0
}

// CommitDbTransaction indicates an expected call of CommitDbTransaction.
func (mr *MockStateSqlOperationMockRecorder) CommitDbTransaction(txName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CommitDbTransaction", reflect.TypeOf((*MockStateSqlOperation)(nil).CommitDbTransaction), txName)
}

// CreateDatabase mocks base method.
func (m *MockStateSqlOperation) CreateDatabase(contractName string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateDatabase", contractName)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateDatabase indicates an expected call of CreateDatabase.
func (mr *MockStateSqlOperationMockRecorder) CreateDatabase(contractName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateDatabase", reflect.TypeOf((*MockStateSqlOperation)(nil).CreateDatabase), contractName)
}

// DropDatabase mocks base method.
func (m *MockStateSqlOperation) DropDatabase(contractName string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DropDatabase", contractName)
	ret0, _ := ret[0].(error)
	return ret0
}

// DropDatabase indicates an expected call of DropDatabase.
func (mr *MockStateSqlOperationMockRecorder) DropDatabase(contractName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DropDatabase", reflect.TypeOf((*MockStateSqlOperation)(nil).DropDatabase), contractName)
}

// ExecDdlSql mocks base method.
func (m *MockStateSqlOperation) ExecDdlSql(contractName, sql, version string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ExecDdlSql", contractName, sql, version)
	ret0, _ := ret[0].(error)
	return ret0
}

// ExecDdlSql indicates an expected call of ExecDdlSql.
func (mr *MockStateSqlOperationMockRecorder) ExecDdlSql(contractName, sql, version interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExecDdlSql", reflect.TypeOf((*MockStateSqlOperation)(nil).ExecDdlSql), contractName, sql, version)
}

// GetContractDbName mocks base method.
func (m *MockStateSqlOperation) GetContractDbName(contractName string) string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetContractDbName", contractName)
	ret0, _ := ret[0].(string)
	return ret0
}

// GetContractDbName indicates an expected call of GetContractDbName.
func (mr *MockStateSqlOperationMockRecorder) GetContractDbName(contractName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetContractDbName", reflect.TypeOf((*MockStateSqlOperation)(nil).GetContractDbName), contractName)
}

// GetDbTransaction mocks base method.
func (m *MockStateSqlOperation) GetDbTransaction(txName string) (protocol.SqlDBTransaction, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDbTransaction", txName)
	ret0, _ := ret[0].(protocol.SqlDBTransaction)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDbTransaction indicates an expected call of GetDbTransaction.
func (mr *MockStateSqlOperationMockRecorder) GetDbTransaction(txName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDbTransaction", reflect.TypeOf((*MockStateSqlOperation)(nil).GetDbTransaction), txName)
}

// QueryMulti mocks base method.
func (m *MockStateSqlOperation) QueryMulti(contractName, sql string, values ...interface{}) (protocol.SqlRows, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{contractName, sql}
	for _, a := range values {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "QueryMulti", varargs...)
	ret0, _ := ret[0].(protocol.SqlRows)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// QueryMulti indicates an expected call of QueryMulti.
func (mr *MockStateSqlOperationMockRecorder) QueryMulti(contractName, sql interface{}, values ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{contractName, sql}, values...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueryMulti", reflect.TypeOf((*MockStateSqlOperation)(nil).QueryMulti), varargs...)
}

// QuerySingle mocks base method.
func (m *MockStateSqlOperation) QuerySingle(contractName, sql string, values ...interface{}) (protocol.SqlRow, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{contractName, sql}
	for _, a := range values {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "QuerySingle", varargs...)
	ret0, _ := ret[0].(protocol.SqlRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// QuerySingle indicates an expected call of QuerySingle.
func (mr *MockStateSqlOperationMockRecorder) QuerySingle(contractName, sql interface{}, values ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{contractName, sql}, values...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QuerySingle", reflect.TypeOf((*MockStateSqlOperation)(nil).QuerySingle), varargs...)
}

// RollbackDbTransaction mocks base method.
func (m *MockStateSqlOperation) RollbackDbTransaction(txName string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RollbackDbTransaction", txName)
	ret0, _ := ret[0].(error)
	return ret0
}

// RollbackDbTransaction indicates an expected call of RollbackDbTransaction.
func (mr *MockStateSqlOperationMockRecorder) RollbackDbTransaction(txName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RollbackDbTransaction", reflect.TypeOf((*MockStateSqlOperation)(nil).RollbackDbTransaction), txName)
}

// MockSqlDBHandle is a mock of SqlDBHandle interface.
type MockSqlDBHandle struct {
	ctrl     *gomock.Controller
	recorder *MockSqlDBHandleMockRecorder
}

// MockSqlDBHandleMockRecorder is the mock recorder for MockSqlDBHandle.
type MockSqlDBHandleMockRecorder struct {
	mock *MockSqlDBHandle
}

// NewMockSqlDBHandle creates a new mock instance.
func NewMockSqlDBHandle(ctrl *gomock.Controller) *MockSqlDBHandle {
	mock := &MockSqlDBHandle{ctrl: ctrl}
	mock.recorder = &MockSqlDBHandleMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSqlDBHandle) EXPECT() *MockSqlDBHandleMockRecorder {
	return m.recorder
}

// BeginDbTransaction mocks base method.
func (m *MockSqlDBHandle) BeginDbTransaction(txName string) (protocol.SqlDBTransaction, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BeginDbTransaction", txName)
	ret0, _ := ret[0].(protocol.SqlDBTransaction)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BeginDbTransaction indicates an expected call of BeginDbTransaction.
func (mr *MockSqlDBHandleMockRecorder) BeginDbTransaction(txName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BeginDbTransaction", reflect.TypeOf((*MockSqlDBHandle)(nil).BeginDbTransaction), txName)
}

// Close mocks base method.
func (m *MockSqlDBHandle) Close() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Close")
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close.
func (mr *MockSqlDBHandleMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockSqlDBHandle)(nil).Close))
}

// CommitDbTransaction mocks base method.
func (m *MockSqlDBHandle) CommitDbTransaction(txName string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CommitDbTransaction", txName)
	ret0, _ := ret[0].(error)
	return ret0
}

// CommitDbTransaction indicates an expected call of CommitDbTransaction.
func (mr *MockSqlDBHandleMockRecorder) CommitDbTransaction(txName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CommitDbTransaction", reflect.TypeOf((*MockSqlDBHandle)(nil).CommitDbTransaction), txName)
}

// CompactRange mocks base method.
func (m *MockSqlDBHandle) CompactRange(start, limit []byte) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CompactRange", start, limit)
	ret0, _ := ret[0].(error)
	return ret0
}

// CompactRange indicates an expected call of CompactRange.
func (mr *MockSqlDBHandleMockRecorder) CompactRange(start, limit interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CompactRange", reflect.TypeOf((*MockSqlDBHandle)(nil).CompactRange), start, limit)
}

// CreateDatabaseIfNotExist mocks base method.
func (m *MockSqlDBHandle) CreateDatabaseIfNotExist(dbName string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateDatabaseIfNotExist", dbName)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateDatabaseIfNotExist indicates an expected call of CreateDatabaseIfNotExist.
func (mr *MockSqlDBHandleMockRecorder) CreateDatabaseIfNotExist(dbName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateDatabaseIfNotExist", reflect.TypeOf((*MockSqlDBHandle)(nil).CreateDatabaseIfNotExist), dbName)
}

// CreateTableIfNotExist mocks base method.
func (m *MockSqlDBHandle) CreateTableIfNotExist(obj interface{}) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateTableIfNotExist", obj)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateTableIfNotExist indicates an expected call of CreateTableIfNotExist.
func (mr *MockSqlDBHandleMockRecorder) CreateTableIfNotExist(obj interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateTableIfNotExist", reflect.TypeOf((*MockSqlDBHandle)(nil).CreateTableIfNotExist), obj)
}

// Delete mocks base method.
func (m *MockSqlDBHandle) Delete(key []byte) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", key)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockSqlDBHandleMockRecorder) Delete(key interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockSqlDBHandle)(nil).Delete), key)
}

// ExecSql mocks base method.
func (m *MockSqlDBHandle) ExecSql(sql string, values ...interface{}) (int64, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{sql}
	for _, a := range values {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ExecSql", varargs...)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ExecSql indicates an expected call of ExecSql.
func (mr *MockSqlDBHandleMockRecorder) ExecSql(sql interface{}, values ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{sql}, values...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExecSql", reflect.TypeOf((*MockSqlDBHandle)(nil).ExecSql), varargs...)
}

// Get mocks base method.
func (m *MockSqlDBHandle) Get(key []byte) ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", key)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockSqlDBHandleMockRecorder) Get(key interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockSqlDBHandle)(nil).Get), key)
}

// GetDbTransaction mocks base method.
func (m *MockSqlDBHandle) GetDbTransaction(txName string) (protocol.SqlDBTransaction, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDbTransaction", txName)
	ret0, _ := ret[0].(protocol.SqlDBTransaction)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDbTransaction indicates an expected call of GetDbTransaction.
func (mr *MockSqlDBHandleMockRecorder) GetDbTransaction(txName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDbTransaction", reflect.TypeOf((*MockSqlDBHandle)(nil).GetDbTransaction), txName)
}

// GetDbType mocks base method.
func (m *MockSqlDBHandle) GetDbType() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDbType")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetDbType indicates an expected call of GetDbType.
func (mr *MockSqlDBHandleMockRecorder) GetDbType() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDbType", reflect.TypeOf((*MockSqlDBHandle)(nil).GetDbType))
}

// GetKeys mocks base method.
func (m *MockSqlDBHandle) GetKeys(keys [][]byte) ([][]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetKeys", keys)
	ret0, _ := ret[0].([][]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetKeys indicates an expected call of GetKeys.
func (mr *MockSqlDBHandleMockRecorder) GetKeys(keys interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetKeys", reflect.TypeOf((*MockSqlDBHandle)(nil).GetKeys), keys)
}

// GetSqlDbType mocks base method.
func (m *MockSqlDBHandle) GetSqlDbType() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSqlDbType")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetSqlDbType indicates an expected call of GetSqlDbType.
func (mr *MockSqlDBHandleMockRecorder) GetSqlDbType() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSqlDbType", reflect.TypeOf((*MockSqlDBHandle)(nil).GetSqlDbType))
}

// GetWriteBatchSize mocks base method.
func (m *MockSqlDBHandle) GetWriteBatchSize() uint64 {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetWriteBatchSize")
	ret0, _ := ret[0].(uint64)
	return ret0
}

// GetWriteBatchSize indicates an expected call of GetWriteBatchSize.
func (mr *MockSqlDBHandleMockRecorder) GetWriteBatchSize() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetWriteBatchSize", reflect.TypeOf((*MockSqlDBHandle)(nil).GetWriteBatchSize))
}

// Has mocks base method.
func (m *MockSqlDBHandle) Has(key []byte) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Has", key)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Has indicates an expected call of Has.
func (mr *MockSqlDBHandleMockRecorder) Has(key interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Has", reflect.TypeOf((*MockSqlDBHandle)(nil).Has), key)
}

// NewIteratorWithPrefix mocks base method.
func (m *MockSqlDBHandle) NewIteratorWithPrefix(prefix []byte) (protocol.Iterator, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NewIteratorWithPrefix", prefix)
	ret0, _ := ret[0].(protocol.Iterator)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// NewIteratorWithPrefix indicates an expected call of NewIteratorWithPrefix.
func (mr *MockSqlDBHandleMockRecorder) NewIteratorWithPrefix(prefix interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewIteratorWithPrefix", reflect.TypeOf((*MockSqlDBHandle)(nil).NewIteratorWithPrefix), prefix)
}

// NewIteratorWithRange mocks base method.
func (m *MockSqlDBHandle) NewIteratorWithRange(start, limit []byte) (protocol.Iterator, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NewIteratorWithRange", start, limit)
	ret0, _ := ret[0].(protocol.Iterator)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// NewIteratorWithRange indicates an expected call of NewIteratorWithRange.
func (mr *MockSqlDBHandleMockRecorder) NewIteratorWithRange(start, limit interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewIteratorWithRange", reflect.TypeOf((*MockSqlDBHandle)(nil).NewIteratorWithRange), start, limit)
}

// Put mocks base method.
func (m *MockSqlDBHandle) Put(key, value []byte) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Put", key, value)
	ret0, _ := ret[0].(error)
	return ret0
}

// Put indicates an expected call of Put.
func (mr *MockSqlDBHandleMockRecorder) Put(key, value interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Put", reflect.TypeOf((*MockSqlDBHandle)(nil).Put), key, value)
}

// QueryMulti mocks base method.
func (m *MockSqlDBHandle) QueryMulti(sql string, values ...interface{}) (protocol.SqlRows, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{sql}
	for _, a := range values {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "QueryMulti", varargs...)
	ret0, _ := ret[0].(protocol.SqlRows)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// QueryMulti indicates an expected call of QueryMulti.
func (mr *MockSqlDBHandleMockRecorder) QueryMulti(sql interface{}, values ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{sql}, values...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueryMulti", reflect.TypeOf((*MockSqlDBHandle)(nil).QueryMulti), varargs...)
}

// QuerySingle mocks base method.
func (m *MockSqlDBHandle) QuerySingle(sql string, values ...interface{}) (protocol.SqlRow, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{sql}
	for _, a := range values {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "QuerySingle", varargs...)
	ret0, _ := ret[0].(protocol.SqlRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// QuerySingle indicates an expected call of QuerySingle.
func (mr *MockSqlDBHandleMockRecorder) QuerySingle(sql interface{}, values ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{sql}, values...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QuerySingle", reflect.TypeOf((*MockSqlDBHandle)(nil).QuerySingle), varargs...)
}

// RollbackDbTransaction mocks base method.
func (m *MockSqlDBHandle) RollbackDbTransaction(txName string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RollbackDbTransaction", txName)
	ret0, _ := ret[0].(error)
	return ret0
}

// RollbackDbTransaction indicates an expected call of RollbackDbTransaction.
func (mr *MockSqlDBHandleMockRecorder) RollbackDbTransaction(txName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RollbackDbTransaction", reflect.TypeOf((*MockSqlDBHandle)(nil).RollbackDbTransaction), txName)
}

// Save mocks base method.
func (m *MockSqlDBHandle) Save(value interface{}) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Save", value)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Save indicates an expected call of Save.
func (mr *MockSqlDBHandleMockRecorder) Save(value interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Save", reflect.TypeOf((*MockSqlDBHandle)(nil).Save), value)
}

// WriteBatch mocks base method.
func (m *MockSqlDBHandle) WriteBatch(batch protocol.StoreBatcher, sync bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WriteBatch", batch, sync)
	ret0, _ := ret[0].(error)
	return ret0
}

// WriteBatch indicates an expected call of WriteBatch.
func (mr *MockSqlDBHandleMockRecorder) WriteBatch(batch, sync interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WriteBatch", reflect.TypeOf((*MockSqlDBHandle)(nil).WriteBatch), batch, sync)
}

// MockSqlDBTransaction is a mock of SqlDBTransaction interface.
type MockSqlDBTransaction struct {
	ctrl     *gomock.Controller
	recorder *MockSqlDBTransactionMockRecorder
}

// MockSqlDBTransactionMockRecorder is the mock recorder for MockSqlDBTransaction.
type MockSqlDBTransactionMockRecorder struct {
	mock *MockSqlDBTransaction
}

// NewMockSqlDBTransaction creates a new mock instance.
func NewMockSqlDBTransaction(ctrl *gomock.Controller) *MockSqlDBTransaction {
	mock := &MockSqlDBTransaction{ctrl: ctrl}
	mock.recorder = &MockSqlDBTransactionMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSqlDBTransaction) EXPECT() *MockSqlDBTransactionMockRecorder {
	return m.recorder
}

// BeginDbSavePoint mocks base method.
func (m *MockSqlDBTransaction) BeginDbSavePoint(savePointName string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BeginDbSavePoint", savePointName)
	ret0, _ := ret[0].(error)
	return ret0
}

// BeginDbSavePoint indicates an expected call of BeginDbSavePoint.
func (mr *MockSqlDBTransactionMockRecorder) BeginDbSavePoint(savePointName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BeginDbSavePoint", reflect.TypeOf((*MockSqlDBTransaction)(nil).BeginDbSavePoint), savePointName)
}

// ChangeContextDb mocks base method.
func (m *MockSqlDBTransaction) ChangeContextDb(dbName string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ChangeContextDb", dbName)
	ret0, _ := ret[0].(error)
	return ret0
}

// ChangeContextDb indicates an expected call of ChangeContextDb.
func (mr *MockSqlDBTransactionMockRecorder) ChangeContextDb(dbName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ChangeContextDb", reflect.TypeOf((*MockSqlDBTransaction)(nil).ChangeContextDb), dbName)
}

// ExecSql mocks base method.
func (m *MockSqlDBTransaction) ExecSql(sql string, values ...interface{}) (int64, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{sql}
	for _, a := range values {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ExecSql", varargs...)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ExecSql indicates an expected call of ExecSql.
func (mr *MockSqlDBTransactionMockRecorder) ExecSql(sql interface{}, values ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{sql}, values...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExecSql", reflect.TypeOf((*MockSqlDBTransaction)(nil).ExecSql), varargs...)
}

// QueryMulti mocks base method.
func (m *MockSqlDBTransaction) QueryMulti(sql string, values ...interface{}) (protocol.SqlRows, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{sql}
	for _, a := range values {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "QueryMulti", varargs...)
	ret0, _ := ret[0].(protocol.SqlRows)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// QueryMulti indicates an expected call of QueryMulti.
func (mr *MockSqlDBTransactionMockRecorder) QueryMulti(sql interface{}, values ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{sql}, values...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueryMulti", reflect.TypeOf((*MockSqlDBTransaction)(nil).QueryMulti), varargs...)
}

// QuerySingle mocks base method.
func (m *MockSqlDBTransaction) QuerySingle(sql string, values ...interface{}) (protocol.SqlRow, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{sql}
	for _, a := range values {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "QuerySingle", varargs...)
	ret0, _ := ret[0].(protocol.SqlRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// QuerySingle indicates an expected call of QuerySingle.
func (mr *MockSqlDBTransactionMockRecorder) QuerySingle(sql interface{}, values ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{sql}, values...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QuerySingle", reflect.TypeOf((*MockSqlDBTransaction)(nil).QuerySingle), varargs...)
}

// RollbackDbSavePoint mocks base method.
func (m *MockSqlDBTransaction) RollbackDbSavePoint(savePointName string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RollbackDbSavePoint", savePointName)
	ret0, _ := ret[0].(error)
	return ret0
}

// RollbackDbSavePoint indicates an expected call of RollbackDbSavePoint.
func (mr *MockSqlDBTransactionMockRecorder) RollbackDbSavePoint(savePointName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RollbackDbSavePoint", reflect.TypeOf((*MockSqlDBTransaction)(nil).RollbackDbSavePoint), savePointName)
}

// Save mocks base method.
func (m *MockSqlDBTransaction) Save(value interface{}) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Save", value)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Save indicates an expected call of Save.
func (mr *MockSqlDBTransactionMockRecorder) Save(value interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Save", reflect.TypeOf((*MockSqlDBTransaction)(nil).Save), value)
}

// SaveBatch mocks base method.
func (m *MockSqlDBTransaction) SaveBatch(values []interface{}) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveBatch", values)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SaveBatch indicates an expected call of SaveBatch.
func (mr *MockSqlDBTransactionMockRecorder) SaveBatch(values interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveBatch", reflect.TypeOf((*MockSqlDBTransaction)(nil).SaveBatch), values)
}

// MockSqlRow is a mock of SqlRow interface.
type MockSqlRow struct {
	ctrl     *gomock.Controller
	recorder *MockSqlRowMockRecorder
}

// MockSqlRowMockRecorder is the mock recorder for MockSqlRow.
type MockSqlRowMockRecorder struct {
	mock *MockSqlRow
}

// NewMockSqlRow creates a new mock instance.
func NewMockSqlRow(ctrl *gomock.Controller) *MockSqlRow {
	mock := &MockSqlRow{ctrl: ctrl}
	mock.recorder = &MockSqlRowMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSqlRow) EXPECT() *MockSqlRowMockRecorder {
	return m.recorder
}

// Data mocks base method.
func (m *MockSqlRow) Data() (map[string][]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Data")
	ret0, _ := ret[0].(map[string][]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Data indicates an expected call of Data.
func (mr *MockSqlRowMockRecorder) Data() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Data", reflect.TypeOf((*MockSqlRow)(nil).Data))
}

// IsEmpty mocks base method.
func (m *MockSqlRow) IsEmpty() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsEmpty")
	ret0, _ := ret[0].(bool)
	return ret0
}

// IsEmpty indicates an expected call of IsEmpty.
func (mr *MockSqlRowMockRecorder) IsEmpty() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsEmpty", reflect.TypeOf((*MockSqlRow)(nil).IsEmpty))
}

// ScanColumns mocks base method.
func (m *MockSqlRow) ScanColumns(dest ...interface{}) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{}
	for _, a := range dest {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ScanColumns", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// ScanColumns indicates an expected call of ScanColumns.
func (mr *MockSqlRowMockRecorder) ScanColumns(dest ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ScanColumns", reflect.TypeOf((*MockSqlRow)(nil).ScanColumns), dest...)
}

// MockSqlRows is a mock of SqlRows interface.
type MockSqlRows struct {
	ctrl     *gomock.Controller
	recorder *MockSqlRowsMockRecorder
}

// MockSqlRowsMockRecorder is the mock recorder for MockSqlRows.
type MockSqlRowsMockRecorder struct {
	mock *MockSqlRows
}

// NewMockSqlRows creates a new mock instance.
func NewMockSqlRows(ctrl *gomock.Controller) *MockSqlRows {
	mock := &MockSqlRows{ctrl: ctrl}
	mock.recorder = &MockSqlRowsMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSqlRows) EXPECT() *MockSqlRowsMockRecorder {
	return m.recorder
}

// Close mocks base method.
func (m *MockSqlRows) Close() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Close")
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close.
func (mr *MockSqlRowsMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockSqlRows)(nil).Close))
}

// Data mocks base method.
func (m *MockSqlRows) Data() (map[string][]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Data")
	ret0, _ := ret[0].(map[string][]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Data indicates an expected call of Data.
func (mr *MockSqlRowsMockRecorder) Data() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Data", reflect.TypeOf((*MockSqlRows)(nil).Data))
}

// Next mocks base method.
func (m *MockSqlRows) Next() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Next")
	ret0, _ := ret[0].(bool)
	return ret0
}

// Next indicates an expected call of Next.
func (mr *MockSqlRowsMockRecorder) Next() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Next", reflect.TypeOf((*MockSqlRows)(nil).Next))
}

// ScanColumns mocks base method.
func (m *MockSqlRows) ScanColumns(dest ...interface{}) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{}
	for _, a := range dest {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ScanColumns", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// ScanColumns indicates an expected call of ScanColumns.
func (mr *MockSqlRowsMockRecorder) ScanColumns(dest ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ScanColumns", reflect.TypeOf((*MockSqlRows)(nil).ScanColumns), dest...)
}

// MockDBHandle is a mock of DBHandle interface.
type MockDBHandle struct {
	ctrl     *gomock.Controller
	recorder *MockDBHandleMockRecorder
}

// MockDBHandleMockRecorder is the mock recorder for MockDBHandle.
type MockDBHandleMockRecorder struct {
	mock *MockDBHandle
}

// NewMockDBHandle creates a new mock instance.
func NewMockDBHandle(ctrl *gomock.Controller) *MockDBHandle {
	mock := &MockDBHandle{ctrl: ctrl}
	mock.recorder = &MockDBHandleMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDBHandle) EXPECT() *MockDBHandleMockRecorder {
	return m.recorder
}

// Close mocks base method.
func (m *MockDBHandle) Close() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Close")
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close.
func (mr *MockDBHandleMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockDBHandle)(nil).Close))
}

// CompactRange mocks base method.
func (m *MockDBHandle) CompactRange(start, limit []byte) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CompactRange", start, limit)
	ret0, _ := ret[0].(error)
	return ret0
}

// CompactRange indicates an expected call of CompactRange.
func (mr *MockDBHandleMockRecorder) CompactRange(start, limit interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CompactRange", reflect.TypeOf((*MockDBHandle)(nil).CompactRange), start, limit)
}

// Delete mocks base method.
func (m *MockDBHandle) Delete(key []byte) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", key)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockDBHandleMockRecorder) Delete(key interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockDBHandle)(nil).Delete), key)
}

// Get mocks base method.
func (m *MockDBHandle) Get(key []byte) ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", key)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockDBHandleMockRecorder) Get(key interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockDBHandle)(nil).Get), key)
}

// GetDbType mocks base method.
func (m *MockDBHandle) GetDbType() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDbType")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetDbType indicates an expected call of GetDbType.
func (mr *MockDBHandleMockRecorder) GetDbType() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDbType", reflect.TypeOf((*MockDBHandle)(nil).GetDbType))
}

// GetKeys mocks base method.
func (m *MockDBHandle) GetKeys(keys [][]byte) ([][]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetKeys", keys)
	ret0, _ := ret[0].([][]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetKeys indicates an expected call of GetKeys.
func (mr *MockDBHandleMockRecorder) GetKeys(keys interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetKeys", reflect.TypeOf((*MockDBHandle)(nil).GetKeys), keys)
}

// GetWriteBatchSize mocks base method.
func (m *MockDBHandle) GetWriteBatchSize() uint64 {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetWriteBatchSize")
	ret0, _ := ret[0].(uint64)
	return ret0
}

// GetWriteBatchSize indicates an expected call of GetWriteBatchSize.
func (mr *MockDBHandleMockRecorder) GetWriteBatchSize() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetWriteBatchSize", reflect.TypeOf((*MockDBHandle)(nil).GetWriteBatchSize))
}

// Has mocks base method.
func (m *MockDBHandle) Has(key []byte) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Has", key)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Has indicates an expected call of Has.
func (mr *MockDBHandleMockRecorder) Has(key interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Has", reflect.TypeOf((*MockDBHandle)(nil).Has), key)
}

// NewIteratorWithPrefix mocks base method.
func (m *MockDBHandle) NewIteratorWithPrefix(prefix []byte) (protocol.Iterator, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NewIteratorWithPrefix", prefix)
	ret0, _ := ret[0].(protocol.Iterator)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// NewIteratorWithPrefix indicates an expected call of NewIteratorWithPrefix.
func (mr *MockDBHandleMockRecorder) NewIteratorWithPrefix(prefix interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewIteratorWithPrefix", reflect.TypeOf((*MockDBHandle)(nil).NewIteratorWithPrefix), prefix)
}

// NewIteratorWithRange mocks base method.
func (m *MockDBHandle) NewIteratorWithRange(start, limit []byte) (protocol.Iterator, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NewIteratorWithRange", start, limit)
	ret0, _ := ret[0].(protocol.Iterator)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// NewIteratorWithRange indicates an expected call of NewIteratorWithRange.
func (mr *MockDBHandleMockRecorder) NewIteratorWithRange(start, limit interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewIteratorWithRange", reflect.TypeOf((*MockDBHandle)(nil).NewIteratorWithRange), start, limit)
}

// Put mocks base method.
func (m *MockDBHandle) Put(key, value []byte) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Put", key, value)
	ret0, _ := ret[0].(error)
	return ret0
}

// Put indicates an expected call of Put.
func (mr *MockDBHandleMockRecorder) Put(key, value interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Put", reflect.TypeOf((*MockDBHandle)(nil).Put), key, value)
}

// WriteBatch mocks base method.
func (m *MockDBHandle) WriteBatch(batch protocol.StoreBatcher, sync bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WriteBatch", batch, sync)
	ret0, _ := ret[0].(error)
	return ret0
}

// WriteBatch indicates an expected call of WriteBatch.
func (mr *MockDBHandleMockRecorder) WriteBatch(batch, sync interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WriteBatch", reflect.TypeOf((*MockDBHandle)(nil).WriteBatch), batch, sync)
}

// MockStoreBatcher is a mock of StoreBatcher interface.
type MockStoreBatcher struct {
	ctrl     *gomock.Controller
	recorder *MockStoreBatcherMockRecorder
}

// MockStoreBatcherMockRecorder is the mock recorder for MockStoreBatcher.
type MockStoreBatcherMockRecorder struct {
	mock *MockStoreBatcher
}

// NewMockStoreBatcher creates a new mock instance.
func NewMockStoreBatcher(ctrl *gomock.Controller) *MockStoreBatcher {
	mock := &MockStoreBatcher{ctrl: ctrl}
	mock.recorder = &MockStoreBatcherMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockStoreBatcher) EXPECT() *MockStoreBatcherMockRecorder {
	return m.recorder
}

// Delete mocks base method.
func (m *MockStoreBatcher) Delete(key []byte) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Delete", key)
}

// Delete indicates an expected call of Delete.
func (mr *MockStoreBatcherMockRecorder) Delete(key interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockStoreBatcher)(nil).Delete), key)
}

// Get mocks base method.
func (m *MockStoreBatcher) Get(key []byte) ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", key)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockStoreBatcherMockRecorder) Get(key interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockStoreBatcher)(nil).Get), key)
}

// Has mocks base method.
func (m *MockStoreBatcher) Has(key []byte) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Has", key)
	ret0, _ := ret[0].(bool)
	return ret0
}

// Has indicates an expected call of Has.
func (mr *MockStoreBatcherMockRecorder) Has(key interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Has", reflect.TypeOf((*MockStoreBatcher)(nil).Has), key)
}

// KVs mocks base method.
func (m *MockStoreBatcher) KVs() map[string][]byte {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "KVs")
	ret0, _ := ret[0].(map[string][]byte)
	return ret0
}

// KVs indicates an expected call of KVs.
func (mr *MockStoreBatcherMockRecorder) KVs() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "KVs", reflect.TypeOf((*MockStoreBatcher)(nil).KVs))
}

// Len mocks base method.
func (m *MockStoreBatcher) Len() int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Len")
	ret0, _ := ret[0].(int)
	return ret0
}

// Len indicates an expected call of Len.
func (mr *MockStoreBatcherMockRecorder) Len() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Len", reflect.TypeOf((*MockStoreBatcher)(nil).Len))
}

// Merge mocks base method.
func (m *MockStoreBatcher) Merge(batcher protocol.StoreBatcher) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Merge", batcher)
}

// Merge indicates an expected call of Merge.
func (mr *MockStoreBatcherMockRecorder) Merge(batcher interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Merge", reflect.TypeOf((*MockStoreBatcher)(nil).Merge), batcher)
}

// Put mocks base method.
func (m *MockStoreBatcher) Put(key, value []byte) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Put", key, value)
}

// Put indicates an expected call of Put.
func (mr *MockStoreBatcherMockRecorder) Put(key, value interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Put", reflect.TypeOf((*MockStoreBatcher)(nil).Put), key, value)
}

// Remove mocks base method.
func (m *MockStoreBatcher) Remove(key []byte) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Remove", key)
}

// Remove indicates an expected call of Remove.
func (mr *MockStoreBatcherMockRecorder) Remove(key interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Remove", reflect.TypeOf((*MockStoreBatcher)(nil).Remove), key)
}

// SplitBatch mocks base method.
func (m *MockStoreBatcher) SplitBatch(batchCnt uint64) []protocol.StoreBatcher {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SplitBatch", batchCnt)
	ret0, _ := ret[0].([]protocol.StoreBatcher)
	return ret0
}

// SplitBatch indicates an expected call of SplitBatch.
func (mr *MockStoreBatcherMockRecorder) SplitBatch(batchCnt interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SplitBatch", reflect.TypeOf((*MockStoreBatcher)(nil).SplitBatch), batchCnt)
}

// MockSqlVerifier is a mock of SqlVerifier interface.
type MockSqlVerifier struct {
	ctrl     *gomock.Controller
	recorder *MockSqlVerifierMockRecorder
}

// MockSqlVerifierMockRecorder is the mock recorder for MockSqlVerifier.
type MockSqlVerifierMockRecorder struct {
	mock *MockSqlVerifier
}

// NewMockSqlVerifier creates a new mock instance.
func NewMockSqlVerifier(ctrl *gomock.Controller) *MockSqlVerifier {
	mock := &MockSqlVerifier{ctrl: ctrl}
	mock.recorder = &MockSqlVerifierMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSqlVerifier) EXPECT() *MockSqlVerifierMockRecorder {
	return m.recorder
}

// VerifyDDLSql mocks base method.
func (m *MockSqlVerifier) VerifyDDLSql(sql string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "VerifyDDLSql", sql)
	ret0, _ := ret[0].(error)
	return ret0
}

// VerifyDDLSql indicates an expected call of VerifyDDLSql.
func (mr *MockSqlVerifierMockRecorder) VerifyDDLSql(sql interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VerifyDDLSql", reflect.TypeOf((*MockSqlVerifier)(nil).VerifyDDLSql), sql)
}

// VerifyDMLSql mocks base method.
func (m *MockSqlVerifier) VerifyDMLSql(sql string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "VerifyDMLSql", sql)
	ret0, _ := ret[0].(error)
	return ret0
}

// VerifyDMLSql indicates an expected call of VerifyDMLSql.
func (mr *MockSqlVerifierMockRecorder) VerifyDMLSql(sql interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VerifyDMLSql", reflect.TypeOf((*MockSqlVerifier)(nil).VerifyDMLSql), sql)
}

// VerifyDQLSql mocks base method.
func (m *MockSqlVerifier) VerifyDQLSql(sql string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "VerifyDQLSql", sql)
	ret0, _ := ret[0].(error)
	return ret0
}

// VerifyDQLSql indicates an expected call of VerifyDQLSql.
func (mr *MockSqlVerifierMockRecorder) VerifyDQLSql(sql interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VerifyDQLSql", reflect.TypeOf((*MockSqlVerifier)(nil).VerifyDQLSql), sql)
}

// MockSysContractQuery is a mock of SysContractQuery interface.
type MockSysContractQuery struct {
	ctrl     *gomock.Controller
	recorder *MockSysContractQueryMockRecorder
}

// MockSysContractQueryMockRecorder is the mock recorder for MockSysContractQuery.
type MockSysContractQueryMockRecorder struct {
	mock *MockSysContractQuery
}

// NewMockSysContractQuery creates a new mock instance.
func NewMockSysContractQuery(ctrl *gomock.Controller) *MockSysContractQuery {
	mock := &MockSysContractQuery{ctrl: ctrl}
	mock.recorder = &MockSysContractQueryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSysContractQuery) EXPECT() *MockSysContractQueryMockRecorder {
	return m.recorder
}

// GetContractByName mocks base method.
func (m *MockSysContractQuery) GetContractByName(name string) (*common.Contract, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetContractByName", name)
	ret0, _ := ret[0].(*common.Contract)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetContractByName indicates an expected call of GetContractByName.
func (mr *MockSysContractQueryMockRecorder) GetContractByName(name interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetContractByName", reflect.TypeOf((*MockSysContractQuery)(nil).GetContractByName), name)
}

// GetContractBytecode mocks base method.
func (m *MockSysContractQuery) GetContractBytecode(name string) ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetContractBytecode", name)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetContractBytecode indicates an expected call of GetContractBytecode.
func (mr *MockSysContractQueryMockRecorder) GetContractBytecode(name interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetContractBytecode", reflect.TypeOf((*MockSysContractQuery)(nil).GetContractBytecode), name)
}

// MockMemberQuery is a mock of MemberQuery interface.
type MockMemberQuery struct {
	ctrl     *gomock.Controller
	recorder *MockMemberQueryMockRecorder
}

// MockMemberQueryMockRecorder is the mock recorder for MockMemberQuery.
type MockMemberQueryMockRecorder struct {
	mock *MockMemberQuery
}

// NewMockMemberQuery creates a new mock instance.
func NewMockMemberQuery(ctrl *gomock.Controller) *MockMemberQuery {
	mock := &MockMemberQuery{ctrl: ctrl}
	mock.recorder = &MockMemberQueryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMemberQuery) EXPECT() *MockMemberQueryMockRecorder {
	return m.recorder
}

// GetMemberExtraData mocks base method.
func (m *MockMemberQuery) GetMemberExtraData(member *accesscontrol.Member) (*accesscontrol.MemberExtraData, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMemberExtraData", member)
	ret0, _ := ret[0].(*accesscontrol.MemberExtraData)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMemberExtraData indicates an expected call of GetMemberExtraData.
func (mr *MockMemberQueryMockRecorder) GetMemberExtraData(member interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMemberExtraData", reflect.TypeOf((*MockMemberQuery)(nil).GetMemberExtraData), member)
}
