/*
Copyright (C) BABEC. All rights reserved.
Copyright (C) THL A29 Limited, a Tencent company. All rights reserved.

SPDX-License-Identifier: Apache-2.0
*/

package utils

import (
	"bytes"
	"crypto/x509"
	"encoding/hex"
	"encoding/pem"
	"fmt"
	"testing"
	"time"

	bccrypto "zhanghefan123/security/common/crypto"
	"zhanghefan123/security/common/crypto/asym"

	"github.com/stretchr/testify/assert"
	"zhanghefan123/security/common/crypto/asym/rsa"
	bcx509 "zhanghefan123/security/common/crypto/x509"
	"zhanghefan123/security/protobuf/pb-go/tee"
)

var proofStr = "0a9b100a43546869732069732061206368616c6c656e6765206d6573736167652c2063686f6f73652072616e6420666c6f617420302e32303331383638373636343733323238352e128006524768494c7938764b30464251554642515546425155464251554642515546425155464251554642515546425155464251554642515546425155464251554642515546425155464251554642515546425155464251554a3351554642515546425155464253454642515546425155464251556453596a465a51574a48544846585655784f63444a6f4d6e7051626e46434e474e754e477871574468424d6d73354b33524f526b3149656b46425155464251554642515546425155464251554642515546425155464251554642515546425155464251554642515546425155464251554e454d586875626d5a6c636b74475345517964585a5a635652595a4552424f476c614d6a4a72513051316548633361444d345130316d5432356ef4d326c55656b7079647a5a57566d704b5a6b3079617a677a6258644251554642515546425155464251554642515546425155464251554e714e3049345a335a425330387756476c4d623067784e456378536c633d1ad009308204cc308203b4a003020102021100bbaca420c0173013199beb53d0736654300d06092a864886f70d01010b050030533121301f060355040a13184d616e6e696e67205075626c69636174696f6e7320436f2e310e300c060355040b1305426f6f6b73311e301c06035504031315436861696e4d616b6572205375706572205465616d301e170d3232313031383032333934395a170d3332313031353032333934395a3046310b300906035504061302434e311a3018060355040a131177782e636861696e6d616b65722e6f7267311b3019060355040313127465652e636861696e6d616b65722e6f726730819f300d06092a864886f70d010101050003818d0030818902818100bf93291b7d28ee6107aab7ea2a08a94dab7a4bb7f1dc4066272a0bb9dae4b3374b2ff6a201e3093428801782a3f496e7a192b499c160c5ff26b727f8b2d6df54c52fb25e1e0d410c8f65f5471462f0b6c345388ce3a47fae8c40b8434f8ba7052e94f75a639eee352adf338679b59644b070f60796a256c76fd326eeb3b9dd710203010001a382022a30820226300f0603551d25040830060604551d2500300f0603551d130101ff040530030101ff301f0603551d2304183016801443449cb91fd935d3d11c3d7caec868b96eab1a98301206092a864886f70d010914040571756f7465301606092a864886f70d0109150409313233343536373839308201b3060b2a864886f70d010c0a0101048201a22d2d2d2d2d424547494e205055424c4943204b45592d2d2d2d2d0a4d49494243674b434151454174305a2b30316435516845516e72682b4f334874694e44686f39725a4774774d756c373139415049635548387847554d366f575a0a4d695374784d4742424866776a36677055795956774a676837655a565649665a46692b376c4944646d496b6d726c6d45664f5033755a646b4b6e52503855504f0a474c697431613437725947623656384649554f6e484753426f73657341622f4a416b57646a3361786f706f3844566f336b5077754f2f634c46615161373877470a5751706a6c32736e6a415658515147386d476736784b592f77374d676e5548346c4b366e566c746b4a3349386e6452776a654c4e4578506c7069563042376d6f0a617355387678366b653671372b4b7964657373596a374e767a7332475a714b62726c62726956634e3248733965587a61482f45737a66752b4c54774248596b340a4a33753479476f5a5452455847557a35623663766963636f76546251384a716e79514944415141420a2d2d2d2d2d454e44205055424c4943204b45592d2d2d2d2d0a300d06092a864886f70d01010b0500038201010075cb053804c8d8445bb2e7f4c8f79c6082bed70f2ca94889aa01f6a102c39a26cb6732608d57cf5bea3f6827c4243103584385a76506c4d44a7fb7eb239babaa5e7174e5fdce0e99e94db098317ffebe2b7c7accf03961616edf94effe38124a4e3b4854beaccfc29322ed8bdc11d0e88235349981ad08cf3cb4fd63046e5a71760ae238dc6a575eb23ee5d7a017534553fb42b55e69d60b156b8236e6cae3687c107adf89312b5abd2bb278d8d41ceb72b4c334b00cca28ac6b301e55719d4ee5fc6f8e3854c055e41a0ba90b85d5e8ba030929a714b87f0b49f7d02bb7f8d8d4b8c7a1d1009e712e340bdfeef3721a0584203e7b412ca7ad3f7ca58f8eda27128001157e2cd0ac12b0debdd9cb76f092b5db3457b38d80e243e6adaa7dd9692517caffd527446292d102a594066aae301428ff0deb388a7f38441ad246163a70dcfa9ea97802fbdaeb841381b8f19b716aeca11b9f8a63893237239ef21466c4b5155aa350d360c353853905e493b30dd8e57fdb0de2d9f5f43b3fc0675a77571c93"

var caCertSTring = "2d2d2d2d2d424547494e2043455254494649434154452d2d2d2d2d0a4d4949446b544343416e6d674177494241674951507866724649766471595a59457942567859547a5154414e42676b71686b69473977304241517346414442540a4d534577487759445651514b4578684e595735756157356e49464231596d787059324630615739756379424462793478446a414d42674e564241735442554a760a6232747a4d52347748415944565151444578564461474670626b31686132567949464e31634756794946526c595730774868634e4d6a49784d4445344d4449300a4f4451785768634e4d7a49784d4445314d4449304f445178576a42544d534577487759445651514b4578684e595735756157356e49464231596d7870593246300a615739756379424462793478446a414d42674e564241735442554a766232747a4d52347748415944565151444578564461474670626b31686132567949464e310a634756794946526c59573077676745694d4130474353714753496233445145424151554141344942447741776767454b416f49424151437835366f764e46796c0a4368616162712b32756f793061796b2f3353657668684b43357767664370484562415074696b695232377a74713856444d71482f71484e3663382f4d66412b510a6375427375306278433735426f7051317167764844654e427a2f6a6f464430747a756c557a396578484b626e4d7a49686c2b5571736d5a7548333370777843380a356e4a594c3530792b71736c6f6c5276592f74696d73777236304150765341314a4e38584d2b6f32646c6d6c746c6541596c735966324b3348795858434542350a4b537742683543613370764e444c587143515064722f4f4d6534494a6c416f306b794c4a6950316162776d6239322b6d45765737453776615a4f3732347055390a48597635324f73596b6b4635547a5255547844516b764b4e4f2b526d737141487759636c2f55784e4a36754b6e667a6c4a51454d386c315a64536165476772520a6c34674a767939556554353541674d424141476a595442664d41344741315564447745422f775145417749437044416442674e5648535545466a4155426767720a4267454642516344416759494b775942425155484177457744775944565230544151482f42415577417745422f7a416442674e564851344546675155513053630a75522f5a4e645052484431387273686f75573672477067774451594a4b6f5a496876634e4151454c425141446767454241417143466e31486664675a4b624c330a70775a505230776e476c4a78704f434670383257794f3562336e324865486361526f742f4c4c5751615172475175666a62354b3452456e58656f326e58304d670a4537495070466e6a464778384f7463746c7931666e66756f6c586670767858584e4f3772634873494344396d444f53725337735a57516d432b4f73734c75535a0a48527434426a42412f4d353151674374724d623757366e55626c445634632f717053384a5047374a482f6f4571723441364a4f756e31787249506664426175320a6c4e375053725836365838507869724262376b4c66422b4d5868702f59495462644934566e765a574b325559515a6e4a5558357168427831717a43724679744e0a7453654730766a51506b71456d33635564493438714c6e674144366d51517136336b71756977424d6668456e37386552686c326661543077324e6742643436670a324a4670416c453d0a2d2d2d2d2d454e442043455254494649434154452d2d2d2d2d0a"

var reportFromChain = "524768494c7938764b30464251554642515546425155464251554642515546425155464251554642515546425155464251554642515546425155464251554642515546425155464251554642515546425155464251554a3351554642515546425155464253454642515546425155464251556453596a465a51574a48544846585655784f63444a6f4d6e7051626e46434e474e754e477871574468424d6d73354b33524f526b3149656b46425155464251554642515546425155464251554642515546425155464251554642515546425155464251554642515546425155464251554e454d586875626d5a6c636b74475345517964585a5a635652595a4552424f476c614d6a4a72513051316548633361444d345130316d5432356ef4d326c55656b7079647a5a57566d704b5a6b3079617a677a6258644251554642515546425155464251554642515546425155464251554e714e3049345a335a425330387756476c4d623067784e456378536c633d"

var signStr = "29bc6e84eed3a8eb98e190b7b7dc31cf1912e997ffd5efe72249105a8693bc8571da0f3c1e41e2f4d7038fe87d667b8aa552d671d24a05a9c50337546caf2eafe2ec7d4a190531790a36b38ecd9d4c09516a1dd59f9da298e349de725eac7cabd471f1d1da6405351fea205873f7d0c60c844e185e851123eabcbf6291bff364"

var msgProof = "00000043546869732069732061206368616c6c656e6765206d6573736167652c2063686f6f73652072616e6420666c6f617420302e32303331383638373636343733323238352e00000300524768494c7938764b30464251554642515546425155464251554642515546425155464251554642515546425155464251554642515546425155464251554642515546425155464251554642515546425155464251554a3351554642515546425155464253454642515546425155464251556453596a465a51574a48544846585655784f63444a6f4d6e7051626e46434e474e754e477871574468424d6d73354b33524f526b3149656b46425155464251554642515546425155464251554642515546425155464251554642515546425155464251554642515546425155464251554e454d586875626d5a6c636b74475345517964585a5a635652595a4552424f476c614d6a4a72513051316548633361444d345130316d5432356ef4d326c55656b7079647a5a57566d704b5a6b3079617a677a6258644251554642515546425155464251554642515546425155464251554e714e3049345a335a425330387756476c4d623067784e456378536c633d000004d0308204cc308203b4a003020102021100bbaca420c0173013199beb53d0736654300d06092a864886f70d01010b050030533121301f060355040a13184d616e6e696e67205075626c69636174696f6e7320436f2e310e300c060355040b1305426f6f6b73311e301c06035504031315436861696e4d616b6572205375706572205465616d301e170d3232313031383032333934395a170d3332313031353032333934395a3046310b300906035504061302434e311a3018060355040a131177782e636861696e6d616b65722e6f7267311b3019060355040313127465652e636861696e6d616b65722e6f726730819f300d06092a864886f70d010101050003818d0030818902818100bf93291b7d28ee6107aab7ea2a08a94dab7a4bb7f1dc4066272a0bb9dae4b3374b2ff6a201e3093428801782a3f496e7a192b499c160c5ff26b727f8b2d6df54c52fb25e1e0d410c8f65f5471462f0b6c345388ce3a47fae8c40b8434f8ba7052e94f75a639eee352adf338679b59644b070f60796a256c76fd326eeb3b9dd710203010001a382022a30820226300f0603551d25040830060604551d2500300f0603551d130101ff040530030101ff301f0603551d2304183016801443449cb91fd935d3d11c3d7caec868b96eab1a98301206092a864886f70d010914040571756f7465301606092a864886f70d0109150409313233343536373839308201b3060b2a864886f70d010c0a0101048201a22d2d2d2d2d424547494e205055424c4943204b45592d2d2d2d2d0a4d49494243674b434151454174305a2b30316435516845516e72682b4f334874694e44686f39725a4774774d756c373139415049635548387847554d366f575a0a4d695374784d4742424866776a36677055795956774a676837655a565649665a46692b376c4944646d496b6d726c6d45664f5033755a646b4b6e52503855504f0a474c697431613437725947623656384649554f6e484753426f73657341622f4a416b57646a3361786f706f3844566f336b5077754f2f634c46615161373877470a5751706a6c32736e6a415658515147386d476736784b592f77374d676e5548346c4b366e566c746b4a3349386e6452776a654c4e4578506c7069563042376d6f0a617355387678366b653671372b4b7964657373596a374e767a7332475a714b62726c62726956634e3248733965587a61482f45737a66752b4c54774248596b340a4a33753479476f5a5452455847557a35623663766963636f76546251384a716e79514944415141420a2d2d2d2d2d454e44205055424c4943204b45592d2d2d2d2d0a300d06092a864886f70d01010b0500038201010075cb053804c8d8445bb2e7f4c8f79c6082bed70f2ca94889aa01f6a102c39a26cb6732608d57cf5bea3f6827c4243103584385a76506c4d44a7fb7eb239babaa5e7174e5fdce0e99e94db098317ffebe2b7c7accf03961616edf94effe38124a4e3b4854beaccfc29322ed8bdc11d0e88235349981ad08cf3cb4fd63046e5a71760ae238dc6a575eb23ee5d7a017534553fb42b55e69d60b156b8236e6cae3687c107adf89312b5abd2bb278d8d41ceb72b4c334b00cca28ac6b301e55719d4ee5fc6f8e3854c055e41a0ba90b85d5e8ba030929a714b87f0b49f7d02bb7f8d8d4b8c7a1d1009e712e340bdfeef3721a0584203e7b412ca7ad3f7ca58f8eda27"

func TestBinaryToUint32(t *testing.T) {
	tmp := []byte("1000")
	a, err := BinaryToUint32(tmp)
	assert.Nil(t, err)
	fmt.Println(a)
}

func TestUint32ToBinary(t *testing.T) {
	tmp := uint32(825241648)
	a := Uint32ToBinary(tmp)
	fmt.Println(a)
	assert.Nil(t, nil)
}

func TestGrapheneAttestationVerify(t *testing.T) {

	proofByte, _ := hex.DecodeString(proofStr)
	proof := &tee.RemoteAttestationResponse{}
	err := proof.Unmarshal(proofByte)
	assert.Nil(t, err)
	fmt.Println(proof.Signature)

	caCertPem, _ := hex.DecodeString(caCertSTring)

	caCertBlock, _ := pem.Decode(caCertPem)
	caCert, err := bcx509.ParseCertificate(caCertBlock.Bytes)
	intermediateCAPool := bcx509.NewCertPool()
	intermediateCAPool.AddCert(caCert)
	verifyOptions := bcx509.VerifyOptions{
		DNSName:                   "",
		Roots:                     intermediateCAPool,
		CurrentTime:               time.Time{},
		KeyUsages:                 []x509.ExtKeyUsage{x509.ExtKeyUsageAny},
		MaxConstraintComparisions: 0,
	}
	fmt.Println(verifyOptions)

	report, _ := hex.DecodeString(reportFromChain)
	isSuccess, teeProof, err := GrapheneAttestationVerify(proof, verifyOptions, report)
	assert.Nil(t, err)
	t.Log(isSuccess, teeProof)
}
func TestAttestationVerify(t *testing.T) {
	sign, _ := hex.DecodeString(signStr)
	signlen := len(sign)
	//proof_B := make([]byte, total)

	msg, _ := hex.DecodeString(msgProof)

	//total := KLV_LENGTH_SIZE + len(msg) + signlen
	proof := BytesCombin(msg, Uint32ToBinary(uint32(signlen)), sign)
	caCertPem, _ := hex.DecodeString(caCertSTring)
	caCertBlock, _ := pem.Decode(caCertPem)
	caCert, _ := bcx509.ParseCertificate(caCertBlock.Bytes)
	intermediateCAPool := bcx509.NewCertPool()
	intermediateCAPool.AddCert(caCert)
	verifyOptions := bcx509.VerifyOptions{
		DNSName:                   "",
		Roots:                     intermediateCAPool,
		CurrentTime:               time.Time{},
		KeyUsages:                 []x509.ExtKeyUsage{x509.ExtKeyUsageAny},
		MaxConstraintComparisions: 0,
	}
	reportChain, _ := hex.DecodeString(reportFromChain)
	_, _, err := AttestationVerify(proof, verifyOptions, reportChain)
	assert.Nil(t, err)
}

func BytesCombin(pBytes ...[]byte) []byte {
	return bytes.Join(pBytes, []byte(""))
}

func TestAttestationVerifyComponents(t *testing.T) {
	proof, _ := hex.DecodeString(msgProof)
	challengeLen, err := BinaryToUint32(proof[0:KLV_LENGTH_SIZE])

	challenge := proof[KLV_LENGTH_SIZE : challengeLen+KLV_LENGTH_SIZE]

	reportLen, err := BinaryToUint32(proof[challengeLen+KLV_LENGTH_SIZE : challengeLen+KLV_LENGTH_SIZE*2])

	report := proof[challengeLen+KLV_LENGTH_SIZE*2 : challengeLen+reportLen+KLV_LENGTH_SIZE*2]

	certLen, err := BinaryToUint32(
		proof[challengeLen+reportLen+KLV_LENGTH_SIZE*2 : challengeLen+reportLen+KLV_LENGTH_SIZE*3],
	)
	certDER := proof[challengeLen+reportLen+KLV_LENGTH_SIZE*3 : challengeLen+reportLen+certLen+KLV_LENGTH_SIZE*3]

	sign, _ := hex.DecodeString(signStr)
	//signlen := len(sign)

	certificate, err := bcx509.ParseCertificate(certDER)

	verificationKey := certificate.PublicKey

	encryptionKeyPEM, err := bcx509.GetExtByOid(OidKeyBag, certificate.Extensions)
	if err != nil {
		encryptionKeyPEM, err = bcx509.GetExtByOid(OidKeyBag, certificate.ExtraExtensions)
	}

	//encryptionKeyBlock, _ := pem.Decode(encryptionKeyPEM)
	//if encryptionKeyBlock == nil {
	//	return false, nil, fmt.Errorf("fail to decode encryption key")
	//}
	encryptionKeyInterface, err := asym.PublicKeyFromPEM(encryptionKeyPEM)

	var encryptionKey bccrypto.EncryptKey
	switch k := encryptionKeyInterface.(type) {
	case *rsa.PublicKey:
		encryptionKey = k
	default:
		panic("unrecognized encryption key type")
	}
	caCertPem, _ := hex.DecodeString(caCertSTring)
	caCertBlock, _ := pem.Decode(caCertPem)
	caCert, _ := bcx509.ParseCertificate(caCertBlock.Bytes)
	intermediateCAPool := bcx509.NewCertPool()
	intermediateCAPool.AddCert(caCert)
	verifyOptions := bcx509.VerifyOptions{
		DNSName:                   "",
		Roots:                     intermediateCAPool,
		CurrentTime:               time.Time{},
		KeyUsages:                 []x509.ExtKeyUsage{x509.ExtKeyUsageAny},
		MaxConstraintComparisions: 0,
	}
	_, _, err = AttestationVerifyComponents(challenge, sign, report, certificate, verificationKey, encryptionKey, verifyOptions)
	assert.Nil(t, err)
}
